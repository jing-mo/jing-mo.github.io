<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="posts/70b7.html"/>
      <url>posts/70b7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="number">2025</span><span class="string">年java学习笔记——集合部分</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">nodate</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">_posts</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">Java笔记</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">&#x27;https://s3.bmp.ovh/imgs/2025/02/11/4b37a908d931b81b.webp&#x27;</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Java</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">&#x27;https://s3.bmp.ovh/imgs/2025/02/11/4b37a908d931b81b.webp&#x27;</span></span><br><span class="line"><span class="attr">abbrlink:</span> <span class="string">70b7</span></span><br></pre></td></tr></table></figure><h1 id="SSM学习记录汇总"><a href="#SSM学习记录汇总" class="headerlink" title="SSM学习记录汇总"></a>SSM学习记录汇总</h1><h2 id="Sping"><a href="#Sping" class="headerlink" title="Sping"></a>Sping</h2><h3 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h3><h4 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h4><ul><li>Spring : 春天 —-&gt;给软件行业带来了春天</li><li>2002年，Rod Jahnson首次推出了Spring框架雏形interface21框架。</li><li>2004年3月24日，Spring框架以interface21框架为基础，经过重新设计，发布了1.0正式版。</li><li>很难想象Rod Johnson的学历 , 他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</li><li>Spring理念 : 使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架技术</li></ul><p>官网 : <a href="http://spring.io/">http://spring.io/</a></p><p>官方下载地址 : <a href="https://repo.spring.io/libs-release-local/org/springframework/spring/">JFrog</a></p><p>GitHub : <a href="https://github.com/spring-projects">Spring · GitHub</a></p><h4 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h4><ul><li><p>Spring是一个开源免费的框架 , 容器 .</p></li><li><p>Spring是一个轻量级的框架 , 非侵入式的 .</p></li><li><p><strong>控制反转 IoC , 面向切面 Aop</strong></p></li><li><p>对事物的支持 , 对框架的支持</p></li></ul><p>一句话概括：<strong>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</strong></p><h4 id="1-3-组成"><a href="#1-3-组成" class="headerlink" title="1.3 组成"></a>1.3 组成</h4><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudyd583d03e-48ab-49ae-80b8-bc36fa4109ce.png"></p><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式 .</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudya278ee52-9037-4340-8803-6003e8c947c3.png"></p><p>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p><ul><li><strong>核心容器</strong>：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 <code>BeanFactory</code>，它是工厂模式的实现。<code>BeanFactory</code> 使用<em>控制反转</em>（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li><li><strong>Spring 上下文</strong>：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li><li><strong>Spring AOP</strong>：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。</li><li><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li><li><strong>Spring ORM</strong>：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</li><li><strong>Spring Web 模块</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li><li><strong>Spring MVC 框架</strong>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li></ul><h4 id="1-4-拓展"><a href="#1-4-拓展" class="headerlink" title="1.4 拓展"></a>1.4 拓展</h4><p><strong>Spring Boot与Spring Cloud</strong></p><ul><li>Spring Boot 是 Spring 的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务;</li><li>Spring Cloud是基于Spring Boot实现的；</li><li>Spring Boot专注于快速、方便集成的单个微服务个体，Spring Cloud关注全局的服务治理框架；</li><li>Spring Boot使用了约束优于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置 , Spring Cloud很大的一部分是基于Spring Boot来实现，Spring Boot可以离开Spring Cloud独立使用开发项目，但是Spring Cloud离不开Spring Boot，属于依赖的关系。</li><li>SpringBoot在SpringClound中起到了承上启下的作用，如果你要学习SpringCloud必须要学习SpringBoot。</li></ul><h3 id="IOC基础"><a href="#IOC基础" class="headerlink" title="IOC基础"></a>IOC基础</h3><p>新建一个空白的maven项目</p><h4 id="2-1-分析实现"><a href="#2-1-分析实现" class="headerlink" title="2.1 分析实现"></a>2.1 分析实现</h4><p>我们先用我们原来的方式写一段代码 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再去写Dao的实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        System.out.println(&quot;获取用户数据&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后去写UserService的接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line">    public void getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后写Service的实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    private UserDao userDao = new UserDaoImpl();</span><br><span class="line">    @Override</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    UserService service = new UserServiceImpl();</span><br><span class="line">    service.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是我们原来的方式 , 开始大家也都是这么去写的对吧 . 那我们现在修改一下 .</p><p>把Userdao的实现类增加一个 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoMySqlImpl implements UserDao &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        System.out.println(&quot;MySql获取用户数据&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着我们要去使用MySql的话 , 我们就需要去service实现类里面修改对应的实现 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    private UserDao userDao = new UserDaoMySqlImpl();</span><br><span class="line">    @Override</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在假设, 我们再增加一个Userdao的实现类 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoOracleImpl implements UserDao &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        System.out.println(&quot;Oracle获取用户数据&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们要使用Oracle , 又需要去service实现类里面修改对应的实现 . 假设我们的这种需求非常大 , 这种方式就根本不适用了, 甚至反人类对吧 , 每次变动 , 都需要修改大量代码 . 这种设计的耦合性太高了, 牵一发而动全身 .</p><p><strong>那我们如何去解决呢 ?</strong></p><p>我们可以在需要用到他的地方 , 不去实现它 , 而是留出一个接口 , 利用set , 我们去代码里修改下 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    private UserDao userDao;</span><br><span class="line">    // 利用set实现</span><br><span class="line">    public void setUserDao(UserDao userDao) &#123;</span><br><span class="line">        this.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在去我们的测试类里 , 进行测试 ;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    UserServiceImpl service = new UserServiceImpl();</span><br><span class="line">    service.setUserDao( new UserDaoMySqlImpl() );</span><br><span class="line">    service.getUser();</span><br><span class="line">    //那我们现在又想用Oracle去实现呢</span><br><span class="line">    service.setUserDao( new UserDaoOracleImpl() );</span><br><span class="line">    service.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家发现了区别没有 ? 可能很多人说没啥区别 . 但是同学们 , 他们已经发生了根本性的变化 , 很多地方都不一样了 . 仔细去思考一下 , 以前所有东西都是由程序去进行控制创建 , 而现在是由我们自行控制创建对象 , 把主动权交给了调用者 . 程序不用去管怎么创建,怎么实现了 . 它只负责提供一个接口 .</p><p>这种思想 , 从本质上解决了问题 , 我们程序员不再去管理对象的创建了 , 更多的去关注业务的实现 . 耦合性大大降低 . 这也就是IOC的原型 !</p><h4 id="2-2-IOC本质"><a href="#2-2-IOC本质" class="headerlink" title="2.2 IOC本质"></a>2.2 IOC本质</h4><p><strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudy710f2555-730a-45a2-9062-b9612520e73c.png"><br><strong>IoC是Spring框架的核心内容</strong>，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IoC。</p><p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudy6a2be099-4dab-4211-8dcb-96a036618a1a.png"></p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p><h3 id="Spring的第一个项目"><a href="#Spring的第一个项目" class="headerlink" title="Spring的第一个项目"></a>Spring的第一个项目</h3><h4 id="3-1、导入Jar包"><a href="#3-1、导入Jar包" class="headerlink" title="3.1、导入Jar包"></a>3.1、导入Jar包</h4><p>注 : spring 需要导入commons-logging进行日志记录 . 我们利用maven , 他会自动下载对应的依赖项 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2、编写代码"><a href="#3-2、编写代码" class="headerlink" title="3.2、编写代码"></a>3.2、编写代码</h4><p>编写一个Hello实体类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Hello &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void show()&#123;</span><br><span class="line">        System.out.println(&quot;Hello,&quot;+ name );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写我们的spring文件 , 这里我们命名为beans.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">    &lt;!--bean就是java对象 , 由Spring创建和管理--&gt;</span><br><span class="line">    &lt;bean id=&quot;hello&quot; class=&quot;com.exia.pojo.Hello&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;Spring&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>我们可以去进行测试了 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    //解析beans.xml文件 , 生成管理相应的Bean对象</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    //getBean : 参数即为spring配置文件中bean的id .</span><br><span class="line">    Hello hello = (Hello) context.getBean(&quot;hello&quot;);</span><br><span class="line">    hello.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3、思考"><a href="#3-3、思考" class="headerlink" title="3.3、思考"></a>3.3、思考</h4><ul><li>Hello 对象是谁创建的 ? 【 hello 对象是由Spring创建的 】</li><li>Hello 对象的属性是怎么设置的 ? 【hello 对象的属性是由Spring容器设置的 】</li></ul><p>这个过程就叫控制反转 :</p><ul><li><p>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的</p></li><li><p>反转 : 程序本身不创建对象 , 而变成被动的接收对象 .</p></li></ul><p>依赖注入 : 就是利用set方法来进行注入的.</p><p>==IOC是一种编程思想，由主动的编程变成被动的接收==</p><p>可以通过newClassPathXmlApplicationContext去浏览一下底层源码 .</p><h4 id="3-4、修改案例一"><a href="#3-4、修改案例一" class="headerlink" title="3.4、修改案例一"></a>3.4、修改案例一</h4><p>我们在案例一中， 新增一个Spring配置文件beans.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id=&quot;MysqlImpl&quot; class=&quot;com.exia.dao.impl.UserDaoMySqlImpl&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;OracleImpl&quot; class=&quot;com.exia.dao.impl.UserDaoOracleImpl&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;ServiceImpl&quot; class=&quot;com.exia.service.impl.UserServiceImpl&quot;&gt;</span><br><span class="line">        &lt;!--注意: 这里的name并不是属性 , 而是set方法后面的那部分 , 首字母小写--&gt;</span><br><span class="line">        &lt;!--引用另外一个bean , 不是用value 而是用 ref--&gt;</span><br><span class="line">        &lt;property name=&quot;userDao&quot; ref=&quot;OracleImpl&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>测试！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    UserServiceImpl serviceImpl = (UserServiceImpl) context.getBean(&quot;ServiceImpl&quot;);</span><br><span class="line">    serviceImpl.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK , 到了现在 , 我们彻底不用再程序中去改动了 , 要实现不同的操作 , 只需要在xml配置文件中进行修改 , 所谓的IoC,一句话搞定 : 对象由Spring 来创建 , 管理 , 装配 !</p><h3 id="IOC创建对象方式"><a href="#IOC创建对象方式" class="headerlink" title="IOC创建对象方式"></a>IOC创建对象方式</h3><h4 id="4-1-通过无参构造方法来创建"><a href="#4-1-通过无参构造方法来创建" class="headerlink" title="4.1.通过无参构造方法来创建"></a>4.1.通过无参构造方法来创建</h4><p>User.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public User() &#123;</span><br><span class="line">        System.out.println(&quot;user无参构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void show()&#123;</span><br><span class="line">        System.out.println(&quot;name=&quot;+ name );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id=&quot;user&quot; class=&quot;com.exia.pojo.User&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;kuangshen&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    //在执行getBean的时候, user已经创建好了 , 通过无参构造</span><br><span class="line">    User user = (User) context.getBean(&quot;user&quot;);</span><br><span class="line">    //调用对象的方法 .</span><br><span class="line">    user.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果可以发现，在调用show方法之前，User对象已经通过无参构造初始化了！</p><h4 id="4-2-通过有参构造方法来创建"><a href="#4-2-通过有参构造方法来创建" class="headerlink" title="4.2.通过有参构造方法来创建"></a>4.2.通过有参构造方法来创建</h4><p>UserT . java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    //在执行getBean的时候, user已经创建好了 , 通过无参构造</span><br><span class="line">    User user = (User) context.getBean(&quot;user&quot;);</span><br><span class="line">    //调用对象的方法 .</span><br><span class="line">    user.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml 有三种方式编写</p><!-- 第一种根据index参数下标设置 --><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userT&quot; class=&quot;com.exia.pojo.UserT&quot;&gt;</span><br><span class="line">    &lt;!-- index指构造方法 , 下标从0开始 --&gt;</span><br><span class="line">    &lt;constructor-arg index=&quot;0&quot; value=&quot;kuangshen2&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><bean id="userT" class="com.exia.pojo.UserT">    <!-- index指构造方法 , 下标从0开始 -->    <constructor-arg index="0" value="kuangshen2"/></bean><p>测试</p><!-- 第一种根据index参数下标设置 --><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第一种根据index参数下标设置 --&gt;</span><br><span class="line">&lt;bean id=&quot;userT&quot; class=&quot;com.exia.pojo.UserT&quot;&gt;</span><br><span class="line">    &lt;!-- index指构造方法 , 下标从0开始 --&gt;</span><br><span class="line">    &lt;constructor-arg index=&quot;0&quot; value=&quot;kuangshen2&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h3><h4 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1. 别名"></a>5.1. 别名</h4><p>alias 设置别名 , 为bean设置别名 , 可以设置多个别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--设置别名：在获取Bean的时候可以使用别名获取--&gt;</span><br><span class="line"></span><br><span class="line">&lt;alias name=&quot;userT&quot; alias=&quot;userNew&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-Bean的配置"><a href="#5-2-Bean的配置" class="headerlink" title="5.2. Bean的配置"></a>5.2. Bean的配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--bean就是java对象,由Spring创建和管理--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line"></span><br><span class="line">id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符`</span><br><span class="line"></span><br><span class="line">如果配置id,又配置了name,那么name是别名`</span><br><span class="line"></span><br><span class="line">name可以设置多个别名,可以用逗号,分号,空格隔开`</span><br><span class="line"></span><br><span class="line">如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;`</span><br><span class="line"></span><br><span class="line">class是bean的全限定名=包名+类名`</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;hello&quot; name=&quot;hello2 h2,h3;h4&quot; class=&quot;com.exia.pojo.Hello&quot;&gt;`</span><br><span class="line"></span><br><span class="line">&lt;property name=&quot;name&quot; value=&quot;Spring&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="5-3-import"><a href="#5-3-import" class="headerlink" title="5.3. import"></a>5.3. import</h4><p>团队的合作通过import来实现 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;import resource=&quot;&#123;path&#125;/beans.xml&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h3><ul><li><p>依赖注入（Dependency Injection,DI）。</p></li><li><p>依赖 : 指Bean对象的创建依赖于容器 . Bean对象的依赖资源 .</p></li><li><p>注入 : 指Bean对象所依赖的资源 , 由容器来设置和装配 .</p></li></ul><h4 id="6-1-构造器注入"><a href="#6-1-构造器注入" class="headerlink" title="6.1 构造器注入"></a>6.1 构造器注入</h4><p>我们在之前的案例4已经详细讲过了</p><h4 id="6-2-set注入-重点"><a href="#6-2-set注入-重点" class="headerlink" title="6.2 set注入 (重点)"></a>6.2 set注入 (重点)</h4><p>要求被注入的属性 , 必须有set方法 , set方法的方法名由set + 属性首字母大写 , 如果属性是boolean类型 , 没有set方法 , 是 is .</p><p>测试pojo类 :</p><p>Address.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Address &#123;</span><br><span class="line">    private String address;</span><br><span class="line">    public String getAddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.exia.pojo;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Address address;</span><br><span class="line">    private String[] books;</span><br><span class="line">    private List&lt;String&gt; hobbys;</span><br><span class="line">    private Map&lt;String,String&gt; card;</span><br><span class="line">    private Set&lt;String&gt; games;</span><br><span class="line">    private String wife;</span><br><span class="line">    private Properties info;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAddress(Address address) &#123;</span><br><span class="line">        this.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setBooks(String[] books) &#123;</span><br><span class="line">        this.books = books;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setHobbys(List&lt;String&gt; hobbys) &#123;</span><br><span class="line">        this.hobbys = hobbys;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setCard(Map&lt;String, String&gt; card) &#123;</span><br><span class="line">        this.card = card;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setGames(Set&lt;String&gt; games) &#123;</span><br><span class="line">        this.games = games;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setWife(String wife) &#123;</span><br><span class="line">        this.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setInfo(Properties info) &#123;</span><br><span class="line">        this.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">    public void show()&#123;</span><br><span class="line">        System.out.println(&quot;name=&quot;+ name</span><br><span class="line">                + &quot;,address=&quot;+ address.getAddress()</span><br><span class="line">                + &quot;,books=&quot;</span><br><span class="line">        );</span><br><span class="line">        for (String book:books)&#123;</span><br><span class="line">            System.out.print(&quot;&lt;&lt;&quot;+book+&quot;&gt;&gt;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;\n爱好:&quot;+hobbys);</span><br><span class="line">        System.out.println(&quot;card:&quot;+card);</span><br><span class="line">        System.out.println(&quot;games:&quot;+games);</span><br><span class="line">        System.out.println(&quot;wife:&quot;+wife);</span><br><span class="line">        System.out.println(&quot;info:&quot;+info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、<strong>常量注入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.exia.pojo.Student&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;小明&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test01()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">    Student student = (Student) context.getBean(&quot;student&quot;);</span><br><span class="line">    System.out.println(student.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、<strong>Bean注入</strong></p><p>==注意点：这里的值是一个引用，ref==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;addr&quot; class=&quot;com.exia.pojo.Address&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;address&quot; value=&quot;重庆&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.kexiapojo.Student&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;小明&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;address&quot; ref=&quot;addr&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>3、<strong>数组注入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.exia.pojo.Student&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;小明&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;address&quot; ref=&quot;addr&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;books&quot;&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">            &lt;value&gt;西游记&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;红楼梦&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;水浒传&lt;/value&gt;</span><br><span class="line">        &lt;/array&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>4、<strong>List注入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;hobbys&quot;&gt;</span><br><span class="line">    &lt;list&gt;</span><br><span class="line">        &lt;value&gt;听歌&lt;/value&gt;</span><br><span class="line">        &lt;value&gt;看电影&lt;/value&gt;</span><br><span class="line">        &lt;value&gt;爬山&lt;/value&gt;</span><br><span class="line">    &lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>5、<strong>Map注入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;card&quot;&gt;</span><br><span class="line">    &lt;map&gt;</span><br><span class="line">        &lt;entry key=&quot;中国邮政&quot; value=&quot;456456456465456&quot;/&gt;</span><br><span class="line">        &lt;entry key=&quot;建设&quot; value=&quot;1456682255511&quot;/&gt;</span><br><span class="line">    &lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>6、<strong>set注入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;games&quot;&gt;</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        &lt;value&gt;LOL&lt;/value&gt;</span><br><span class="line">        &lt;value&gt;BOB&lt;/value&gt;</span><br><span class="line">        &lt;value&gt;COC&lt;/value&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>7、<strong>Null注入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;wife&quot;&gt;&lt;null/&gt;&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>8、<strong>Properties注入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;info&quot;&gt;</span><br><span class="line">    &lt;props&gt;</span><br><span class="line">        &lt;prop key=&quot;学号&quot;&gt;20190604&lt;/prop&gt;</span><br><span class="line">        &lt;prop key=&quot;性别&quot;&gt;男&lt;/prop&gt;</span><br><span class="line">        &lt;prop key=&quot;姓名&quot;&gt;小明&lt;/prop&gt;</span><br><span class="line">    &lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudye3381dfa-e3fd-418b-be63-4bc979a78972.png"></p><h4 id="6-3-拓展注入实现"><a href="#6-3-拓展注入实现" class="headerlink" title="6.3 拓展注入实现"></a>6.3 拓展注入实现</h4><p>User.java ： 【注意：这里没有有参构造器！】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、P命名空间注入 : 需要在头文件中假如约束文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">导入约束 : xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">&lt;!--P(属性: properties)命名空间 , 属性依然要设置set方法--&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.exia.pojo.User&quot; p:name=&quot;狂神&quot; p:age=&quot;18&quot;/&gt;</span><br></pre></td></tr></table></figure><p>2、c 命名空间注入 : 需要在头文件中假如约束文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">导入约束 : xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="line">&lt;!--C(构造: Constructor)命名空间 , 属性依然要设置set方法--&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.exia.pojo.User&quot; c:name=&quot;狂神&quot; c:age=&quot;18&quot;/&gt;</span><br></pre></td></tr></table></figure><p>发现问题：爆红了，刚才我们没有写有参构造！</p><p>解决：把有参构造器加上，这里也能知道，c 就是所谓的构造器注入！</p><p>测试代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test02()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">    User user = (User) context.getBean(&quot;user&quot;);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-Bean的作用域"><a href="#6-4-Bean的作用域" class="headerlink" title="6.4 Bean的作用域"></a>6.4 Bean的作用域</h4><p>在Spring中，那些组成应用程序的主体及由Spring IoC容器所管理的对象，被称之为bean。简单地讲，bean就是由IoC容器初始化、装配及管理的对象 .</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudy53672082-1ba7-400f-b67d-b100a03524a9.png"></p><p>几种作用域中，request、session作用域仅在基于web的应用中使用（不必关心你所采用的是什么web应用框架），只能用在基于web的Spring ApplicationContext环境。</p><h4 id="6-4-1-Singleton"><a href="#6-4-1-Singleton" class="headerlink" title="6.4.1 Singleton"></a>6.4.1 Singleton</h4><p>当一个bean的作用域为Singleton，那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。Singleton是单例类型，就是在创建起容器时就同时自动创建了一个bean的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，Singleton作用域是Spring中的缺省作用域。要在XML中将bean定义成singleton，可以这样配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;ServiceImpl&quot; class=&quot;cn.csdn.service.ServiceImpl&quot; scope=&quot;singleton&quot;&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test03()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">    User user = (User) context.getBean(&quot;user&quot;);</span><br><span class="line">    User user2 = (User) context.getBean(&quot;user&quot;);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-2-Prototype"><a href="#6-4-2-Prototype" class="headerlink" title="6.4.2 Prototype"></a>6.4.2 Prototype</h4><p>当一个bean的作用域为Prototype，表示一个bean定义对应多个对象实例。Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。在XML中将bean定义成prototype，可以这样配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;account&quot; class=&quot;com.foo.DefaultAccount&quot; scope=&quot;prototype&quot;/&gt;  </span><br><span class="line"> 或者</span><br><span class="line">&lt;bean id=&quot;account&quot; class=&quot;com.foo.DefaultAccount&quot; singleton=&quot;false&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="6-4-3-Request"><a href="#6-4-3-Request" class="headerlink" title="6.4.3 Request"></a>6.4.3 Request</h4><p>当一个bean的作用域为Request，表示在一次HTTP请求中，一个bean定义对应一个实例；即每个HTTP请求都会有各自的bean实例，它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;loginAction&quot; class=cn.csdn.LoginAction&quot; scope=&quot;request&quot;/&gt;</span><br></pre></td></tr></table></figure><p>针对每次HTTP请求，Spring容器会根据loginAction bean的定义创建一个全新的LoginAction bean实例，且该loginAction bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状态，而其他请求中根据loginAction bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。当处理请求结束，request作用域的bean实例将被销毁。</p><h4 id="6-4-4-Session"><a href="#6-4-4-Session" class="headerlink" title="6.4.4 Session"></a>6.4.4 Session</h4><p>当一个bean的作用域为Session，表示在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userPreferences&quot; class=&quot;com.foo.UserPreferences&quot; scope=&quot;session&quot;/&gt;</span><br></pre></td></tr></table></figure><p>针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences bean实例，且该userPreferences bean仅在当前HTTP Session内有效。与request作用域一样，可以根据需要放心的更改所创建实例的内部状态，而别的HTTP Session中根据userPreferences创建的实例，将不会看到这些特定于某个HTTP Session的状态变化。当HTTP Session最终被废弃的时候，在该HTTP Session作用域内的bean也会被废弃掉。</p><h3 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h3><ul><li>自动装配是使用spring满足bean依赖的一种方法</li><li>spring会在应用上下文中为某个bean寻找其依赖的bean。</li></ul><p>Spring中bean有三种装配机制，分别是：</p><ol><li>在xml中显式配置；</li><li>在java中显式配置；</li><li>隐式的bean发现机制和自动装配。</li></ol><p>这里我们主要讲第三种：自动化的装配bean。</p><p>Spring的自动装配需要从两个角度来实现，或者说是两个操作：</p><ol><li>组件扫描(component scanning)：spring会自动发现应用上下文中所创建的bean；</li><li>自动装配(autowiring)：spring自动满足bean之间的依赖，也就是我们说的IoC/DI；</li></ol><p>组件扫描和自动装配组合发挥巨大威力，使的显示的配置降低到最少。</p><p><strong>推荐不使用自动装配xml配置 , 而使用注解 .</strong></p><h4 id="7-1、测试环境搭建"><a href="#7-1、测试环境搭建" class="headerlink" title="7.1、测试环境搭建"></a>7.1、测试环境搭建</h4><ol><li><p>新建一个项目</p></li><li><p>新建两个实体类，Cat Dog 都有一个叫的方法</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Cat &#123;</span><br><span class="line">    public void shout() &#123;</span><br><span class="line">        System.out.println(&quot;miao~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Dog &#123;</span><br><span class="line">    public void shout() &#123;</span><br><span class="line">        System.out.println(&quot;wang~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个用户类 User</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private Cat cat;</span><br><span class="line">    private Dog dog;</span><br><span class="line">    private String str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Spring配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id=&quot;dog&quot; class=&quot;com.exia.pojo.Dog&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;cat&quot; class=&quot;com.kexiapojo.Cat&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;user&quot; class=&quot;com.kuexiaojo.User&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;cat&quot; ref=&quot;cat&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;dog&quot; ref=&quot;dog&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;str&quot; value=&quot;qinjiang&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MyTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void testMethodAutowire() &#123;</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        User user = (User) context.getBean(&quot;user&quot;);</span><br><span class="line">        user.getCat().shout();</span><br><span class="line">        user.getDog().shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>结果正常输出，环境OK</li></ol><h4 id="7-2、byName"><a href="#7-2、byName" class="headerlink" title="7.2、byName"></a>7.2、<strong>byName</strong></h4><p><strong>autowire byName (按名称自动装配)</strong></p><p>由于在手动配置xml过程中，常常发生字母缺漏和大小写等错误，而无法对其进行检查，使得开发效率降低。</p><p>采用自动装配将避免这些错误，并且使配置简单化。</p><p>测试：</p><p>修改bean配置，增加一个属性 autowire=”byName”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.exia.pojo.User&quot; autowire=&quot;byName&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;str&quot; value=&quot;qinjiang&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ol><li><p>再次测试，结果依旧成功输出！</p></li><li><p>我们将 cat 的bean id修改为 catXXX</p></li><li><p>再次测试， 执行时报空指针java.lang.NullPointerException。因为按byName规则找不对应set方法，真正的setCat就没执行，对象就没有初始化，所以调用时就会报空指针错误。</p></li></ol><p><strong>小结：</strong></p><p>当一个bean节点带有 autowire byName的属性时。</p><ol><li>将查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。</li><li>去spring容器中寻找是否有此字符串名称id的对象。</li><li>如果有，就取出注入；如果没有，就报空指针异常。</li></ol><h4 id="7-3、byType"><a href="#7-3、byType" class="headerlink" title="7.3、byType"></a>7.3、<strong>byType</strong></h4><p><strong>autowire byType (按类型自动装配)</strong></p><p>使用autowire byType首先需要保证：同一类型的对象，在spring容器中唯一。如果不唯一，会报不唯一的异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NoUniqueBeanDefinitionException</span><br></pre></td></tr></table></figure><p>测试：</p><ol><li><p>将user的bean配置修改一下 ： <code>autowire=&quot;byType&quot;</code></p></li><li><p>测试，正常输出</p></li><li><p>在注册一个cat 的bean对象！</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dog&quot; class=&quot;com.exia.pojo.Dog&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat&quot; class=&quot;com.kexiapojo.Cat&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat2&quot; class=&quot;com.kuexiaojo.Cat&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.kuaexiajo.User&quot; autowire=&quot;byType&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;str&quot; value=&quot;qinjiang&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ol><li><p>测试，报错：NoUniqueBeanDefinitionException</p></li><li><p>删掉cat2，将cat的bean名称改掉！测试！因为是按类型装配，所以并不会报异常，也不影响最后的结果。甚至将id属性去掉，也不影响结果。</p></li></ol><p>这就是按照类型自动装配！</p><h4 id="7-4-使用注解"><a href="#7-4-使用注解" class="headerlink" title="7.4 使用注解"></a>7.4 使用注解</h4><p>jdk1.5开始支持注解，spring2.5开始全面支持注解。</p><p>准备工作： 利用注解的方式注入属性。</p><p>在spring配置文件中引入context文件头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd</span><br></pre></td></tr></table></figure><p>开启属性注解支持！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:annotation-config/&gt;</span><br></pre></td></tr></table></figure><h5 id="7-4-1、-Autowired"><a href="#7-4-1、-Autowired" class="headerlink" title="7.4.1、@Autowired"></a>7.4.1、<a href="https://github.com/Autowired" title="@Autowired">@Autowired</a></h5><ul><li><a href="https://github.com/Autowired" title="@Autowired">@Autowired</a>是按类型自动转配的，不支持id匹配。</li><li>需要导入 spring-aop的包！</li></ul><p>测试：</p><p>将User类中的set方法去掉，使用@Autowired注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Cat cat;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Dog dog;</span><br><span class="line">    private String str;</span><br><span class="line">    public Cat getCat() &#123;</span><br><span class="line">        return cat;</span><br><span class="line">    &#125;</span><br><span class="line">    public Dog getDog() &#123;</span><br><span class="line">        return dog;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getStr() &#123;</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时配置文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:annotation-config/&gt;</span><br><span class="line">&lt;bean id=&quot;dog&quot; class=&quot;com.exia.pojo.Dog&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat&quot; class=&quot;com.kexiapojo.Cat&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.kuexiaojo.User&quot;/&gt;</span><br></pre></td></tr></table></figure><p>测试，成功输出结果！</p><p><a href="https://github.com/Autowired" title="@Autowired">@Autowired</a>(required=false) 说明： false，对象可以为null；true，对象必须存对象，不能为null。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//如果允许对象为null，设置required = false,默认为true</span><br><span class="line">@Autowired(required = false)</span><br><span class="line">private Cat cat;</span><br></pre></td></tr></table></figure><h5 id="7-4-2、-Qualifier"><a href="#7-4-2、-Qualifier" class="headerlink" title="7.4.2、@Qualifier"></a>7.4.2、<a href="https://github.com/Qualifier" title="@Qualifier">@Qualifier</a></h5><ul><li><p><a href="https://github.com/Autowired" title="@Autowired"></a><a href="https://github.com/Autowired" title="@Autowired">@Autowired</a>是根据类型自动装配的，加上<a href="https://github.com/Qualifier" title="@Qualifier"></a><a href="https://github.com/Qualifier" title="@Qualifier">@Qualifier</a>则可以根据byName的方式自动装配</p></li><li><p><a href="https://github.com/Qualifier" title="@Qualifier"></a><a href="https://github.com/Qualifier" title="@Qualifier">@Qualifier</a>不能单独使用。</p></li></ul><p>测试实验步骤：</p><p>配置文件修改内容，保证类型存在对象。且名字不为类的默认名字！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dog1&quot; class=&quot;com.exia.pojo.Dog&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;dog2&quot; class=&quot;com.kexiapojo.Dog&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat1&quot; class=&quot;com.kuexiaojo.Cat&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat2&quot; class=&quot;com.kuaexiajo.Cat&quot;/&gt;</span><br></pre></td></tr></table></figure><p>没有加Qualifier测试，直接报错</p><p>在属性上添加Qualifier注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">@Qualifier(value = &quot;cat2&quot;)</span><br><span class="line">private Cat cat;</span><br><span class="line">@Autowired</span><br><span class="line">@Qualifier(value = &quot;dog2&quot;)</span><br><span class="line">private Dog dog;</span><br></pre></td></tr></table></figure><ol><li>测试，成功输出！</li></ol><h5 id="7-4-3、-Resource"><a href="#7-4-3、-Resource" class="headerlink" title="7.4.3、@Resource"></a>7.4.3、<a href="https://github.com/Resource" title="@Resource">@Resource</a></h5><ul><li><a href="https://github.com/Resource" title="@Resource">@Resource</a>如有指定的name属性，先按该属性进行byName方式查找装配；</li><li>其次再进行默认的byName方式进行装配；</li><li>如果以上都不成功，则按byType的方式自动装配。</li><li>都不成功，则报异常。</li></ul><p>实体类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    //如果允许对象为null，设置required = false,默认为true</span><br><span class="line">    @Resource(name = &quot;cat2&quot;)</span><br><span class="line">    private Cat cat;</span><br><span class="line">    @Resource</span><br><span class="line">    private Dog dog;</span><br><span class="line">    private String str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dog&quot; class=&quot;com.exia.pojo.Dog&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat1&quot; class=&quot;com.kexiapojo.Cat&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat2&quot; class=&quot;com.kuexiaojo.Cat&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.kuaexiajo.User&quot;/&gt;</span><br></pre></td></tr></table></figure><p>测试：结果OK</p><p>配置文件2：beans.xml ， 删掉cat2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dog&quot; class=&quot;com.exia.pojo.Dog&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat1&quot; class=&quot;com.kexiapojo.Cat&quot;/&gt;</span><br></pre></td></tr></table></figure><p>实体类上只保留注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">private Cat cat;</span><br><span class="line">@Resource</span><br><span class="line">private Dog dog;</span><br></pre></td></tr></table></figure><p>结果：OK</p><p>结论：先进行byName查找，失败；再进行byType查找，成功。</p><h4 id="7-5、小结"><a href="#7-5、小结" class="headerlink" title="7.5、小结"></a>7.5、小结</h4><p><a href="https://github.com/Autowired" title="@Autowired">@Autowired</a>与<a href="https://github.com/Resource" title="@Resource">@Resource</a>异同：</p><ol><li><a href="https://github.com/Autowired" title="@Autowired">@Autowired</a>与<a href="https://github.com/Resource" title="@Resource">@Resource</a>都可以用来装配bean。都可以写在字段上，或写在setter方法上。</li><li><a href="https://github.com/Autowired" title="@Autowired">@Autowired</a>默认按类型装配（属于spring规范），默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的required属性为false，如：<a href="https://github.com/Autowired" title="@Autowired">@Autowired</a>(required=false) ，如果我们想使用名称装配可以结合<a href="https://github.com/Qualifier" title="@Qualifier">@Qualifier</a>注解进行使用</li><li><a href="https://github.com/Resource" title="@Resource">@Resource</a>（属于J2EE复返），默认按照名称进行装配，名称可以通过name属性进行指定。如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认取属性名进行装配。 当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</li></ol><p>它们的作用相同都是用注解方式注入对象，但执行顺序不同。<a href="https://github.com/Autowired" title="@Autowired">@Autowired</a>先byType，<a href="https://github.com/Resource" title="@Resource">@Resource</a>先byName。</p><h3 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h3><h4 id="8-1、说明"><a href="#8-1、说明" class="headerlink" title="8.1、说明"></a>8.1、说明</h4><p>在spring4之后，想要使用注解形式，必须得要引入aop的包</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudybd032087-8b44-49a2-acf3-18ae7430d47c.png"></p><p>在配置文件当中，还得要引入一个context约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="8-2、Bean的实现"><a href="#8-2、Bean的实现" class="headerlink" title="8.2、Bean的实现"></a>8.2、Bean的实现</h4><p>我们之前都是使用 bean 的标签进行bean注入，但是实际开发中，我们一般都会使用注解！</p><ol><li>配置扫描哪些包下的注解</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--指定注解扫描包--&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.exia.pojo&quot;/&gt;</span><br></pre></td></tr></table></figure><p>在指定包下编写类，增加注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;user&quot;)</span><br><span class="line">// 相当于配置文件中 &lt;bean id=&quot;user&quot; class=&quot;当前注解的类&quot;/&gt;</span><br><span class="line">public class User &#123;</span><br><span class="line">    public String name = &quot;秦疆&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    ApplicationContext applicationContext =</span><br><span class="line">        new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    User user = (User) applicationContext.getBean(&quot;user&quot;);</span><br><span class="line">    System.out.println(user.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3、属性注入"><a href="#8-3、属性注入" class="headerlink" title="8.3、属性注入"></a>8.3、属性注入</h4><p>使用注解注入属性</p><p>可以不用提供set方法，直接在直接名上添加<a href="https://github.com/value" title="@value"></a><a href="https://github.com/value" title="@value">@value</a>(“值”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;user&quot;)</span><br><span class="line">// 相当于配置文件中 &lt;bean id=&quot;user&quot; class=&quot;当前注解的类&quot;/&gt;</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Value(&quot;秦疆&quot;)</span><br><span class="line">    // 相当于配置文件中 &lt;property name=&quot;name&quot; value=&quot;秦疆&quot;/&gt;</span><br><span class="line">    public String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果提供了set方法，在set方法上添加<a href="https://github.com/value" title="@value"></a><a href="https://github.com/value" title="@value">@value</a>(“值”);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;user&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    @Value(&quot;秦疆&quot;)</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-4、衍生注解"><a href="#8-4、衍生注解" class="headerlink" title="8.4、衍生注解"></a>8.4、衍生注解</h4><p>我们这些注解，就是替代了在配置文件当中配置步骤而已！更加的方便快捷！</p><p><strong><a href="https://github.com/Component" title="@Component">@Component</a>三个衍生注解</strong></p><p>为了更好的进行分层，Spring可以使用其它三个注解，功能一样，目前使用哪一个功能都一样。</p><ul><li><a href="https://github.com/Controller" title="@Controller">@Controller</a>：web层</li><li><a href="https://github.com/Service" title="@Service">@Service</a>：service层</li><li><a href="https://github.com/Repository" title="@Repository">@Repository</a>：dao层</li></ul><p>写上这些注解，就相当于将这个类交给Spring管理装配了！</p><h4 id="8-5、自动装配注解"><a href="#8-5、自动装配注解" class="headerlink" title="8.5、自动装配注解"></a>8.5、自动装配注解</h4><p>在Bean的自动装配已经讲过了，可以回顾！</p><h4 id="8-6、作用域"><a href="#8-6、作用域" class="headerlink" title="8.6、作用域"></a>8.6、作用域</h4><p><a href="https://github.com/scope" title="@scope">@scope</a></p><ul><li>singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。</li><li>prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Controller(&quot;user&quot;)</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Value(&quot;秦疆&quot;)</span><br><span class="line">    public String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-7、小结"><a href="#8-7、小结" class="headerlink" title="8.7、小结"></a>8.7、小结</h4><p><strong>XML与注解比较</strong></p><ul><li><p>XML可以适用任何场景 ，结构清晰，维护方便</p></li><li><p>注解不是自己提供的类使用不了，开发简单方便</p></li></ul><p><strong>xml与注解整合开发</strong> ：推荐最佳实践</p><ul><li>xml管理Bean</li><li>注解完成属性注入</li><li>使用过程中， 可以不用扫描，扫描是为了类上的注解</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:annotation-config/&gt;</span><br></pre></td></tr></table></figure><p>作用：</p><ul><li><p>进行注解驱动注册，从而使注解生效</p></li><li><p>用于激活那些已经在spring容器里注册过的bean上面的注解，也就是显示的向Spring注册</p></li><li><p>如果不扫描包，就需要手动配置bean</p></li><li><p>如果不加注解驱动，则注入的值为null！</p></li></ul><h4 id="8-8、基于Java类进行配置"><a href="#8-8、基于Java类进行配置" class="headerlink" title="8.8、基于Java类进行配置"></a>8.8、基于Java类进行配置</h4><p>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版本， JavaConfig 已正式成为 Spring4 的核心功能 。</p><p>测试：</p><ol><li>编写一个实体类，Dog</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component  //将这个类标注为Spring的一个组件，放到容器中！</span><br><span class="line">public class Dog &#123;</span><br><span class="line">    public String name = &quot;dog&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个config配置包，编写一个MyConfig配置类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration  //代表这是一个配置类</span><br><span class="line">public class MyConfig &#123;</span><br><span class="line">    @Bean //通过方法注册一个bean，这里的返回值就Bean的类型，方法名就是bean的id！</span><br><span class="line">    public Dog dog()&#123;</span><br><span class="line">        return new Dog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    ApplicationContext applicationContext =</span><br><span class="line">            new AnnotationConfigApplicationContext(MyConfig.class);</span><br><span class="line">    Dog dog = (Dog) applicationContext.getBean(&quot;dog&quot;);</span><br><span class="line">    System.out.println(dog.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功输出结果！</p><p><strong>导入其他配置如何做呢？</strong></p><p>我们再编写一个配置类！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Configuration  //代表这是一个配置类</span><br><span class="line">public class MyConfig2 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //真实对象</span><br><span class="line">        UserServiceImpl userService = new UserServiceImpl();</span><br><span class="line">        //代理对象的调用处理程序</span><br><span class="line">        ProxyInvocationHandler pih = new ProxyInvocationHandler();</span><br><span class="line">        pih.setTarget(userService); //设置要代理的对象</span><br><span class="line">        UserService proxy = (UserService)pih.getProxy(); //动态生成代理类！</span><br><span class="line">        proxy.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【测试，增删改查，查看结果】</p><h4 id="9-6、动态代理的好处"><a href="#9-6、动态代理的好处" class="headerlink" title="9.6、动态代理的好处"></a>9.6、动态代理的好处</h4><p>静态代理有的它都有，静态代理没有的，它也有！</p><ul><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</li><li>公共的业务由代理来完成 . 实现了业务的分工 ,</li><li>公共业务发生扩展时变得更加集中和方便 .</li><li>一个动态代理 , 一般代理某一类业务</li><li>一个动态代理可以代理多个类，代理的是接口！</li></ul><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="10-1-什么是AOP"><a href="#10-1-什么是AOP" class="headerlink" title="10.1 什么是AOP"></a>10.1 什么是AOP</h4><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudyfffec70f-ce10-4ca2-a71b-dbc535b0e07c.png"></p><h4 id="10-2-Aop在Spring中的作用"><a href="#10-2-Aop在Spring中的作用" class="headerlink" title="10.2 Aop在Spring中的作用"></a>10.2 Aop在Spring中的作用</h4><p>==提供声明式事务；允许用户自定义切面==</p><ul><li><p>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</p></li><li><p>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。</p></li><li><p>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</p></li><li><p>目标（Target）：被通知对象。</p></li><li><p>代理（Proxy）：向目标对象应用通知之后创建的对象。</p></li><li><p>切入点（PointCut）：切面通知 执行的 “地点”的定义。</p></li><li><p>连接点（JointPoint）：与切入点匹配的执行点。</p></li></ul><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudy7a512991-1651-44b4-afca-d09e12cbbe6f.png"></p><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudyf12770a8-cd09-453f-a995-fe6b22c42a0c.png"></p><p>即 Aop 在 不改变原有代码的情况下 , 去增加新的功能 .</p><h4 id="10-3-使用Spring实现Aop"><a href="#10-3-使用Spring实现Aop" class="headerlink" title="10.3 使用Spring实现Aop"></a>10.3 使用Spring实现Aop</h4><p>【重点】使用AOP织入，需要导入一个依赖包！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.9.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h5><p><strong>通过 Spring API 实现</strong></p><p>首先编写我们的业务接口和实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line">    public void add();</span><br><span class="line">    public void delete();</span><br><span class="line">    public void update();</span><br><span class="line">    public void search();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class UserServiceImpl implements UserService&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void add() &#123;</span><br><span class="line">        System.out.println(&quot;增加用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        System.out.println(&quot;删除用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;更新用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void search() &#123;</span><br><span class="line">        System.out.println(&quot;查询用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后去写我们的增强类 , 我们编写两个 , 一个前置增强 一个后置增强</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Log implements MethodBeforeAdvice &#123;</span><br><span class="line">    //method : 要执行的目标对象的方法</span><br><span class="line">    //objects : 被调用的方法的参数</span><br><span class="line">    //Object : 目标对象</span><br><span class="line">    @Override</span><br><span class="line">    public void before(Method method, Object[] objects, Object o) throws Throwable &#123;</span><br><span class="line">        System.out.println( o.getClass().getName() + &quot;的&quot; + method.getName() + &quot;方法被执行了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class AfterLog implements AfterReturningAdvice &#123;</span><br><span class="line">    //returnValue 返回值</span><br><span class="line">    //method被调用的方法</span><br><span class="line">    //args 被调用的方法的对象的参数</span><br><span class="line">    //target 被调用的目标对象</span><br><span class="line">    @Override</span><br><span class="line">    public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;执行了&quot; + target.getClass().getName()</span><br><span class="line">        +&quot;的&quot;+method.getName()+&quot;方法,&quot;</span><br><span class="line">        +&quot;返回值：&quot;+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后去spring的文件中注册 , 并实现aop切入实现 , 注意导入约束 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br><span class="line">    &lt;!--注册bean--&gt;</span><br><span class="line">    &lt;bean id=&quot;userService&quot; class=&quot;com.exia.service.UserServiceImpl&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;log&quot; class=&quot;com.kexialog.Log&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;afterLog&quot; class=&quot;com.kuexiaog.AfterLog&quot;/&gt;</span><br><span class="line">    &lt;!--aop的配置--&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!--切入点  expression:表达式匹配要执行的方法--&gt;</span><br><span class="line">        &lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(* com.kuaexiarvice.UserServiceImpl.*(..))&quot;/&gt;</span><br><span class="line">        &lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref=&quot;log&quot; pointcut-ref=&quot;pointcut&quot;/&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref=&quot;afterLog&quot; pointcut-ref=&quot;pointcut&quot;/&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        UserService userService = (UserService) context.getBean(&quot;userService&quot;);</span><br><span class="line">        userService.search();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Aop的重要性 : 很重要 . 一定要理解其中的思路 , 主要是思想的理解这一块 .</p><p>Spring的Aop就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 , 当执行领域业务时 , 将会把公共业务加进来 . 实现公共业务的重复利用 . 领域业务更纯粹 , 程序猿专注领域业务 , 其本质还是动态代理 .</p><h5 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h5><p><strong>自定义类来实现Aop</strong></p><p>目标业务类不变依旧是userServiceImpl</p><p>第一步 : 写我们自己的一个切入类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class DiyPointcut &#123;</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;---------方法执行前---------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;---------方法执行后---------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去spring中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--第二种方式自定义实现--&gt;</span><br><span class="line">&lt;!--注册bean--&gt;</span><br><span class="line">&lt;bean id=&quot;diy&quot; class=&quot;com.exia.config.DiyPointcut&quot;/&gt;</span><br><span class="line">&lt;!--aop的配置--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--第二种方式：使用AOP的标签实现--&gt;</span><br><span class="line">    &lt;aop:aspect ref=&quot;diy&quot;&gt;</span><br><span class="line">        &lt;aop:pointcut id=&quot;diyPonitcut&quot; expression=&quot;execution(* com.kexiaservice.UserServiceImpl.*(..))&quot;/&gt;</span><br><span class="line">        &lt;aop:before pointcut-ref=&quot;diyPonitcut&quot; method=&quot;before&quot;/&gt;</span><br><span class="line">        &lt;aop:after pointcut-ref=&quot;diyPonitcut&quot; method=&quot;after&quot;/&gt;</span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        UserService userService = (UserService) context.getBean(&quot;userService&quot;);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h5><p><strong>使用注解实现</strong></p><p>第一步：编写一个注解实现的增强类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.exia.config;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.After;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Before;</span><br><span class="line">@Aspect</span><br><span class="line">public class AnnotationPointcut &#123;</span><br><span class="line">    @Before(&quot;execution(* com.kexiaservice.UserServiceImpl.*(..))&quot;)</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;---------方法执行前---------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @After(&quot;execution(* com.kuexiaervice.UserServiceImpl.*(..))&quot;)</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;---------方法执行后---------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Around(&quot;execution(* com.kuaexiarvice.UserServiceImpl.*(..))&quot;)</span><br><span class="line">    public void around(ProceedingJoinPoint jp) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;环绕前&quot;);</span><br><span class="line">        System.out.println(&quot;签名:&quot;+jp.getSignature());</span><br><span class="line">        //执行目标方法proceed</span><br><span class="line">        Object proceed = jp.proceed();</span><br><span class="line">        System.out.println(&quot;环绕后&quot;);</span><br><span class="line">        System.out.println(proceed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：在Spring配置文件中，注册bean，并增加支持注解的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--第三种方式:注解实现--&gt;</span><br><span class="line">&lt;bean id=&quot;annotationPointcut&quot; class=&quot;com.exia.config.AnnotationPointcut&quot;/&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy/&gt;</span><br></pre></td></tr></table></figure><p>aop:aspectj-autoproxy：说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过aop命名空间的&lt;aop:aspectj-autoproxy /&gt;声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被&lt;aop:aspectj-autoproxy /&gt;隐藏起来了 </span><br><span class="line">&lt;aop:aspectj-autoproxy /&gt;有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为&lt;aop:aspectj-autoproxy  poxy-target-class=&quot;true&quot;/&gt;时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。</span><br></pre></td></tr></table></figure><h3 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h3><p>步骤：</p><ol><li><p>导入相关jar包</p><p>junit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;unit</span><br></pre></td></tr></table></figure></li></ol><p>mybatis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>mysql-connector-java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>spring相关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>aspectJ AOP 织入器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.9.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>mybatis-spring整合包 【重点】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>配置Maven静态资源过滤问题！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">            &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><ol><li><p>编写配置文件</p></li><li><p>代码实现</p></li></ol><h4 id="回忆MyBatis"><a href="#回忆MyBatis" class="headerlink" title="回忆MyBatis"></a>回忆MyBatis</h4><p><strong>编写pojo实体类</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package com.exia.pojo;</span><br><span class="line">public class User &#123;</span><br><span class="line">    private int id;  //id</span><br><span class="line">    private String name;   //姓名</span><br><span class="line">    private String pwd;   //密码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现mybatis的配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;package name=&quot;com.exia.pojo&quot;/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;package name=&quot;com.kexiadao&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><strong>UserDao接口编写</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line">    public List&lt;User&gt; selectUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口对应的Mapper映射文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.exia.dao.UserMapper&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;selectUser&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">      select * from user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectUser() throws IOException &#123;</span><br><span class="line">    String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line">    for (User user: userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MyBatis-Spring学习"><a href="#MyBatis-Spring学习" class="headerlink" title="MyBatis-Spring学习"></a>MyBatis-Spring学习</h4><p>引入Spring之前需要了解mybatis-spring包中的一些重要类；</p><p><a href="http://www.mybatis.org/spring/zh/index.html">http://www.mybatis.org/spring/zh/index.html</a></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudy220e7d13-633d-4cb3-a198-9761dc778218.png"></p><p><strong>什么是 MyBatis-Spring？</strong></p><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。</p><p><strong>知识基础</strong></p><p>在开始使用 MyBatis-Spring 之前，你需要先熟悉 Spring 和 MyBatis 这两个框架和有关它们的术语。这很重要</p><p>MyBatis-Spring 需要以下版本：</p><table><thead><tr><th>MyBatis-Spring</th><th>MyBatis</th><th>Spring 框架</th><th>Spring Batch</th><th>Java</th></tr></thead><tbody><tr><td>2.0</td><td>3.5+</td><td>5.0+</td><td>4.0+</td><td>Java 8+</td></tr><tr><td>1.3</td><td>3.4+</td><td>3.2.2+</td><td>2.1+</td><td>Java 6+</td></tr></tbody></table><p>如果使用 Maven 作为构建工具，仅需要在 pom.xml 中加入以下代码即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 <code>SqlSessionFactory</code> 和至少一个数据映射器类。</p><p>在 MyBatis-Spring 中，可使用 <code>SqlSessionFactoryBean</code>来创建 <code>SqlSessionFactory</code>。 要配置这个工厂 bean，只需要把下面代码放在 Spring 的 XML 配置文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>注意：<code>SqlSessionFactory</code> 需要一个 <code>DataSource</code>（数据源）。 这可以是任意的 <code>DataSource</code>，只需要和配置其它 Spring 数据库连接一样配置它就可以了。</p><p>在基础的 MyBatis 用法中，是通过 <code>SqlSessionFactoryBuilder</code> 来创建 <code>SqlSessionFactory</code> 的。 而在 MyBatis-Spring 中，则使用 <code>SqlSessionFactoryBean</code> 来创建。</p><p>在 MyBatis 中，你可以使用 <code>SqlSessionFactory</code> 来创建 <code>SqlSession</code>。一旦你获得一个 session 之后，你可以使用它来执行映射了的语句，提交或回滚连接，最后，当不再需要它的时候，你可以关闭 session。</p><p><code>SqlSessionFactory</code> 有一个唯一的必要属性：用于 JDBC 的 <code>DataSource</code>。这可以是任意的 <code>DataSource</code> 对象，它的配置方法和其它 Spring 数据库连接是一样的。</p><p>一个常用的属性是 <code>configLocation</code>，它用来指定 MyBatis 的 XML 配置文件路径。它在需要修改 MyBatis 的基础配置非常有用。通常，基础配置指的是 <code>&lt;settings&gt;</code> 或 <code>&lt;typeAliases&gt;</code> 元素。</p><p>需要注意的是，这个配置文件<strong>并不需要</strong>是一个完整的 MyBatis 配置。确切地说，任何环境配置（<code>&lt;environments&gt;</code>），数据源（<code>&lt;DataSource&gt;</code>）和 MyBatis 的事务管理器（<code>&lt;transactionManager&gt;</code>）都会被<strong>忽略</strong>。<code>SqlSessionFactoryBean</code> 会创建它自有的 MyBatis 环境配置（<code>Environment</code>），并按要求设置自定义环境的值。</p><p><code>SqlSessionTemplate</code> 是 MyBatis-Spring 的核心。作为 <code>SqlSession</code> 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 <code>SqlSession</code>。</p><p>模板可以参与到 Spring 的事务管理中，并且由于其是线程安全的，可以供多个映射器类使用，你应该<strong>总是</strong>用 <code>SqlSessionTemplate</code> 来替换 MyBatis 默认的 <code>DefaultSqlSession</code> 实现。在同一应用程序中的不同类之间混杂使用可能会引起数据一致性的问题。</p><p>可以使用 <code>SqlSessionFactory</code> 作为构造方法的参数来创建 <code>SqlSessionTemplate</code> 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>现在，这个 bean 就可以直接注入到你的 DAO bean 中了。你需要在你的 bean 中添加一个 SqlSession 属性，就像下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">  private SqlSession sqlSession;</span><br><span class="line">  public void setSqlSession(SqlSession sqlSession) &#123;</span><br><span class="line">    this.sqlSession = sqlSession;</span><br><span class="line">  &#125;</span><br><span class="line">  public User getUser(String userId) &#123;</span><br><span class="line">    return sqlSession.getMapper...;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合实现一"><a href="#整合实现一" class="headerlink" title="整合实现一"></a>整合实现一</h3><p>引入Spring配置文件beans.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br></pre></td></tr></table></figure><p>配置数据源替换mybaits的数据源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置数据源：数据源有非常多，可以使用第三方的，也可使使用Spring的--&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>配置SqlSessionFactory，关联MyBatis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置SqlSessionFactory--&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">    &lt;!--关联Mybatis--&gt;</span><br><span class="line">    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/exia/dao/*.xml&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>注册sqlSessionTemplate，关联sqlSessionFactory；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl implements UserMapper &#123;</span><br><span class="line">    //sqlSession不用我们自己创建了，Spring来管理</span><br><span class="line">    private SqlSessionTemplate sqlSession;</span><br><span class="line">    public void setSqlSession(SqlSessionTemplate sqlSession) &#123;</span><br><span class="line">        this.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">    public List&lt;User&gt; selectUser() &#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        return mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;ean&gt;</span><br></pre></td></tr></table></figure><p>注册bean实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userDao&quot; class=&quot;com.exia.dao.UserDaoImpl&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;sqlSession&quot; ref=&quot;sqlSession&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    UserMapper mapper = (UserMapper) context.getBean(&quot;userDao&quot;);</span><br><span class="line">    List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果成功输出！现在我们的Mybatis配置文件的状态！发现都可以被Spring整合！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;package name=&quot;com.exia.pojo&quot;/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="整合实现二"><a href="#整合实现二" class="headerlink" title="整合实现二"></a>整合实现二</h3><p>mybatis-spring1.2.3版以上的才有这个 .</p><p>官方文档截图 :</p><p>dao继承Support类 , 直接利用 getSqlSession() 获得 , 然后直接注入SqlSessionFactory . 比起方式1 , 不需要管理SqlSessionTemplate , 而且对事务的支持更加友好 . 可跟踪源码查看</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudyb25452cf-79e0-4c0c-a93e-680f2df26509.png"></p><p>测试：</p><p>将我们上面写的UserDaoImpl修改一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl extends SqlSessionDaoSupport implements UserMapper &#123;</span><br><span class="line">    public List&lt;User&gt; selectUser() &#123;</span><br><span class="line">        UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        return mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改bean的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userDao&quot; class=&quot;com.exia.dao.UserDaoImpl&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>測試</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    UserMapper mapper = (UserMapper) context.getBean(&quot;userDao&quot;);</span><br><span class="line">    List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结 : 整合到spring中以后可以完全不要mybatis的配置文件，除了这些方式可以实现整合之外，我们还可以使用注解来实现，这个等我们后面学习SpringBoot的时候还会测试整合！</p><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><h3 id="12-1、回顾事务"><a href="#12-1、回顾事务" class="headerlink" title="12.1、回顾事务"></a>12.1、回顾事务</h3><ul><li>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！</li><li>事务管理是企业级应用程序开发中必备技术，用来确保数据的完整性和一致性。</li></ul><p>==事务就是把一系列的动作当成一个独立的工作单元，这些动作要么全部完成，要么全部不起作用。==</p><p><strong>事务四个属性ACID</strong></p><ol><li><p>原子性（atomicity）</p><ul><li>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用</li></ul></li><li><p>一致性（consistency）</p><ul><li>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中</li></ul></li><li><p>隔离性（isolation）</p><ul><li>可能多个事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏</li></ul></li><li><p>持久性（durability）</p><ul><li>事务一旦完成，无论系统发生什么错误，结果都不会受到影响。通常情况下，事务的结果被写到持久化存储器中</li></ul></li></ol><h3 id="12-2、测试"><a href="#12-2、测试" class="headerlink" title="12.2、测试"></a>12.2、测试</h3><p>将上面的代码拷贝到一个新项目中</p><p>在之前的案例中，我们给userDao接口新增两个方法，删除和增加用户；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//添加一个用户</span><br><span class="line">int addUser(User user);</span><br><span class="line">//根据id删除用户</span><br><span class="line">int deleteUser(int id);</span><br></pre></td></tr></table></figure><p>mapper文件，我们故意把 deletes 写错，测试！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;insert id=&quot;addUser&quot; parameterType=&quot;com.kuang.pojo.User&quot;&gt;</span><br><span class="line"> insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"> &lt;/insert&gt;</span><br><span class="line"> &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line"> deletes from user where id = #&#123;id&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><p>编写接口的实现类，在实现类中，我们去操作一波</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl extends SqlSessionDaoSupport implements UserMapper &#123;</span><br><span class="line">    //增加一些操作</span><br><span class="line">    public List&lt;User&gt; selectUser() &#123;</span><br><span class="line">        User user = new User(4,&quot;小明&quot;,&quot;123456&quot;);</span><br><span class="line">        UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        mapper.addUser(user);</span><br><span class="line">        mapper.deleteUser(4);</span><br><span class="line">        return mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">    //新增</span><br><span class="line">    public int addUser(User user) &#123;</span><br><span class="line">        UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        return mapper.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">    //删除</span><br><span class="line">    public int deleteUser(int id) &#123;</span><br><span class="line">        UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        return mapper.deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>測試</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    UserMapper mapper = (UserMapper) context.getBean(&quot;userDao&quot;);</span><br><span class="line">    List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错：sql异常，delete写错了</p><p>结果 ：插入成功！</p><p>没有进行事务的管理；我们想让他们都成功才成功，有一个失败，就都失败，我们就应该需要<strong>事务！</strong></p><p>以前我们都需要自己手动管理事务，十分麻烦！</p><p>但是Spring给我们提供了事务管理，我们只需要配置即可；</p><h3 id="12-3、Spring中的事务管理"><a href="#12-3、Spring中的事务管理" class="headerlink" title="12.3、Spring中的事务管理"></a>12.3、Spring中的事务管理</h3><p>Spring在不同的事务管理API之上定义了一个抽象层，使得开发人员不必了解底层的事务管理API就可以使用Spring的事务管理机制。Spring支持编程式事务管理和声明式的事务管理。</p><p><strong>编程式事务管理</strong></p><ul><li>将事务管理代码嵌到业务方法中来控制事务的提交和回滚</li><li>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码</li></ul><p><strong>声明式事务管理</strong></p><ul><li>一般情况下比编程式事务好用。</li><li>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</li><li>将事务管理作为横切关注点，通过aop方法模块化。Spring中通过Spring AOP框架支持声明式事务管理。</li></ul><p><strong>使用Spring管理事务，注意头文件的约束导入 : tx</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>事务管理器</strong></p><ul><li><p>无论使用Spring的哪种事务管理策略（编程式或者声明式）事务管理器都是必须的。</p></li><li><p>就是 Spring的核心事务管理抽象，管理封装了一组独立于技术的方法。</p></li></ul><p><strong>JDBC事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><strong>配置好事务管理器后我们需要去配置事务的通知</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置事务通知--&gt;</span><br><span class="line">&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--&gt;</span><br><span class="line">        &lt;tx:method name=&quot;add&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;delete&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;update&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;search*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;get&quot; read-only=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">    &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure><p><strong>spring事务传播特性：</strong></p><p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：</p><ul><li>propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li><li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li><li>propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。</li><li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li>propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作</li></ul><p>Spring 默认的事务传播行为是 PROPAGATION_REQUIRED，它适合于绝大多数的情况。</p><p>假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p><p>就好比，我们刚才的几个方法存在调用，所以会被放在一组事务当中！</p><p><strong>配置AOP</strong></p><p>导入aop的头文件！</p><p><strong>进行测试</strong></p><p>删掉刚才插入的数据，再次测试！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    UserMapper mapper = (UserMapper) context.getBean(&quot;userDao&quot;);</span><br><span class="line">    List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么需要配置事务？</p><ul><li><p>如果不配置，就需要我们手动提交控制事务；</p></li><li><p>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！</p></li></ul><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><p>环境说明：</p><ul><li>jdk 8 +</li><li>MySQL 5.7.19</li><li>maven-3.6.0</li><li>IDEA</li></ul><p>学习前需要掌握：</p><ul><li>JDBC</li><li>MySQL</li><li>Java 基础</li><li>Maven</li><li>Junit</li></ul><h3 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h3><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/01/kuangstudyb0b1cef3-3796-4822-bfe8-52a894961853.png"></p><h4 id="1-1、什么是MyBatis"><a href="#1-1、什么是MyBatis" class="headerlink" title="1.1、什么是MyBatis"></a>1.1、什么是MyBatis</h4><ul><li>MyBatis 是一款优秀的<strong>持久层框架</strong></li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li><li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li><li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li><li>2013年11月迁移到<strong>Github</strong> .</li><li>Mybatis官方文档 : <a href="http://www.mybatis.org/mybatis-3/zh/index.html">http://www.mybatis.org/mybatis-3/zh/index.html</a></li><li>GitHub : <a href="https://github.com/mybatis/mybatis-3">GitHub - mybatis/mybatis-3: MyBatis SQL mapper framework for Java</a></li></ul><h4 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h4><ul><li><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong><ul><li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li><li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li><li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li></ul></li><li><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong><ul><li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li><li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li></ul></li></ul><h4 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h4><ul><li>什么是持久层？<ul><li>完成持久化工作的代码块 . ——&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li><li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li><li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li><li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li></ul></li></ul><h4 id="1-4、为什么需要Mybatis"><a href="#1-4、为什么需要Mybatis" class="headerlink" title="1.4、为什么需要Mybatis"></a>1.4、为什么需要Mybatis</h4><ul><li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p></li><li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等… , 通过框架可以减少重复代码,提高开发效率 .</p></li><li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) —&gt;对象关系映射</strong></p></li><li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p></li><li><p>MyBatis的优点</p><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供xml标签，支持编写动态sql。</li><li>…….</li></ul></li></ul><h3 id="MyBatis第一个程序"><a href="#MyBatis第一个程序" class="headerlink" title="MyBatis第一个程序"></a>MyBatis第一个程序</h3><p><strong>思路流程：搭建环境—&gt;导入Mybatis—-&gt;编写代码—-&gt;测试</strong></p><h3 id="2-1、代码演示"><a href="#2-1、代码演示" class="headerlink" title="2.1、代码演示"></a>2.1、代码演示</h3><p>搭建实验数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `mybatis`;</span><br><span class="line">USE `mybatis`;</span><br><span class="line">DROP TABLE IF EXISTS `user`;</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(20) NOT NULL,</span><br><span class="line">  `name` varchar(30) DEFAULT NULL,</span><br><span class="line">  `pwd` varchar(30) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">insert  into `user`(`id`,`name`,`pwd`) values (1,&#x27;狂神&#x27;,&#x27;123456&#x27;),(2,&#x27;张三&#x27;,&#x27;abcdef&#x27;),(3,&#x27;李四&#x27;,&#x27;987654&#x27;);</span><br></pre></td></tr></table></figure><p>导入MyBatis相关 jar 包</p><ul><li>GitHub上找</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>编写MyBatis核心配置文件</p><ul><li>查看帮助文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;com/kuang/dao/userMapper.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>编写MyBatis工具类</p><ul><li>查看帮助文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">public class MybatisUtils &#123;</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取SqlSession连接</span><br><span class="line">    public static SqlSession getSession()&#123;</span><br><span class="line">        return sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实体类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private int id;  //id</span><br><span class="line">    private String name;   //姓名</span><br><span class="line">    private String pwd;   //密码</span><br><span class="line">    //构造,有参,无参</span><br><span class="line">    //set/get</span><br><span class="line">    //toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Mapper接口类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import com.kuang.pojo.User;</span><br><span class="line">import java.util.List;</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    List&lt;User&gt; selectUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Mapper.xml配置文件</p><ul><li>namespace 十分重要，不能写错！</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.kuang.dao.UserMapper&quot;&gt;</span><br><span class="line">  &lt;select id=&quot;selectUser&quot; resultType=&quot;com.kuang.pojo.User&quot;&gt;</span><br><span class="line">    select * from user</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>编写测试类</p><ul><li>Junit 包测试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class MyTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void selectUser() &#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        //方法一:</span><br><span class="line">        //List&lt;User&gt; users = session.selectList(&quot;com.kuang.mapper.UserMapper.selectUser&quot;);</span><br><span class="line">        //方法二:</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">        for (User user: users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>运行测试</li></ol><h3 id="2-2、问题说明"><a href="#2-2、问题说明" class="headerlink" title="2.2、问题说明"></a>2.2、问题说明</h3><p><strong>可能出现问题说明：Maven静态资源过滤问题</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">        &lt;includes&gt;</span><br><span class="line">            &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">            &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">        &lt;/includes&gt;</span><br><span class="line">        &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">    &lt;/resource&gt;</span><br><span class="line">    &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">        &lt;includes&gt;</span><br><span class="line">            &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">            &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">        &lt;/includes&gt;</span><br><span class="line">        &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">    &lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2025年java学习笔记——集合部分</title>
      <link href="posts/70b7.html"/>
      <url>posts/70b7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>集合又叫容器</p><p><code>Collection</code>接口，主要用于存放单一元素：<code>List</code>、<code>Set</code> 、 <code>Queue</code></p><p><code>Map</code> 接口，主要用于存放键值对</p><p><img src="../photo/java-collection-hierarchy.png"></p><ul><li><code>List</code>(对付顺序的好帮手): 存储的元素是<strong>有序</strong>的、可<strong>重复</strong>的。</li><li><code>Set</code>(注重独一无二的性质): 存储的元素<strong>不可重复</strong>的。</li><li><code>Queue</code>(实现排队功能的叫号机): 按特定的<strong>排队规则</strong>来确定先后顺序，存储的元素是<strong>有序的、可重复</strong>的。</li><li><code>Map</code>(用 key 来搜索的专家): 使用<strong>键值对</strong>（key-value）存储，类似于数学上的函数 y=f(x)，”x” 代表 key，”y” 代表 value，<strong>key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值</strong>。</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>ArrayList</p><p>Vector</p><p>LinkedList JDK6之前是循环列表，现在是双向链表</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p><code>HashSet</code>(无序，唯一): 基于 <code>HashMap</code> 实现的，底层采用 <code>HashMap</code> 来保存元素。</p><p><code>LinkedHashSet</code>: <code>LinkedHashSet</code> 是 <code>HashSet</code> 的子类，并且其内部是通过 <code>LinkedHashMap</code> 来实现的。</p><p><code>TreeSet</code>(有序，唯一): 红黑树(自平衡的排序二叉树)。</p><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p><code>PriorityQueue</code>: <code>Object[]</code> 数组来实现小顶堆</p><p><code>DelayQueue</code>:<code>PriorityQueue</code></p><p><code>ArrayDeque</code>: 可扩容动态双向数组</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><code>HashMap</code>：JDK1.8 之前 <code>HashMap</code> 由<strong>数组+链表</strong>组成的，数组是 <code>HashMap</code> 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度<strong>大于阈值（默认为 8）</strong>（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行<strong>数组扩容</strong>，而不是转换为红黑树）时，将链表转化为<strong>红黑树</strong>，以减少搜索时间。</p><p><code>LinkedHashMap</code>：<code>LinkedHashMap</code> 继承自 <code>HashMap</code>，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，<code>LinkedHashMap</code> 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。</p><p><code>Hashtable</code>：数组+链表组成的，数组是<code>Hashtable</code> 的主体，链表则是主要为了解决哈希冲突而存在的。</p><p><code>TreeMap</code>：红黑树（自平衡的排序二叉树）。</p><blockquote><p>键值对——Map 需要排序：TreeMap 不需要排序：HashMap 保证线程安全就选用 <code>ConcurrentHashMap</code></p><p>只需要存放元素值时，就选择实现<code>Collection</code> 接口的集合，需要保证元素唯一时选择实现 <code>Set</code> 接口的集合比如 <code>TreeSet</code> 或 <code>HashSet</code>，不需要就选择实现 <code>List</code> 接口的比如 <code>ArrayList</code> 或 <code>LinkedList</code></p><p>集合大小可变、支持泛型、具有内建算法，灵活性高，适合现代软件开发多样化数据</p></blockquote><h3 id="List-1"><a href="#List-1" class="headerlink" title="List"></a>List</h3><h4 id="ArrayList-和-Array（数组）的区别？"><a href="#ArrayList-和-Array（数组）的区别？" class="headerlink" title="ArrayList 和 Array（数组）的区别？"></a>ArrayList 和 Array（数组）的区别？</h4><p><code>ArrayList</code> 内部基于<strong>动态数组实现</strong>，比 <code>Array</code>（静态数组） 使用起来更加灵活</p><ul><li><p><code>ArrayList</code>会根据实际存储的元素<strong>动态地扩容或缩容</strong>，而 <code>Array</code> 被创建之后就不能改变它的长度了。</p></li><li><p><code>ArrayList</code> 允许你使用<strong>泛型来确保类型安全</strong>，<code>Array</code> 则不可以。</p></li><li><p><code>ArrayList</code> 中<strong>只能存储对象</strong>。对于基本类型数据，需要使用其对应的包装类（如 Integer、Double 等）。<code>Array</code> <strong>可以直接存储基本类型数据，也可以存储对象。</strong></p></li><li><p><code>ArrayList</code> 支持插入、删除、遍历等常见操作，并且提供了丰富的 API 操作方法，比如 <code>add()</code>、<code>remove()</code>等。<code>Array</code> 只是一个固定长度的数组，只能按照下标访问其中的元素，不具备动态添加、删除元素的能力。</p></li><li><p><code>ArrayList</code>创建时不需要指定大小，而<code>Array</code>创建时必须指定大小。</p></li></ul><h4 id="ArrayList-和-Vector-的区别-（了解即可）"><a href="#ArrayList-和-Vector-的区别-（了解即可）" class="headerlink" title="ArrayList 和 Vector 的区别?（了解即可）"></a>ArrayList 和 Vector 的区别?（了解即可）</h4><ul><li><p><code>ArrayList</code> 是 <code>List</code> 的主要实现类，底层使用 <code>Object[]</code>存储，适用于频繁的查找工作，线程不安全 。</p></li><li><p><code>Vector</code> 是 <code>List</code> 的古老实现类，底层使用<code>Object[]</code> 存储，线程安全。</p></li></ul><h4 id="Vector-和-Stack-的区别-（了解即可）"><a href="#Vector-和-Stack-的区别-（了解即可）" class="headerlink" title="Vector 和 Stack 的区别?（了解即可）"></a>Vector 和 Stack 的区别?（了解即可）</h4><ul><li><code>Vector</code> 和 <code>Stack</code> 两者都是线程安全的，都是使用 <code>synchronized</code> 关键字进行同步处理。</li><li><code>Stack</code> 继承自 <code>Vector</code>，是一个后进先出的栈，而 <code>Vector</code> 是一个列表。</li><li><code>Vector</code> 和 <code>Stack</code> 已经被淘汰，推荐使用并发集合类（例如 <code>ConcurrentHashMap</code>、<code>CopyOnWriteArrayList</code> 等）或者手动实现线程安全的方法来提供安全的多线程操作支持。</li></ul><h4 id="ArrayList-可以添加-null-值吗？"><a href="#ArrayList-可以添加-null-值吗？" class="headerlink" title="ArrayList 可以添加 null 值吗？"></a>ArrayList 可以添加 null 值吗？</h4><p><code>ArrayList</code> 中可以存储任何类型的对象，包括 <code>null</code> 值。不过，不建议向<code>ArrayList</code> 中添加 <code>null</code> 值， <code>null</code> 值无意义，会让代码难以维护比如忘记做判空处理就会导致空指针异常。</p><h4 id="ArrayList-插入和删除元素的时间复杂度？"><a href="#ArrayList-插入和删除元素的时间复杂度？" class="headerlink" title="ArrayList 插入和删除元素的时间复杂度？"></a>ArrayList 插入和删除元素的时间复杂度？</h4><p>插入/删除：</p><ul><li><p>头：O(n)</p></li><li><p>尾：O(1)</p></li><li><p>指定位置：O(n)</p></li></ul><h4 id="LinkedList-插入和删除元素的时间复杂度？"><a href="#LinkedList-插入和删除元素的时间复杂度？" class="headerlink" title="LinkedList 插入和删除元素的时间复杂度？"></a>LinkedList 插入和删除元素的时间复杂度？</h4><ul><li><p>头：O(1)</p></li><li><p>尾：O(1)</p></li><li><p>指定位置：O(n)</p></li></ul><h4 id="LinkedList-为什么不能实现-RandomAccess-接口？"><a href="#LinkedList-为什么不能实现-RandomAccess-接口？" class="headerlink" title="LinkedList 为什么不能实现 RandomAccess 接口？"></a>LinkedList 为什么不能实现 RandomAccess 接口？</h4><p><code>RandomAccess</code> 是一个标记接口，用来表明实现该接口的类<strong>支持随机访问</strong>（即可以通过索引快速访问元素）。由于 <code>LinkedList</code> 底层数据结构是<strong>链表</strong>，内存地址不连续，只能通过指针来定位，不支持随机快速访问，所以不能实现 <code>RandomAccess</code> 接口。</p><h4 id="ArrayList-与-LinkedList-区别"><a href="#ArrayList-与-LinkedList-区别" class="headerlink" title="ArrayList 与 LinkedList 区别?"></a>ArrayList 与 LinkedList 区别?</h4><ul><li><p><strong>是否保证线程安全：</strong><code>ArrayList</code> 和 <code>LinkedList</code> 都是不同步的，也就是不保证线程安全；</p></li><li><p><strong>底层数据结构：</strong> <code>ArrayList</code> 底层使用的是 <strong><code>Object</code> 数组</strong>；<code>LinkedList</code> 底层使用的是 <strong>双向链表</strong> 数据结构（JDK1.6 之前为循环链表，JDK1.7 取消了循环。）</p></li><li><p><strong>插入和删除是否受元素位置的影响：</strong></p><p>ArrayList</p></li></ul><p>头：O(n)</p><p>尾：O(1)</p><p>指定位置：O(n)</p><p>LinkedList:</p><p>头：O(1)</p><p>尾：O(1)</p><p>指定位置：O(n)</p><ul><li><p><strong>是否支持快速随机访问：</strong> <code>LinkedList</code> 不支持高效的随机元素访问，而 <code>ArrayList</code>（实现了 <code>RandomAccess</code> 接口） 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于<code>get(int index)</code>方法)。</p></li><li><p><strong>内存空间占用：</strong> <code>ArrayList</code> 的空间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 LinkedList 的空间花费则体现在它的每一个元素都需要消耗比 ArrayList 更多的空间（因为要存放直接后继和直接前驱以及数据）。</p></li></ul><h4 id="说说集合中的-fail-fast-和-fail-safe-是什么"><a href="#说说集合中的-fail-fast-和-fail-safe-是什么" class="headerlink" title="说说集合中的 fail-fast 和 fail-safe 是什么"></a>说说集合中的 fail-fast 和 fail-safe 是什么</h4><p>快速失败的思想即针对可能发生的异常进行提前表明故障并停止运行，通过尽早的发现和停止错误，降低故障系统级联的风险。</p><p>在<code>java.util</code>包下的大部分集合是不支持线程安全的，为了能够提前发现并发操作导致线程安全风险，提出通过维护一个<code>modCount</code>记录修改的次数，迭代期间通过比对预期修改次数<code>expectedModCount</code>和<code>modCount</code>是否一致来判断是否存在并发操作，从而实现快速失败，由此保证在避免在异常时执行非必要的复杂代码。</p><p><img src="../photo/fail-fast-and-fail-safe-insert-100-values.png"></p><p><code>for</code>循环底层迭代器获取下一个元素时的<code>next</code>方法，可以看到其内部的<code>checkForComodification</code>具有针对修改次数比对的逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> public E next() &#123;</span><br><span class="line">             //检查是否存在并发修改</span><br><span class="line">            checkForComodification();</span><br><span class="line">            //......</span><br><span class="line">            //返回下一个元素</span><br><span class="line">            return (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">final void checkForComodification() &#123;</span><br><span class="line">        //当前循环遍历次数和预期修改次数不一致时，就会抛出ConcurrentModificationException</span><br><span class="line">            if (modCount != expectedModCount)</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>   <code>fail-safe</code>也就是安全失败的含义，它旨在即使面对意外情况也能恢复并继续运行，这使得它特别适用于不确定或者不稳定的环境</p><p>这个思想常运用于并发容器，最经典的实现就是<code>CopyOnWriteArrayList</code>的实现，通过写时复制的思想保证在进行修改操作时复制出一份快照，基于这份快照完成添加或者删除操作后，将<code>CopyOnWriteArrayList</code>底层的数组引用指向这个新的数组空间，由此避免迭代时被并发修改所干扰所导致并发操作安全问题，当然这种做法也存缺点即进行遍历操作时无法获得实时结果：</p><p><img src="../photo/fail-fast-and-fail-safe-copyonwritearraylist.png"></p><p><code>CopyOnWriteArrayList</code>实现<code>fail-safe</code>的核心代码，可以看到它的实现就是通过<code>getArray</code>获取数组引用然后通过<code>Arrays.copyOf</code>得到一个数组的快照，基于这个快照完成添加操作后，修改底层<code>array</code>变量指向的引用地址由此完成写时复制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">        final ReentrantLock lock = this.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取原有数组</span><br><span class="line">            Object[] elements = getArray();</span><br><span class="line">            int len = elements.length;</span><br><span class="line">            //基于原有数组复制出一份内存快照</span><br><span class="line">            Object[] newElements = Arrays.copyOf(elements, len + 1);</span><br><span class="line">            //进行添加操作</span><br><span class="line">            newElements[len] = e;</span><br><span class="line">            //array指向新的数组</span><br><span class="line">            setArray(newElements);</span><br><span class="line">            return true;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Set-1"><a href="#Set-1" class="headerlink" title="Set"></a>Set</h3><p><code>Comparable</code> 接口和 <code>Comparator</code> 接口都是 Java 中用于排序的接口，它们在实现类对象之间比较大小、排序等方面发挥了重要作用：</p><ul><li><code>Comparable</code> 接口实际上是出自<code>java.lang</code>包 它有一个 <code>compareTo(Object obj)</code>方法用来排序</li><li><code>Comparator</code>接口实际上是出自 <code>java.util</code> 包它有一个<code>compare(Object obj1, Object obj2)</code>方法用来排序</li></ul><p>一般我们需要对一个集合使用自定义排序时，我们就要重写<code>compareTo()</code>方法或<code>compare()</code>方法，当我们需要对某一个集合实现两种排序方式，比如一个 <code>song</code> 对象中的歌名和歌手名分别采用一种排序方法的话，我们可以重写<code>compareTo()</code>方法和使用自制的<code>Comparator</code>方法或者以两个 <code>Comparator</code> 来实现歌名排序和歌星名排序，第二种代表我们只能使用两个参数版的 <code>Collections.sort()</code>.</p><h4 id="无序性和不可重复性的含义是什么"><a href="#无序性和不可重复性的含义是什么" class="headerlink" title="无序性和不可重复性的含义是什么"></a>无序性和不可重复性的含义是什么</h4><ul><li>无序性不等于随机性 ，无序性是指存储的数据在底层数组中并非按照数组索引的顺序添加 ，而是根据<strong>数据的哈希值</strong>决定的。</li><li>不可重复性是指添加的元素按照 <code>equals()</code> 判断时 ，返回 false，需要同时重写 <code>equals()</code> 方法和 <code>hashCode()</code> 方法。</li></ul><h4 id="比较-HashSet、LinkedHashSet-和-TreeSet-三者的异同"><a href="#比较-HashSet、LinkedHashSet-和-TreeSet-三者的异同" class="headerlink" title="比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同"></a>比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同</h4><ul><li><strong>都是元素唯一，线程不安全的</strong>：<code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code> 都是 <code>Set</code> 接口的实现类，都能保证<strong>元素唯一</strong>，并且<strong>都不是线程安全的。</strong></li><li><strong>底层数据结构不同：</strong><code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code> 的主要区别在于底层数据结构不同。<code>HashSet</code> 的底层数据结构是<strong>哈希表</strong>（基于 <code>HashMap</code> 实现）。<code>LinkedHashSet</code> 的底层数据结构是<strong>链表和哈希表</strong>，元素的插入和取出顺序满足 FIFO。<code>TreeSet</code> 底层数据结构是<strong>红黑树</strong>，元素是<strong>有序的</strong>，排序的方式有<strong>自然排序和定制排序</strong>。</li><li><strong>应用场景不同</strong>：底层数据结构不同又导致这三者的应用场景不同。<code>HashSet</code> 用于<strong>不需要保证</strong>元素插入和取出<strong>顺序</strong>的场景，<code>LinkedHashSet</code> 用于<strong>保证元素的插入和取出顺序</strong>满足 FIFO 的场景，<code>TreeSet</code> 用于支持对元素<strong>自定义排序规则</strong>的场景。</li></ul><h2 id="Queue-1"><a href="#Queue-1" class="headerlink" title="Queue"></a>Queue</h2><p><code>Queue</code> 是<strong>单端队列</strong>，只能从一端插入元素，另一端删除元素，实现上一般遵循 <strong>先进先出（FIFO）</strong> 规则。</p><p><code>Queue</code> 扩展了 <code>Collection</code> 的接口，根据 <strong>因为容量问题而导致操作失败后处理方式的不同</strong> 可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。</p><table><thead><tr><th><code>Queue</code> 接口</th><th>抛出异常</th><th>返回特殊值</th></tr></thead><tbody><tr><td>插入队尾</td><td>add(E e)</td><td>offer(E e)</td></tr><tr><td>删除队首</td><td>remove()</td><td>poll()</td></tr><tr><td>查询队首元素</td><td>element()</td><td>peek()</td></tr></tbody></table><p><code>Deque</code> 扩展了 <code>Queue</code> 的接口, 增加了在队首和队尾进行插入和删除的方法，同样根据失败后处理方式的不同分为两类：</p><table><thead><tr><th><code>Deque</code> 接口</th><th>抛出异常</th><th>返回特殊值</th></tr></thead><tbody><tr><td>插入队首</td><td>addFirst(E e)</td><td>offerFirst(E e)</td></tr><tr><td>插入队尾</td><td>addLast(E e)</td><td>offerLast(E e)</td></tr><tr><td>删除队首</td><td>removeFirst()</td><td>pollFirst()</td></tr><tr><td>删除队尾</td><td>removeLast()</td><td>pollLast()</td></tr><tr><td>查询队首元素</td><td>getFirst()</td><td>peekFirst()</td></tr><tr><td>查询队尾元素</td><td>getLast()</td><td>peekLast()</td></tr></tbody></table><p><code>Deque</code> 还提供有 <code>push()</code> 和 <code>pop()</code> 等其他方法，可用于模拟栈。</p><h4 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h4><p><code>PriorityQueue</code> 是在 JDK1.5 中被引入的, 其与 <code>Queue</code> 的区别在于元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。</p><p>这里列举其相关的一些要点：</p><ul><li><code>PriorityQueue</code> 利用了二叉堆的数据结构来实现的，底层使用可变长的数组来存储数据</li><li><code>PriorityQueue</code> 通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶元素。</li><li><code>PriorityQueue</code> 是非线程安全的，且不支持存储 <code>NULL</code> 和 <code>non-comparable</code> 的对象。</li><li><code>PriorityQueue</code> 默认是小顶堆，但可以接收一个 <code>Comparator</code> 作为构造参数，从而来自定义元素优先级的先后。</li></ul><h4 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h4><p><code>BlockingQueue</code> （<em>阻塞队列）是一个接口，继承自 <code>Queue</code>。<code>BlockingQueue</code>阻塞的原因是其支持当队列没有元素时一直阻塞，直到有元素；还支持如果队列已满，一直等到队列可以放入新元素时再放入。</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface BlockingQueue&lt;E&gt; extends Queue&lt;E&gt; &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BlockingQueue</code> 常用于生产者-消费者模型中，生产者线程会向队列中添加数据，而消费者线程会从队列中取出数据进行处理。</p><p><img src="../photo/blocking-queue.png" alt="BlockingQueue"></p><h4 id="BlockingQueue-的实现类有哪些？"><a href="#BlockingQueue-的实现类有哪些？" class="headerlink" title="BlockingQueue 的实现类有哪些？"></a>BlockingQueue 的实现类有哪些？</h4><ul><li><p><code>ArrayBlockingQueue</code>：使用数组实现的有界阻塞队列。在创建时需要<strong>指定容量大小</strong>，并支持<strong>公平和非公平两种方式的锁访问机制</strong>。</p></li><li><p><code>LinkedBlockingQueue</code>：使用单向链表实现的可选有界阻塞队列。在创建时可以<strong>指定容量大小，如果不指定则默认为<code>Integer.MAX_VALUE</code>**。和<code>ArrayBlockingQueue</code>不同的是， 它仅支持</strong>非公平**的锁访问机制。</p></li><li><p><code>PriorityBlockingQueue</code>：支持<strong>优先级排序</strong>的无界阻塞队列。元素必须实现<code>**Comparable</code>接口或者在构造函数中传入<code>Comparator</code>对象<strong>，并且</strong>不能插入 null 元素**。</p></li><li><p><code>SynchronousQueue</code>：同步队列，是一种<strong>不存储元素的阻塞队列</strong>。每个插入操作<strong>都必须等待对应的删除操作</strong>，反之删除操作也必须等待插入操作。因此，<code>SynchronousQueue</code>通常用于<strong>线程之间的直接传递数据</strong>。</p></li><li><p><code>DelayQueue</code>：延迟队列，其中的元素只有到了其指定的延迟时间，才能够从队列中出队。</p></li><li><p>……</p></li></ul><h4 id="ArrayBlockingQueue-和-LinkedBlockingQueue-有什么区别？"><a href="#ArrayBlockingQueue-和-LinkedBlockingQueue-有什么区别？" class="headerlink" title="ArrayBlockingQueue 和 LinkedBlockingQueue 有什么区别？"></a>ArrayBlockingQueue 和 LinkedBlockingQueue 有什么区别？</h4><p><code>ArrayBlockingQueue</code> 和 <code>LinkedBlockingQueue</code> 是 Java 并发包中常用的两种阻塞队列实现，它们都是线程安全的。不过，不过它们之间也存在下面这些区别：</p><ul><li>底层实现：<code>ArrayBlockingQueue</code> 基于数组实现，而 <code>LinkedBlockingQueue</code> 基于链表实现。</li><li>是否有界：<code>ArrayBlockingQueue</code> 是有界队列，必须在创建时指定容量大小。<code>LinkedBlockingQueue</code> 创建时可以不指定容量大小，默认是<code>Integer.MAX_VALUE</code>，也就是无界的。但也可以指定队列大小，从而成为有界的。</li><li>锁是否分离： <code>ArrayBlockingQueue</code>中的锁是没有分离的，即生产和消费用的是同一个锁；<code>LinkedBlockingQueue</code>中的锁是分离的，即生产用的是<code>putLock</code>，消费是<code>takeLock</code>，这样可以防止生产者和消费者线程之间的锁争夺。</li><li>内存占用：<code>ArrayBlockingQueue</code> 需要提前分配数组内存，而 <code>LinkedBlockingQueue</code> 则是动态分配链表节点内存。这意味着，<code>ArrayBlockingQueue</code> 在创建时就会占用一定的内存空间，且往往申请的内存比实际所用的内存更大，而<code>LinkedBlockingQueue</code> 则是根据元素的增加而逐渐占用内存空间。</li></ul><h2 id="Map-1"><a href="#Map-1" class="headerlink" title="Map"></a>Map</h2><h3 id="HashMap-和-Hashtable-的区别"><a href="#HashMap-和-Hashtable-的区别" class="headerlink" title="HashMap 和 Hashtable 的区别"></a>HashMap 和 Hashtable 的区别</h3><ul><li><p><strong>线程是否安全：</strong> <code>HashMap</code> 是非线程安全的，<code>Hashtable</code> 是线程安全的,因为 <code>Hashtable</code> 内部的方法基本都经过<code>synchronized</code> 修饰。（如果你要保证线程安全的话就使用 <code>ConcurrentHashMap</code> 吧！）；</p></li><li><p><strong>效率：</strong> 因为线程安全的问题，<code>HashMap</code> 要比 <code>Hashtable</code> 效率高一点。另外，<code>Hashtable</code> 基本被淘汰，不要在代码中使用它；</p></li><li><p><strong>对 Null key 和 Null value 的支持：</strong> <code>HashMap</code> 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；Hashtable 不允许有 null 键和 null 值，否则会抛出 <code>NullPointerException</code>。</p><p><strong>初始容量大小和每次扩充容量大小的不同：</strong> ① 创建时如果不指定容量初始值，<code>Hashtable</code> 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。<code>HashMap</code> 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。② 创建时如果给定了容量初始值，那么 <code>Hashtable</code> 会直接使用你给定的大小，而 <code>HashMap</code> 会将其扩充为 2 的幂次方大小（<code>HashMap</code> 中的<code>tableSizeFor()</code>方法保证，下面给出了源代码）。也就是说 <code>HashMap</code> 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。</p></li><li><p><strong>底层数据结构：</strong> JDK1.8 以后的 <code>HashMap</code> 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）时，将链表转化为红黑树（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树），以减少搜索时间（后文中我会结合源码对这一过程进行分析）。<code>Hashtable</code> 没有这样的机制。</p></li><li><p><strong>哈希函数的实现</strong>：<code>HashMap</code> 对哈希值进行了高位和低位的混合扰动处理以减少冲突，而 <code>Hashtable</code> 直接使用键的 <code>hashCode()</code> 值。</p></li></ul><h3 id="HashMap和HashSet的区别"><a href="#HashMap和HashSet的区别" class="headerlink" title="HashMap和HashSet的区别"></a>HashMap和HashSet的区别</h3><p><code>HashMap``HashSet</code>实现了 <code>Map</code> 接口实现 <code>Set</code> 接口存储键值对仅存储对象调用 <code>put()</code>向 map 中添加元素调用 <code>add()</code>方法向 <code>Set</code> 中添加元素<code>HashMap</code> 使用键（Key）计算 <code>hashcode``HashSet</code> 使用成员对象来计算 <code>hashcode</code> 值，对于两个对象来说 <code>hashcode</code> 可能相同，所以<code>equals()</code>方法用来判断对象的相等性</p><table><thead><tr><th><code>HashMap</code></th><th><code>HashSet</code></th></tr></thead><tbody><tr><td>实现了 <code>Map</code> 接口</td><td>实现 <code>Set</code> 接口</td></tr><tr><td>存储键值对</td><td>仅存储对象</td></tr><tr><td>调用 <code>put()</code>向 map 中添加元素</td><td>调用 <code>add()</code>方法向 <code>Set</code> 中添加元素</td></tr><tr><td><code>HashMap</code> 使用键（Key）计算 <code>hashcode</code></td><td><code>HashSet</code> 使用成员对象来计算 <code>hashcode</code> 值，对于两个对象来说 <code>hashcode</code> 可能相同，所以<code>equals()</code>方法用来判断对象的相等性</td></tr></tbody></table><h3 id="HashMap-和-TreeMap-区别"><a href="#HashMap-和-TreeMap-区别" class="headerlink" title="HashMap 和 TreeMap 区别"></a>HashMap 和 TreeMap 区别</h3><p>都继承自AbstractMap</p><p>TreeMap还实现了SortedMap和NavigableMap接口</p><p>NavigableMap接口让TreeMap有了对集合内元素的搜索的能力：</p><ul><li><strong>定向搜索</strong>: <code>ceilingEntry()</code>, <code>floorEntry()</code>, <code>higherEntry()</code>和 <code>lowerEntry()</code> 等方法可以用于定位大于等于、小于等于、严格大于、严格小于给定键的最接近的键值对。</li><li><strong>子集操作</strong>: <code>subMap()</code>, <code>headMap()</code>和 <code>tailMap()</code> 方法可以高效地创建原集合的子集视图，而无需复制整个集合。</li><li><strong>逆序视图</strong>:<code>descendingMap()</code> 方法返回一个逆序的 <code>NavigableMap</code> 视图，使得可以反向迭代整个 <code>TreeMap</code>。</li><li><strong>边界操作</strong>: <code>firstEntry()</code>, <code>lastEntry()</code>, <code>pollFirstEntry()</code>和 <code>pollLastEntry()</code> 等方法可以方便地访问和移除元素。</li></ul><p>都是基于红黑树数据结构实现的。</p><p>实现<code>SortedMap</code>接口让 <code>TreeMap</code> 有了对集合中的元素根据键排序的能力。</p><h3 id="HashSet-如何检查重复"><a href="#HashSet-如何检查重复" class="headerlink" title="HashSet 如何检查重复?"></a>HashSet 如何检查重复?</h3><p>对象加入HashSet时会计算hashcode，和已有对象的hashcode进行对比，没有相符的hashcode，会假设这个对象没有重复出现，若和已有元素hashcode对比后相同，根据equals()方法来检查hashcode相等的对象是否真的相同。两者相同，HashSet就不会加入操作成功</p><p>在 JDK1.8 中，<code>HashSet</code>的<code>add()</code>方法只是简单的调用了<code>HashMap</code>的<code>put()</code>方法，并且判断了一下返回值以确保是否有重复元素。直接看一下<code>HashSet</code>中的源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Returns: true if this set did not already contain the specified element</span><br><span class="line">// 返回值：当 set 中没有包含 add 的元素时返回真</span><br><span class="line">public boolean add(E e) &#123;</span><br><span class="line">        return map.put(e, PRESENT)==null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Returns : previous value, or null if none</span><br><span class="line">// 返回值：如果插入位置没有元素返回null，否则返回上一个元素</span><br><span class="line">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">                   boolean evict) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap的底层实现"><a href="#HashMap的底层实现" class="headerlink" title="HashMap的底层实现"></a>HashMap的底层实现</h3><h4 id="JDK1-8之前"><a href="#JDK1-8之前" class="headerlink" title="JDK1.8之前"></a>JDK1.8之前</h4><p>数组+链表——链表散列</p><p>HashMap 通过 key 的 <code>hashcode</code> 经过扰动函数处理过后得到 hash 值，然后通过 <code>(n - 1) &amp; hash</code> 判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。</p><p><code>HashMap</code> 中的扰动函数（<code>hash</code> 方法）是用来优化哈希值的分布。通过对原始的 <code>hashCode()</code> 进行额外处理，扰动函数可以减小由于糟糕的 <code>hashCode()</code> 实现导致的碰撞，从而提高数据的分布均匀性。</p><h4 id="JDK1-8-之后"><a href="#JDK1-8-之后" class="headerlink" title="JDK1.8 之后"></a>JDK1.8 之后</h4><p>相比于之前的版本， JDK1.8 之后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。</p><h3 id="HashMap-的长度为什么是-2-的幂次方"><a href="#HashMap-的长度为什么是-2-的幂次方" class="headerlink" title="HashMap 的长度为什么是 2 的幂次方"></a>HashMap 的长度为什么是 2 的幂次方</h3><ol><li>位运算效率更高：位运算(&amp;)比取余运算(%)更高效。当长度为 2 的幂次方时，<code>hash % length</code> 等价于 <code>hash &amp; (length - 1)</code>。</li><li>可以更好地保证哈希值的均匀分布：扩容之后，在旧数组元素 hash 值比较均匀的情况下，新数组元素也会被分配的比较均匀，最好的情况是会有一半在新数组的前半部分，一半在新数组后半部分。</li><li>扩容机制变得简单和高效：扩容后只需检查哈希值高位的变化来决定元素的新位置，要么位置不变（高位为 0），要么就是移动到新位置（高位为 1，原索引位置+原容量）。</li></ol><h3 id="HashMap-多线程操作导致死循环问题"><a href="#HashMap-多线程操作导致死循环问题" class="headerlink" title="HashMap 多线程操作导致死循环问题"></a>HashMap 多线程操作导致死循环问题</h3><ul><li>位运算效率更高：位运算(&amp;)比取余运算(%)更高效。当长度为 2 的幂次方时，<code>hash % length</code> 等价于 <code>hash &amp; (length - 1)</code>。</li><li>可以更好地保证哈希值的均匀分布：扩容之后，在旧数组元素 hash 值比较均匀的情况下，新数组元素也会被分配的比较均匀，最好的情况是会有一半在新数组的前半部分，一半在新数组后半部分。</li><li>扩容机制变得简单和高效：扩容后只需检查哈希值高位的变化来决定元素的新位置，要么位置不变（高位为 0），要么就是移动到新位置（高位为 1，原索引位置+原容量）。</li></ul><h3 id="HashMap-多线程操作导致死循环问题-1"><a href="#HashMap-多线程操作导致死循环问题-1" class="headerlink" title="HashMap 多线程操作导致死循环问题"></a>HashMap 多线程操作导致死循环问题</h3><p>JDK1.7 及之前版本的 <code>HashMap</code> 在多线程环境下扩容操作可能存在死循环问题，这是由于当一个桶位中有多个元素需要进行扩容时，多个线程同时对链表进行操作，头插法可能会导致链表中的节点指向错误的位置，从而形成一个环形链表，进而使得查询元素的操作陷入死循环无法结束。</p><p>为了解决这个问题，JDK1.8 版本的 HashMap 采用了尾插法而不是头插法来避免链表倒置，使得插入的节点永远都是放在链表的末尾，避免了链表中的环形结构。但是还是不建议在多线程下使用 <code>HashMap</code>，因为多线程下使用 <code>HashMap</code> 还是会存在数据覆盖的问题。并发环境下，推荐使用 <code>ConcurrentHashMap</code> 。</p><h3 id="HashMap-为什么线程不安全？"><a href="#HashMap-为什么线程不安全？" class="headerlink" title="HashMap 为什么线程不安全？"></a>HashMap 为什么线程不安全？</h3><p>JDK1.7 及之前版本，在多线程环境下，<code>HashMap</code> 扩容时会造成死循环和数据丢失的问题。</p><p>DK 1.8 后，在 <code>HashMap</code> 中，多个键值对可能会被分配到同一个桶（bucket），并以链表或红黑树的形式存储。多个线程对 <code>HashMap</code> 的 <code>put</code> 操作会导致线程不安全，具体来说会有数据覆盖的风险。</p><p>还有一个情况是两个线程同时 <code>put</code> 操作导致 <code>size</code> 的值不正确，进而导致数据覆盖的问题</p><h3 id="HashMap-常见的遍历方式"><a href="#HashMap-常见的遍历方式" class="headerlink" title="HashMap 常见的遍历方式?"></a>HashMap 常见的遍历方式?</h3><p>当遍历不存在阻塞时, parallelStream 的性能是最低的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Benchmark               Mode  Cnt     Score      Error  Units</span><br><span class="line">Test.entrySet           avgt    5   288.651 ±   10.536  ns/op</span><br><span class="line">Test.keySet             avgt    5   584.594 ±   21.431  ns/op</span><br><span class="line">Test.lambda             avgt    5   221.791 ±   10.198  ns/op</span><br><span class="line">Test.parallelStream     avgt    5  6919.163 ± 1116.139  ns/op</span><br></pre></td></tr></table></figure><p>加入阻塞代码<code>Thread.sleep(10)</code>后, parallelStream 的性能才是最高的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Benchmark               Mode  Cnt           Score          Error  Units</span><br><span class="line">Test.entrySet           avgt    5  1554828440.000 ± 23657748.653  ns/op</span><br><span class="line">Test.keySet             avgt    5  1550612500.000 ±  6474562.858  ns/op</span><br><span class="line">Test.lambda             avgt    5  1551065180.000 ± 19164407.426  ns/op</span><br><span class="line">Test.parallelStream     avgt    5   186345456.667 ±  3210435.590  ns/op</span><br></pre></td></tr></table></figure><h3 id="ConcurrentHashMap-和-Hashtable-的区别"><a href="#ConcurrentHashMap-和-Hashtable-的区别" class="headerlink" title="ConcurrentHashMap 和 Hashtable 的区别"></a>ConcurrentHashMap 和 Hashtable 的区别</h3><p><strong>底层数据结构：</strong> JDK1.7 的 <code>ConcurrentHashMap</code> 底层采用 <strong>分段的数组+链表</strong> 实现，JDK1.8 采用的数据结构跟 <code>HashMap1.8</code> 的结构一样，数组+链表/红黑二叉树。<code>Hashtable</code> 和 JDK1.8 之前的 <code>HashMap</code> 的底层数据结构类似都是采用 <strong>数组+链表</strong> 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；</p><p><strong>实现线程安全的方式（重要）：</strong></p><ul><li>在 JDK1.7 的时候，<code>ConcurrentHashMap</code> 对整个桶数组进行了分割分段(<code>Segment</code>，分段锁)，每一把锁只锁容器其中一部分数据（下面有示意图），多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。</li><li>到了 JDK1.8 的时候，<code>ConcurrentHashMap</code> 已经摒弃了 <code>Segment</code> 的概念，而是直接用 <code>Node</code> 数组+链表+红黑树的数据结构来实现，并发控制使用 <code>synchronized</code> 和 CAS 来操作。（JDK1.6 以后 <code>synchronized</code> 锁做了很多优化） 整个看起来就像是优化过且线程安全的 <code>HashMap</code>，虽然在 JDK1.8 中还能看到 <code>Segment</code> 的数据结构，但是已经简化了属性，只是为了兼容旧版本；</li><li><strong><code>Hashtable</code>(同一把锁)</strong> :使用 <code>synchronized</code> 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈</li></ul><p><code>TreeNode</code>是存储红黑树节点，被<code>TreeBin</code>包装。<code>TreeBin</code>通过<code>root</code>属性维护红黑树的根结点，因为红黑树在旋转的时候，根结点可能会被它原来的子节点替换掉，在这个时间点，如果有其他线程要写这棵红黑树就会发生线程不安全问题，所以在 <code>ConcurrentHashMap</code> 中<code>TreeBin</code>通过<code>waiter</code>属性维护当前使用这棵红黑树的线程，来防止其他线程的进入。</p><h3 id="ConcurrentHashMap-线程安全的具体实现方式-底层具体实现"><a href="#ConcurrentHashMap-线程安全的具体实现方式-底层具体实现" class="headerlink" title="ConcurrentHashMap 线程安全的具体实现方式/底层具体实现"></a>ConcurrentHashMap 线程安全的具体实现方式/底层具体实现</h3><h4 id="JDK1-8-之前"><a href="#JDK1-8-之前" class="headerlink" title="JDK1.8 之前"></a>JDK1.8 之前</h4><p><img src="../photo/java7_concurrenthashmap.png"></p><p>先将数据分为一段一段（这个“段”就是 <code>Segment</code>）的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。</p><p><strong><code>ConcurrentHashMap</code> 是由 <code>Segment</code> 数组结构和 <code>HashEntry</code> 数组结构组成</strong>。</p><p><code>Segment</code> 继承了 <code>ReentrantLock</code>,所以 <code>Segment</code> 是一种可重入锁，扮演锁的角色。<code>HashEntry</code> 用于存储键值对数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">static class Segment&lt;K,V&gt; extends ReentrantLock implements Serializable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 <code>ConcurrentHashMap</code> 里包含一个 <code>Segment</code> 数组，<code>Segment</code> 的个数一旦<strong>初始化就不能改变</strong>。 <code>Segment</code> 数组的大小默认是 16，也就是说默认可以同时支持 16 个线程并发写。</p><p><code>Segment</code> 的结构和 <code>HashMap</code> 类似，是一种数组和链表结构，一个 <code>Segment</code> 包含一个 <code>HashEntry</code> 数组，每个 <code>HashEntry</code> 是一个链表结构的元素，每个 <code>Segment</code> 守护着一个 <code>HashEntry</code> 数组里的元素，当对 <code>HashEntry</code> 数组的数据进行修改时，必须首先获得对应的 <code>Segment</code> 的锁。也就是说，对同一 <code>Segment</code> 的并发写入会被阻塞，不同 <code>Segment</code> 的写入是可以并发执行的。</p><h4 id="JDK1-8-之后-1"><a href="#JDK1-8-之后-1" class="headerlink" title="JDK1.8 之后"></a>JDK1.8 之后</h4><p><img src="../photo/java8_concurrenthashmap.png"></p><p><code>ConcurrentHashMap</code> 取消了 <code>Segment</code> 分段锁，采用 <code>Node + CAS + synchronized</code> 来保证并发安全。数据结构跟 <code>HashMap</code> 1.8 的结构类似，数组+链表/红黑二叉树。Java 8 在链表长度超过一定阈值（8）时将链表（寻址时间复杂度为 O(N)）转换为红黑树（寻址时间复杂度为 O(log(N))）。</p><p>Java 8 中，锁粒度更细，<code>synchronized</code> 只锁定当前链表或红黑二叉树的首节点，这样只要 hash 不冲突，就不会产生并发，就不会影响其他 Node 的读写，效率大幅提升</p><h3 id="JDK-1-7-和-JDK-1-8-的-ConcurrentHashMap-实现有什么不同？"><a href="#JDK-1-7-和-JDK-1-8-的-ConcurrentHashMap-实现有什么不同？" class="headerlink" title="JDK 1.7 和 JDK 1.8 的 ConcurrentHashMap 实现有什么不同？"></a>JDK 1.7 和 JDK 1.8 的 ConcurrentHashMap 实现有什么不同？</h3><ul><li><strong>线程安全实现方式</strong>：JDK 1.7 采用 <code>Segment</code> 分段锁来保证安全， <code>Segment</code> 是继承自 <code>ReentrantLock</code>。JDK1.8 放弃了 <code>Segment</code> 分段锁的设计，采用 <code>Node + CAS + synchronized</code> 保证线程安全，锁粒度更细，<code>synchronized</code> 只锁定当前链表或红黑二叉树的首节点。</li><li><strong>Hash 碰撞解决方法</strong> : JDK 1.7 采用拉链法，JDK1.8 采用拉链法结合红黑树（链表长度超过一定阈值时，将链表转换为红黑树）。</li><li><strong>并发度</strong>：JDK 1.7 最大并发度是 Segment 的个数，默认是 16。JDK 1.8 最大并发度是 Node 数组的大小，并发度更大。</li></ul><h3 id="ConcurrentHashMap-为什么-key-和-value-不能为-null？"><a href="#ConcurrentHashMap-为什么-key-和-value-不能为-null？" class="headerlink" title="ConcurrentHashMap 为什么 key 和 value 不能为 null？"></a>ConcurrentHashMap 为什么 key 和 value 不能为 null？</h3><p><code>ConcurrentHashMap</code> 的 key 和 value 不能为 null 主要是为了避免二义性。null 是一个特殊的值，表示没有对象或没有引用。如果你用 null 作为键，那么你就无法区分这个键是否存在于 <code>ConcurrentHashMap</code> 中，还是根本没有这个键。同样，如果你用 null 作为值，那么你就无法区分这个值是否是真正存储在 <code>ConcurrentHashMap</code> 中的，还是因为找不到对应的键而返回的。</p><p>多线程环境下，存在一个线程操作该 <code>ConcurrentHashMap</code> 时，其他的线程将该 <code>ConcurrentHashMap</code> 修改的情况，所以无法通过 <code>containsKey(key)</code> 来判断否存在这个键值对，也就没办法解决二义性问题了。</p><p>与此形成对比的是，<code>HashMap</code> 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个。如果传入 null 作为参数，就会返回 hash 值为 0 的位置的值。单线程环境下，不存在一个线程操作该 HashMap 时，其他的线程将该 <code>HashMap</code> 修改的情况，所以可以通过 <code>contains(key)</code>来做判断是否存在这个键值对，从而做相应的处理，也就不存在二义性问题。</p><p>也就是说，多线程下无法正确判定键值对是否存在（存在其他线程修改的情况），单线程是可以的（不存在其他线程修改的情况）。</p><h3 id="ConcurrentHashMap-能保证复合操作的原子性吗？"><a href="#ConcurrentHashMap-能保证复合操作的原子性吗？" class="headerlink" title="ConcurrentHashMap 能保证复合操作的原子性吗？"></a>ConcurrentHashMap 能保证复合操作的原子性吗？</h3><p>复合操作是指由多个基本操作(如<code>put</code>、<code>get</code>、<code>remove</code>、<code>containsKey</code>等)组成的操作，例如先判断某个键是否存在<code>containsKey(key)</code>，然后根据结果进行插入或更新<code>put(key, value)</code>。这种操作在执行过程中可能会被其他线程打断，导致结果不符合预期。</p><p><code>ConcurrentHashMap</code> 提供了一些原子性的复合操作，如 <code>putIfAbsent</code>、<code>compute</code>、<code>computeIfAbsent</code> 、<code>computeIfPresent</code>、<code>merge</code>等。这些方法都可以接受一个函数作为参数，根据给定的 key 和 value 来计算一个新的 value，并且将其更新到 map 中。</p><h2 id="Collections-工具类（不重要）"><a href="#Collections-工具类（不重要）" class="headerlink" title="Collections 工具类（不重要）"></a>Collections 工具类（不重要）</h2><ul><li>排序</li><li>查找,替换操作</li><li>同步控制(不推荐，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void reverse(List list)//反转</span><br><span class="line">void shuffle(List list)//随机排序</span><br><span class="line">void sort(List list)//按自然排序的升序排序</span><br><span class="line">void sort(List list, Comparator c)//定制排序，由Comparator控制排序逻辑</span><br><span class="line">void swap(List list, int i , int j)//交换两个索引位置的元素</span><br><span class="line">void rotate(List list, int distance)//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int binarySearch(List list, Object key)//对List进行二分查找，返回索引，注意List必须是有序的</span><br><span class="line">int max(Collection coll)//根据元素的自然顺序，返回最大的元素。 类比int min(Collection coll)</span><br><span class="line">int max(Collection coll, Comparator c)//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比int min(Collection coll, Comparator c)</span><br><span class="line">void fill(List list, Object obj)//用指定的元素代替指定list中的所有元素</span><br><span class="line">int frequency(Collection c, Object o)//统计元素出现次数</span><br><span class="line">int indexOfSubList(List list, List target)//统计target在list中第一次出现的索引，找不到则返回-1，类比int lastIndexOfSubList(List source, list target)</span><br><span class="line">boolean replaceAll(List list, Object oldVal, Object newVal)//用新元素替换旧元素</span><br></pre></td></tr></table></figure><h3 id="同步控制"><a href="#同步控制" class="headerlink" title="同步控制"></a>同步控制</h3><p><code>Collections</code> 提供了多个<code>synchronizedXxx()</code>方法·，该方法可以将指定集合包装成线程同步的集合，从而解决多线程并发访问集合时的线程安全问题。</p><p>我们知道 <code>HashSet</code>，<code>TreeSet</code>，<code>ArrayList</code>,<code>LinkedList</code>,<code>HashMap</code>,<code>TreeMap</code> 都是线程不安全的。<code>Collections</code> 提供了多个静态方法可以把他们包装成线程同步的集合。</p><p><strong>最好不要用下面这些方法，效率非常低，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合。</strong></p><p>方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">synchronizedCollection(Collection&lt;T&gt;  c) //返回指定 collection 支持的同步（线程安全的）collection。</span><br><span class="line">synchronizedList(List&lt;T&gt; list)//返回指定列表支持的同步（线程安全的）List。</span><br><span class="line">synchronizedMap(Map&lt;K,V&gt; m) //返回由指定映射支持的同步（线程安全的）Map。</span><br><span class="line">synchronizedSet(Set&lt;T&gt; s) //返回指定 set 支持的同步（线程安全的）set。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面经刷题_Day1</title>
      <link href="posts/c83c.html"/>
      <url>posts/c83c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>Java面向对象有哪些特性？</p></blockquote><h6 id="封装、继承、多态"><a href="#封装、继承、多态" class="headerlink" title="封装、继承、多态"></a><strong>封装、继承、多态</strong></h6><ul><li>封装:说明一个类的行为和属性与其他类关系。增加代码的可维护性，便于修改，隐藏了类的内部实现机制。</li></ul><!----><ul><li>继承：父类和子类的关系。从已有类派生出新的类，增强代码的复用性。</li></ul><!----><ul><li><p>多态性：继承、重写、父类引用指向子类对象。说明的是类与类的关系。</p><h2 id="为什么这些特性能帮我们写更好的代码？"><a href="#为什么这些特性能帮我们写更好的代码？" class="headerlink" title="为什么这些特性能帮我们写更好的代码？"></a>为什么这些特性能帮我们写更好的代码？</h2><ul><li>封装：使代码能够重复使用，增加代码的复用性</li></ul><!----><ul><li>继承：也是增加代码的复用性</li></ul><!----><ul><li>多态：增强代码的可移植性、鲁棒性</li></ul><h1 id="Show-Me-The-Difference-from-Alibaba"><a href="#Show-Me-The-Difference-from-Alibaba" class="headerlink" title="Show Me The Difference(from Alibaba)"></a>Show Me The Difference(from Alibaba)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下代码有什么不同？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//代码1</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Accumulator</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> result=<span class="number">0.0D</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(<span class="type">double</span>[] values)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">double</span> value :values)&#123;</span><br><span class="line">            result+=value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码2</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Accumulator2</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> result=<span class="number">0.0D</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(<span class="type">double</span>[] values)</span>&#123;</span><br><span class="line">        <span class="type">double</span> sum=<span class="number">0.0D</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">double</span> value :values)&#123;</span><br><span class="line">            sum+=value;</span><br><span class="line">        &#125;</span><br><span class="line">        result+=sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>代码1会得到很多变量result的中间值，这些都是脏数据，无意义，反而读到了脏数据会产生错误。多线程调用时，会让一个线程读到另外一个线程的中间值。</p><p>代码2一次性得到最终值：首先用一个方法的局部变量，把整个值加完之后再一次性赋值给result，这样就不会得到很多中间值。多线程调用时，也会小概率的读到中间值，出现不一致性的概率更小，有可能得到0，因为result+=sum不具备原子性。因此我们在方法完成之前，读不到中间状态的脏数据。</p><p>综上，代码2写法更好</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于深度学习的图像着色系统项目介绍</title>
      <link href="posts/1a3.html"/>
      <url>posts/1a3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="基于深度学习的图像着色系统项目介绍"><a href="#基于深度学习的图像着色系统项目介绍" class="headerlink" title="基于深度学习的图像着色系统项目介绍"></a><strong>基于深度学习的图像着色系统项目介绍</strong></h1><h2 id="库的支持"><a href="#库的支持" class="headerlink" title="库的支持"></a>库的支持</h2><p>这里我们用到了以下的库</p><p><img src="E:\MyBlog\public\img\库.png" alt="image-20220522164525844"></p><p>直接用pip命令安装txt文件中的上述库，非常方便</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requirements.txt</span><br></pre></td></tr></table></figure><h3 id="torch"><a href="#torch" class="headerlink" title="torch"></a>torch</h3><h4 id="1-1-torch-nn简介与功能"><a href="#1-1-torch-nn简介与功能" class="headerlink" title="1.1 torch.nn简介与功能"></a>1.1 torch.nn简介与功能</h4><p>nn是Neural Network的简称。</p><p>torch.nn模块是PyTorch提供的，帮助程序员方便（1）创建神经网络和（2）训练神经网络而提供的模块。主要功能包括：</p><ol><li>创建神经网络</li><li>训练神经网络</li></ol><h4 id="2-1-获取神经网络的模型参数"><a href="#2-1-获取神经网络的模型参数" class="headerlink" title="2.1 获取神经网络的模型参数"></a><strong>2.1 获取神经网络的模型参数</strong></h4><p>torch.nn.Parameter     获取模型参数</p><h5 id="项目中的重要方法总结与归纳"><a href="#项目中的重要方法总结与归纳" class="headerlink" title="项目中的重要方法总结与归纳:"></a>项目中的重要方法总结与归纳:</h5><p>将数据转换成Tensor，便于模型使用</p><p><strong>torch.nn.Module</strong>:</p><p>它是所有神经网络模块的基类。</p><p><strong>torch.nn.Conv2d</strong></p><p>  该软件包将用于在由多个输入平面组成的输入信号上应用2D卷积。</p><p><strong>BatchNorm2d()</strong></p><p>归一化</p><p>函数参数讲解：</p><p>BatchNorm2d()函数数学原理如下：</p><p>​                           <img src="https://img-blog.csdnimg.cn/20190612205637399.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BatchNorm2d(<span class="number">256</span>, eps=<span class="number">1e-05</span>, momentum=<span class="number">0.1</span>, affine=<span class="literal">True</span>, track_running_stats=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>1.num_features：一般输入参数为batch_sizenum_featuresheight*width，即为其中特征的数量，即为输入BN层的通道数；<br>2.eps：分母中添加的一个值，目的是为了计算的稳定性，默认为：1e-5,避免分母为0；<br>3.momentum：一个用于运行过程中均值和方差的一个估计参数（我的理解是一个稳定系数，类似于SGD中的momentum的系数）；<br>4.affine：当设为true时，会给定可以学习的系数矩阵gamma和beta</p><p><strong>torch.nn.ReLU</strong>  </p><p>它将按元素应用于整流线性单位函数：ReLU(x)= max(0, x)</p><p><strong>torch.nn.Upsample</strong>  </p><p>它用于对给定的多通道1D, 2D或3D数据进行升采样。</p><p><strong>张量tensor</strong></p><p><code>torch.Tensor()</code>是一个类，是默认张量类型torch.FloatTensor()的别名，用于生成一个单精度浮点类型的张量。</p><p><strong>张量连接</strong></p><ul><li><code>torch.cat(inputs, dimension=0) → Tensor</code>:在给定维度上对输入的张量序列seq 进行连接操作,只需满足指定纬度的长度相同</li></ul><p><strong>torch.nn.Sequential</strong></p><p>它是一个顺序容器,其中模块的添加顺序与在构造函数中传递模块时的顺序相同。</p><p><strong>torch.nn.Softmax</strong>  </p><p>它用于将softmax函数应用于n维输入张量以重新缩放它们。之后, n维输出Tensor的元素位于0、1的范围内, 且总和为1。</p><p><strong>torch.nn.ConvTranspose2d</strong>  </p><p>该软件包将用于在由多个输入平面组成的输入图像上应用2D转置卷积运算符。</p><p><strong>TORCH.NN.FUNCTIONAL.INTERPOLATE</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.functional.interpolate(<span class="built_in">input</span>, size=<span class="literal">None</span>, scale_factor=<span class="literal">None</span>, mode=‘nearest’, align_corners=<span class="literal">None</span>, recompute_scale_factor=<span class="literal">None</span>, antialias=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>将输入input上采样或下采样到指定的size或缩放因子上scale_factor</p><p>resize使用的算法由mode参数决定,mode默认为nearest, 可选参数有nearest/linear(3D Inputs-only)/bilinear/bicubic(4D Inputs-only)/trilinear(5D Inputs-only)/area/nearest-exact</p><p>支持输入input为3/4/5维数据，输入数据维度的顺序为mini-batch x channels x [optional depth] x [optional height] x width</p><p>参数<br>input:输入向量<br>size(int or Tuple[int] or Tuple[int, int] or Tuple[int, int, int])输出数据的空间尺度<br>mode (str) ：采样算法<br>align_corners：输出的结果是否角对齐，对插值后的边的处理方式有所不同，参考一文看懂align_corners<br>recompute_scale_factor:是否重新计算scale_factor,默认None，选择特定的插值方式时可用<br>align_corners为False和True时输出的对比：</p><p><img src="E:\MyBlog\public\img\TORCHNNFUNCTIONALINTERPOLATE.png" alt="image-20220522213718336"></p><h4 id="2-2-主要的容器"><a href="#2-2-主要的容器" class="headerlink" title="2.2 主要的容器"></a>2.2 主要的容器</h4><table><thead><tr><th>名称</th><th>Containers</th><th></th></tr></thead><tbody><tr><td>1)<strong>torch.nn.Module</strong></td><td>它是所有神经网络模块的基类。</td><td></td></tr><tr><td>2)<strong>torch.nn.Sequential</strong></td><td><strong>它是一个顺序容器,其中模块的添加顺序与在构造函数中传递模块时的顺序相同。</strong></td><td></td></tr><tr><td>3)torch.nn.ModuleList</td><td>这会将子模块保存在列表中。</td><td></td></tr><tr><td>4)torch.nn.ModuleDict</td><td>这会将子模块保存在目录中。</td><td></td></tr><tr><td>5)torch.nn.ParameterList</td><td>这会将参数保存在列表中。</td><td></td></tr><tr><td>6)torch.nn.parameterDict</td><td>这会将参数保存在目录中。</td><td></td></tr></tbody></table><h4 id="2-3-线性层"><a href="#2-3-线性层" class="headerlink" title="2.3 线性层"></a>2.3 线性层</h4><table><thead><tr><th></th><th>线性层</th><th></th></tr></thead><tbody><tr><td>1)PyTorch PlaceHolder</td><td>它是一个占位符身份运算符, 对参数不敏感。</td><td></td></tr><tr><td>2)torch.nn.Linear</td><td>它用于对输入数据进行线性变换：y = xAT + b</td><td></td></tr><tr><td>3)torch.nn.Bilinear</td><td>它用于对输入数据进行双线性变换：y = x1 Ax2 + b</td><td></td></tr></tbody></table><h4 id="2-4-非线性激活函数"><a href="#2-4-非线性激活函数" class="headerlink" title="2.4 非线性激活函数"></a>2.4 非线性激活函数</h4><table><thead><tr><th></th><th>非线性激活(加权和, 非线性)</th><th></th></tr></thead><tbody><tr><td>1)torch.nn.ELU</td><td>它将用于应用按元素的函数：ELU(x)= max(0, x)+ min(0, α*(exp(x)-1))</td><td></td></tr><tr><td>2)torch.nn.Hardshrink</td><td>它将用于应用硬收缩函数逐元素函数：</td><td></td></tr><tr><td>3)torch.nn.LeakyReLU</td><td>它将用于应用按元素的函数：LeakyReLu(x)= max(0, x)+ negative_slope * min(0, x)</td><td></td></tr><tr><td>4)torch.nn.LogSigmoid</td><td>它将用于应用逐元素函数：</td><td></td></tr><tr><td>5)torch.nn.MultiheadAttention</td><td>它用于允许模型关注来自不同表示子空间的信息</td><td></td></tr><tr><td>6)torch.nn.PReLU</td><td>它将用于应用按元素的函数：PReLU(x)= max(0, x)+ a * min(0, x)</td><td></td></tr><tr><td>7)<strong>torch.nn.ReLU</strong></td><td><strong>它将按元素应用于整流线性单位函数：ReLU(x)= max(0, x)</strong></td><td></td></tr><tr><td>8)torch.nn.ReLU6</td><td>它将用于应用按元素的函数：ReLU6(x)= min(max(0, x), 6)</td><td></td></tr><tr><td>9)torch.nn.RReLU</td><td>如本文所述, 它将用于逐元素地应用随机泄漏整流线性单位函数：</td><td></td></tr><tr><td>10)torch.nn.SELU</td><td>它将按以下方式应用按元素的函数：SELU(x)= scale *(max(0, x)+ min(0, a *(exp(x)-1)))这里α= 1.6732632423543772772848170429916717和scale = 1.0507009873554804934193193349852946。</td><td></td></tr><tr><td>11)<strong>PyTorch</strong></td><td>它将按以下方式应用按元素的功能：</td><td></td></tr><tr><td>12)PyTorch</td><td>它将按以下方式应用按元素的功能：</td><td></td></tr><tr><td>13)torch.nn.Softplus</td><td>它将按以下方式应用按元素的功能：</td><td></td></tr><tr><td>14)torch.nn.Softshrink</td><td>它将按元素应用软收缩功能, 如下所示：</td><td></td></tr><tr><td>15)torch.nn.Softsign</td><td>它将按以下方式应用按元素的功能：</td><td></td></tr><tr><td>16)torch.nn.Tanh</td><td>它将按以下方式应用按元素的功能：</td><td></td></tr><tr><td>17)torch.nn.Tanhshrink</td><td>它将按以下方式应用按元素的函数：Tanhshrink(x)= x-Tanh(x)</td><td></td></tr><tr><td>18)torch.nn.Threshold</td><td>它将用于阈值输入张量的每个元素。阈值定义为：</td><td></td></tr></tbody></table><h4 id="2-5-非线性激活函数"><a href="#2-5-非线性激活函数" class="headerlink" title="2.5 非线性激活函数"></a>2.5 非线性激活函数</h4><table><thead><tr><th></th><th>非线性激活(其他)</th><th></th></tr></thead><tbody><tr><td>1)torch.nn.Softmin</td><td>它用于将softmin函数应用于n维输入张量以重新缩放它们。之后, n维输出Tensor的元素位于0、1的范围内, 且总和为1。Softmin定义为：</td><td></td></tr><tr><td>2)<strong>torch.nn.Softmax</strong></td><td><strong>它用于将softmax函数应用于n维输入张量以重新缩放它们。之后, n维输出Tensor的元素位于0、1的范围内, 且总和为1。</strong>Softmax定义为：</td><td></td></tr><tr><td>3)torch.nn.Softmax2d</td><td>它用于将SoftMax应用于要素上的每个空间位置。</td><td></td></tr><tr><td>4)torch.nn.LogSoftmax</td><td>它用于将LogSoftmax函数应用于n维输入张量。 LofSoftmax函数可以定义为：</td><td></td></tr><tr><td>5)torch.nn.AdaptiveLogSoftmaxWithLoss</td><td>这是训练具有较大输出空间的模型的策略。标签分布高度不平衡时非常有效</td><td></td></tr></tbody></table><h4 id="2-6-归一化处理"><a href="#2-6-归一化处理" class="headerlink" title="2.6 归一化处理"></a><strong>2.6 归一化处理</strong></h4><table><thead><tr><th></th><th>归一化层</th><th></th></tr></thead><tbody><tr><td>1)torch.nn.BatchNorm1d</td><td>它用于对2D或3D输入应用批量归一化。</td><td></td></tr><tr><td>2)<strong>torch.nn.BatchNorm2d</strong></td><td>它用于在4D上应用批量归一化。</td><td></td></tr><tr><td>3)torch.nn.BatchNorm3d</td><td>它用于对5D输入应用批量归一化。</td><td></td></tr><tr><td>4)torch.nn.GroupNorm</td><td>它用于在最小输入批次上应用组归一化。</td><td></td></tr><tr><td>5)torch.nn.SyncBatchNorm</td><td>它用于对n维输入应用批量归一化。</td><td></td></tr><tr><td>6)torch.nn.InstanceNorm1d</td><td>它用于在3D输入上应用实例规范化。</td><td></td></tr><tr><td>7)torch.nn.InstanceNorm2d</td><td>它用于在4D输入上应用实例规范化。</td><td></td></tr><tr><td>8)torch.nn.InstanceNorm3d</td><td>它用于在5D输入上应用实例规范化。</td><td></td></tr><tr><td>9)torch.nn.LayerNorm</td><td>它用于在最小输入批次上应用层归一化。</td><td></td></tr><tr><td>10)torch.nn.LocalResponseNorm</td><td>它用于对由多个输入平面组成的输入信号进行局部响应归一化, 其中通道占据第二维。</td><td></td></tr></tbody></table><h4 id="2-7-各种损失函数"><a href="#2-7-各种损失函数" class="headerlink" title="2.7 各种损失函数"></a>2.7 各种损失函数</h4><table><thead><tr><th></th><th>Loss function</th><th></th></tr></thead><tbody><tr><td>1)torch.nn.L1Loss</td><td>它用于衡量输入x和目标y中每个元素之间的平均绝对误差的标准。未减少的损失可描述为：l(x, y)= L = {l1, …, ln}, ln = | xn-yn |, 其中N是批次大小。</td><td></td></tr><tr><td>2)torch.nn.MSELoss</td><td>它用于衡量输入x和目标y中每个元素之间的均方误差的标准。未减少的损失可描述为：l(x, y)= L = {l1, …, ln}, ln =(xn-yn)2, 其中N是批次大小。</td><td></td></tr><tr><td>3)torch.nn.CrossEntropyLoss</td><td>此条件将nn.LogSoftmax()和nn.NLLLoss()组合在一个类中。当我们训练C类的分类问题时, 这将很有帮助。</td><td></td></tr><tr><td>4)torch.nn.CTCLoss</td><td>连接主义者的时间分类损失计算连续时间序列和目标序列之间的损失。</td><td></td></tr><tr><td>5)torch.nn.NLLLoss</td><td>负对数似然损失用于训练C类的分类问题。</td><td></td></tr><tr><td>6)torch.nn.PoissonNLLLoss</td><td>目标的Poisson分布为负的对数似然损失-目标(Posson(input)loss(input, target)= input-target * log(target！))</td><td></td></tr><tr><td>7)torch.nn.KLDivLoss</td><td>这对于连续分布是有用的距离度量, 并且在我们对连续输出分布的空间进行直接回归时也很有用。</td><td></td></tr><tr><td>8)torch.nn.BCELoss</td><td>它用于创建衡量目标和输出之间的二进制交叉熵的标准。未减少的损失可描述为：l(x, y)= L = {l1, …, ln}, ln = -wn [yn * logxn +(1-yn)* log(1-xn)], 其中N是批次大小。</td><td></td></tr><tr><td>9)torch.nn.BCEWithLogitsLoss</td><td>它在一个类别中将Sigmoid层和BCELoss结合在一起。通过将操作合并到一层, 我们可以利用log-sum-exp技巧来实现数值稳定性。</td><td></td></tr><tr><td>10)torch.nn.MarginRankingLoss</td><td>它创建一个标准来测量给定输入x1, x2, 两个1D迷你批量张量和包含1或-1的标签1D迷你批量张量y的损耗。迷你批次中每个样本的损失函数如下：loss(x, y)= max(0, -y *(x1-x2)+ margin</td><td></td></tr><tr><td>11)torch.nn.HingeEmbeddingLoss</td><td>HingeEmbeddingLoss度量给定输入张量x和包含1或-1的标签张量y的损失。它用于测量两个输入是否相似或不相似。损失函数定义为：</td><td></td></tr><tr><td>12)torch.nn.MultiLabelMarginLoss</td><td>它用于创建优化输入x和输出y之间的多类多分类铰链损耗的标准。</td><td></td></tr><tr><td>13)torch.nn.SmoothL1Loss</td><td>它用于创建一个标准, 如果绝对逐项误差低于1, 则使用平方项, 否则使用L1项。也称为胡贝尔损耗：</td><td></td></tr><tr><td>14)torch.nn.SoftMarginLoss</td><td>它用于创建优化输入张量x和目标张量y之间(包含1或-1)的两类分类逻辑损失的标准。</td><td></td></tr><tr><td>15)torch.nn.MultiLabelSoftMarginLoss</td><td>它用于创建一个标准, 该标准基于输入x与大小(N, C)的目标y之间的最大熵来优化多标签对所有损失。</td><td></td></tr><tr><td>16)torch.nn.CosineEmbeddingLoss</td><td>它用于创建一个标准, 该标准测量给定输入张量x1, x2和张量标签y的值为1或-1的损失。它用于使用余弦距离来测量两个输入是相似还是相异。</td><td></td></tr><tr><td>17)torch.nn.MultiMarginLoss</td><td>它用于创建优化输入x和输出y之间的多类分类铰链损耗的标准。</td><td></td></tr><tr><td>18)torch.nn.TripletMarginLoss</td><td>它用于创建衡量给定输入张量x1, x2, x3和值大于0的余量的三重态损失的标准。它用于衡量样本之间的相对相似性。三元组由锚点, 正例和负例组成。 L(a, p, n)= max {d(ai, pi)-d(ai, ni)+ margin, 0}</td><td></td></tr></tbody></table><h4 id="2-8-CNN卷积层"><a href="#2-8-CNN卷积层" class="headerlink" title="2.8 CNN卷积层"></a>2.8 CNN卷积层</h4><table><thead><tr><th></th><th>Convolution layers</th><th></th></tr></thead><tbody><tr><td>1)torch.nn.Conv1d</td><td>该软件包将用于对由多个输入平面组成的输入信号进行一维卷积。</td><td></td></tr><tr><td>2)<strong>torch.nn.Conv2d</strong></td><td><strong>该软件包将用于在由多个输入平面组成的输入信号上应用2D卷积。</strong></td><td></td></tr><tr><td>3)torch.nn.Conv3d</td><td>该软件包将用于在由多个输入平面组成的输入信号上应用3D卷积。</td><td></td></tr><tr><td>4)torch.nn.ConvTranspose1d</td><td>该软件包将用于在由多个输入平面组成的输入图像上应用一维转置卷积算符。</td><td></td></tr><tr><td>5)<strong>torch.nn.ConvTranspose2d</strong></td><td><strong>该软件包将用于在由多个输入平面组成的输入图像上应用2D转置卷积运算符。</strong></td><td></td></tr><tr><td>6)torch.nn.ConvTranspose3d</td><td>该软件包将用于在由多个输入平面组成的输入图像上应用3D转置卷积运算符。</td><td></td></tr><tr><td>7)torch.nn。展开</td><td>它用于从成批的输入张量中提取滑动局部块。</td><td></td></tr><tr><td>8)PyTorch折叠</td><td>它用于将一系列滑动局部块组合成一个大的包含张量。</td><td></td></tr></tbody></table><h4 id="2-9-pooling层"><a href="#2-9-pooling层" class="headerlink" title="2.9 pooling层"></a>2.9 pooling层</h4><table><thead><tr><th></th><th>Pooling layers</th><th></th></tr></thead><tbody><tr><td>1)torch.nn.MaxPool1d</td><td>它用于在由多个输入平面组成的输入信号上应用一维最大池。</td><td></td></tr><tr><td>2)torch.nn.MaxPool2d</td><td>它用于在由多个输入平面组成的输入信号上应用2D max池。</td><td></td></tr><tr><td>3)torch.nn.MaxPool3d</td><td>它用于在由多个输入平面组成的输入信号上应用3D max池。</td><td></td></tr><tr><td>4)torch.nn.MaxUnpool1d</td><td>它用于计算MaxPool1d的局部逆。</td><td></td></tr><tr><td>5)torch.nn.MaxUnpool2d</td><td>它用于计算MaxPool2d的局部逆。</td><td></td></tr><tr><td>6)torch.nn.MaxUnpool3d</td><td>它用于计算MaxPool3d的局部逆。</td><td></td></tr><tr><td>7)torch.nn.AvgPool1d</td><td>它用于在由多个输入平面组成的输入信号上应用一维平均池。</td><td></td></tr><tr><td>8)torch.nn.AvgPool2d</td><td>它用于在由多个输入平面组成的输入信号上应用2D平均池。</td><td></td></tr><tr><td>9)torch.nn.AvgPool3d</td><td>它用于在由多个输入平面组成的输入信号上应用3D平均池。</td><td></td></tr><tr><td>10)torch.nn.FractionalMaxPool2d</td><td>它用于在由多个输入平面组成的输入信号上应用2D分数最大池化。</td><td></td></tr><tr><td>11)torch.nn.LPPool1d</td><td>它用于在由多个输入平面组成的输入信号上应用一维功率平均池。</td><td></td></tr><tr><td>12)torch.nn.LPPool2d</td><td>它用于在由多个输入平面组成的输入信号上应用2D功率平均池。</td><td></td></tr><tr><td>13)torch.nn.AdavtiveMaxPool1d</td><td>它用于在由多个输入平面组成的输入信号上应用一维自适应最大池化。</td><td></td></tr><tr><td>14)torch.nn.AdavtiveMaxPool2d</td><td>它用于在由多个输入平面组成的输入信号上应用2D自适应最大池化。</td><td></td></tr><tr><td>15)torch.nn.AdavtiveMaxPool3d</td><td>它用于在由多个输入平面组成的输入信号上应用3D自适应最大池化。</td><td></td></tr><tr><td>16)torch.nn.AdavtiveAvgPool1d</td><td>它用于在由多个输入平面组成的输入信号上应用一维自适应平均池。</td><td></td></tr><tr><td>17)torch.nn.AdavtiveAvgPool2d</td><td>它用于在由多个输入平面组成的输入信号上应用2D自适应平均池。</td><td></td></tr><tr><td>18)torch.nn.AdavtiveAvgPool3d</td><td>它用于在由多个输入平面组成的输入信号上应用3D自适应平均池。</td><td></td></tr></tbody></table><h4 id="2-10-填充层"><a href="#2-10-填充层" class="headerlink" title="2.10 填充层"></a>2.10 填充层</h4><table><thead><tr><th></th><th>填充层</th><th></th></tr></thead><tbody><tr><td>1)torch.nn.ReflectionPad1d</td><td>它将使用输入边界的反射填充输入张量。</td><td></td></tr><tr><td>2)torch.nn.ReflactionPad2d</td><td>它将使用输入边界的反射来填充输入张量。</td><td></td></tr><tr><td>3)torch.nn.ReplicationPad1</td><td>它将使用输入边界的复制来填充输入张量。</td><td></td></tr><tr><td>4)torch.nn.ReplicationPad2d</td><td>它将使用输入边界的复制来填充输入张量。</td><td></td></tr><tr><td>5)torch.nn.ReplicationPad3d</td><td>它将使用输入边界的复制来填充输入张量。</td><td></td></tr><tr><td>6)torch.nn.ZeroPad2d</td><td>它将用零填充输入张量边界。</td><td></td></tr><tr><td>7)torch.nn.ConstantPad1d</td><td>它将用恒定值填充输入张量边界。</td><td></td></tr><tr><td>8)torch.nn.ConstantPad2d</td><td>它将用恒定值填充输入张量边界。</td><td></td></tr><tr><td>9)torch.nn.ConstantPad3d</td><td>它将用恒定值填充输入张量边界。</td><td></td></tr></tbody></table><h4 id="2-11-RNN网络层"><a href="#2-11-RNN网络层" class="headerlink" title="2.11 RNN网络层"></a>2.11 RNN网络层</h4><table><thead><tr><th></th><th>Recurrent layers</th><th></th></tr></thead><tbody><tr><td>1)torch.nn.RNN</td><td>它用于将具有tanh或ReLU非线性的多层Elman RNN应用于输入序列。每一层为输入序列中的每个元素计算以下函数：ht = tanh(Wih xt + bih + Whh tt-1 + bhh)</td><td></td></tr><tr><td>2)Torch.nn.LSTM</td><td>它用于将多层长期短期记忆(LSTM)RNN应用于输入序列。每一层为输入序列中的每个元素计算以下功能：</td><td></td></tr><tr><td>3)GNUPyTorch</td><td>它用于将多层门控循环单元(GRU)RNN应用于输入序列。每一层为输入序列中的每个元素计算以下功能：</td><td></td></tr><tr><td>4)torch.nn.RNNCell</td><td>它用于将具有tanh或ReLU非线性的Elman RNN单元应用于输入序列。每一层为输入序列中的每个元素计算以下函数：h’= tanh(Wih x + bih + Whh h + bhh)使用ReLU代替tanh</td><td></td></tr><tr><td>5)torch.nn.LSTMCell</td><td>它用于将长短期记忆(LSTM)单元应用于输入序列。每一层为输入序列中的每个元素计算以下函数：其中σ是S型函数, 而*是Hadamard乘积。</td><td></td></tr><tr><td>6)torch.nn.GRUCell</td><td>它用于将门控循环单元(GRU)单元应用于输入序列。每一层为输入序列中的每个元素计算以下功能：</td><td></td></tr></tbody></table><h4 id="2-12-Dropout层定义"><a href="#2-12-Dropout层定义" class="headerlink" title="2.12 Dropout层定义"></a>2.12 Dropout层定义</h4><table><thead><tr><th></th><th>Dropout layers</th><th></th></tr></thead><tbody><tr><td>1)torch.nn.Dropout</td><td>它用于调节和预防神经元的共适应。培训过程中的一个因素会缩放输出。这意味着模块将在评估期间计算身份函数。</td><td></td></tr><tr><td>2)torch.nn.Dropout2d</td><td>如果要素图中的相邻像素相关, 则torch.nn.Dropout不会使激活规则化, 并且会降低有效学习率。在这种情况下, torch.nn.Dropout2d()用于促进要素图之间的独立性。</td><td></td></tr><tr><td>3)torch.nn.Dropout3d</td><td>如果要素图中的相邻像素相关, 则torch.nn.Dropout不会使激活规则化, 并且会降低有效学习率。在这种情况下, torch.nn.Dropout2d()用于促进要素图之间的独立性。</td><td></td></tr><tr><td>4)torch.nn.AlphaDropout</td><td>它用于在输入上应用Alpha Dropout。 Alpha Dropout是一种Dropout, 可以保持自规范化属性。</td><td></td></tr></tbody></table><h4 id="2-13-Sparse-layers"><a href="#2-13-Sparse-layers" class="headerlink" title="2.13 Sparse layers"></a>2.13 Sparse layers</h4><table><thead><tr><th></th><th>Sparse layers</th><th></th></tr></thead><tbody><tr><td>1)torch.nn嵌入</td><td>它用于存储单词嵌入, 并使用索引检索它们。模块的输入是索引列表, 输出是相应的词嵌入。</td><td></td></tr><tr><td>2)torch.nn.EmbeddingBag</td><td>它用于计算嵌入的”袋子”的总和或平均值, 而无需实例化中间嵌入。</td><td></td></tr></tbody></table><h4 id="2-14-距离功能"><a href="#2-14-距离功能" class="headerlink" title="2.14 距离功能"></a>2.14 距离功能</h4><table><thead><tr><th></th><th>距离功能</th><th></th></tr></thead><tbody><tr><td>1)torch.nn.Cosine相似度</td><td>它将返回x1和x2之间的余弦相似度(沿dim计算)。</td><td></td></tr><tr><td>2)torch.nn.PairwiseDistance</td><td>它使用p范数计算向量v1, v2之间的成批成对距离：</td><td></td></tr></tbody></table><h4 id="2-15-可视化层"><a href="#2-15-可视化层" class="headerlink" title="2.15 可视化层"></a>2.15 可视化层</h4><table><thead><tr><th></th><th>Vision layers</th><th></th></tr></thead><tbody><tr><td>1)torch.nn.PixelShuffle</td><td>用于将形状为(<em>, C×r2, H, W)的张量的元素重新排列为形状为(</em>, C, H×r, W, r)的张量的元素</td><td></td></tr><tr><td>2)<strong>torch.nn.Upsample</strong></td><td><strong>它用于对给定的多通道1D, 2D或3D数据进行升采样。</strong></td><td></td></tr><tr><td>3)torch.nn.upsamplingNearest2d</td><td>它用于对由多个输入通道组成的输入信号进行2D最近邻居上采样。</td><td></td></tr><tr><td>4)torch.nn.UpsamplingBilinear2d</td><td>用于将二维双线性上采样应用于由多个输入通道组成的输入信号。</td><td></td></tr></tbody></table><h4 id="2-16-并行数据层"><a href="#2-16-并行数据层" class="headerlink" title="2.16 并行数据层"></a>2.16 并行数据层</h4><table><thead><tr><th></th><th>DataParallel层(多GPU, 分布式)</th><th></th></tr></thead><tbody><tr><td>1)torch.nn.DataParallel</td><td>它用于在模块级别实现数据并行性。</td><td></td></tr><tr><td>2)torch.nn.DistributedDataParallel</td><td>它用于实现分布式数据并行性, 它基于模块级别的torch.distributed包。</td><td></td></tr><tr><td>3)torch.nn.DistributedDataParallelCPU</td><td>它用于在模块级别为CPU实现分布式数据并行性。</td><td></td></tr></tbody></table><h4 id="2-17-各种工具"><a href="#2-17-各种工具" class="headerlink" title="2.17 各种工具"></a>2.17 各种工具</h4><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>1)torch.nn.clip_grad_norm_</td><td>它用于裁剪可迭代参数的梯度范数。</td><td></td></tr><tr><td>2)torch.nn.clip_grad_value_</td><td>用于将可迭代参数的梯度范数裁剪为指定值。</td><td></td></tr><tr><td>3)torch.nn.parameters_to_vector</td><td>用于将参数转换为一个向量。</td><td></td></tr><tr><td>4)torch.nn.vector_to_parameters</td><td>它用于将一个向量转换为参数。</td><td></td></tr><tr><td>5)torch.nn.weight_norm</td><td>它用于对给定模块中的参数应用权重归一化。</td><td></td></tr><tr><td>6)torch.nn.remove_weight_norm</td><td>它用于删除模块的权重归一化和重新参数化。</td><td></td></tr><tr><td>7)torch.nn.spectral_norm</td><td>它用于将频谱归一化应用于给定模块中的参数。</td><td></td></tr><tr><td>8)torch.nn.PackedSequence</td><td>它将用于保存打包序列的数据和batch_size的列表。</td><td></td></tr><tr><td>9)torch.nn.pack_padded_sequence</td><td>它用于打包包含可变长度填充序列的Tensor。</td><td></td></tr><tr><td>10)torch.nn.pad_packed_sequence</td><td>它用于填充打包的可变长度序列批次。</td><td></td></tr><tr><td>11)torch.nn.pad_sequence</td><td>它用于填充具有填充值的可变长度张量列表。</td><td></td></tr><tr><td>12)torch.nn.pack_sequence</td><td>它用于打包可变长度张量的列表</td><td></td></tr><tr><td>13)torch.nn.remove_spectral_norm</td><td>它用于删除模块的频谱归一化和重新参数化。</td><td></td></tr></tbody></table><h4 id="2-18-tensor简介"><a href="#2-18-tensor简介" class="headerlink" title="2.18  tensor简介"></a>2.18  tensor简介</h4><p><strong>在PyTorch中，torch.Tensor是存储和变换数据的主要工具。</strong><br><strong>Tensor与Numpy的多维数组非常相似。</strong><br><strong>Tensor还提供了GPU计算和自动求梯度等更多功能，这些使Tensor更适合深度学习。****</strong></p><p>2.创建Tensor<br>2.1 直接创建一个5*3的未初始化的Tensor：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = torch.empty(5,3)</span><br></pre></td></tr></table></figure><p>2.2 创建一个5*3的随机初始化的Tensor</p><p>torch.rand：返回一个张量，包含了从区间[0,1)的均匀分布中抽取一组随机数，形状由可变参数size定义。<br>原型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">torch.rand(size,out=None,dtype=None,layout=torch.strided,device=None,</span><br><span class="line">requires_grad=False)-&gt;Tensor</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = torch.rand(5,3)</span><br></pre></td></tr></table></figure><p>torch.randn:返回一个张量，包含了从标准正态分布(Normal distribution)(均值为0，方差为1，即高斯白噪声)中抽取一组随机数，形状由可变参数sizes定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(2,3)</span><br></pre></td></tr></table></figure><p>2.3 创建全为0的Tensor(指定数据类型)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = torch.zeros(5,3,dtype=long)</span><br></pre></td></tr></table></figure><p>2.4 根据数据直接创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([5.5,3])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.5 tensor.new_ones:返回一个与size大小相同的用1填充的张量;</p><p>默认情况下，返回的Tensor具有与此张量相同的torch.dtype和torch.device;</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```</span><br><span class="line">tensor = torch.tensor((), dtype=torch.int32)</span><br><span class="line">tensor.new_ones((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tensor([[ <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>],</span><br><span class="line">[ <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>]], dtype=torch.int32)</span><br></pre></td></tr></table></figure><p>2.6 torch.rand_like：返回与输入相同大小的张量，该张量由区间[0,1)上均匀的随机数填充。</p><p>原型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">torch.rand_like(input,dtype=None,layout=None,device=None,requires_grad=False,</span><br><span class="line">memory_format=torch.preserve_format)-&gt;tensor</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>torch.rand_like(input)相当于torch.rand(input.size(),dtype=input.dtype,layout=input.layout,device=input.device)</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.rand_like(x,dtype=torch.float)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.7 torch.arange:根据（首，尾，步长）生成tensor</p><p>2.8 其余tensor的构造函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Tensor(*sizes)    基础构造函数</span><br><span class="line">ones(*sizes)      全1Tensor</span><br><span class="line">zeros(*sizes)     全0Tensor</span><br><span class="line">eye(*sizes)  对角线为1，其他为0</span><br><span class="line">arange(s,e,step)  从s到e，步长为step</span><br><span class="line">linespace(s,e,steps)  从s到e，均匀切分成steps份</span><br><span class="line">normal(mean,std)/uniform(from,to)  正态分布/均匀分布</span><br><span class="line">randperm(m)随机排列</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这些创建方法都可以在创建的时候指定数据类型dtype和存放device(cpu/gpu)</p><p>3.Tensor的操作<br>2.1 Tensor的加法操作：</p><p>加法形式一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = torch.rand(5, 3)</span><br><span class="line">y = torch.rand(5, 3)</span><br><span class="line">z = x + y</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加法形式二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">z=torch.add(x,y)</span><br><span class="line"></span><br><span class="line">result = torch.empty(5, 3)</span><br><span class="line">torch.add(x, y, out=result)</span><br></pre></td></tr></table></figure><p>加法形式三：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y.add_(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.2 Tensor的索引操作：</p><p>我们还可以使用类似Numpy的索引操作来访问Tensor的一部分。需要注意的是：索引出来的结果与原数据共享内存，也即修改一个，另一个也会跟着修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y = x[0,:]</span><br><span class="line">y += 1</span><br><span class="line">print(y)</span><br><span class="line">print(x[0,:])</span><br></pre></td></tr></table></figure><p>除了常用的索引选择数据之外，PyTorch还提供了一些高级的选择函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index_select(<span class="built_in">input</span>,dim,index)   <span class="comment">#在指定维度dim上选取过，比如选取某些行，某些列</span></span><br><span class="line">masked_select(<span class="built_in">input</span>,mask)       <span class="comment">#例子如上，a(a&gt;0),使用ByteTensor进行选取</span></span><br><span class="line">non_zero(<span class="built_in">input</span>)                 <span class="comment">#非0元素的下标</span></span><br><span class="line">gather(<span class="built_in">input</span>,dim,index)         <span class="comment">#根据index，在dim维度上选取数据，输出的size与index一样的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.Tensor数据类型的转换<br>使用独立的函数如 int(),float()等进行转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">long_tensor = tensor.long()</span><br><span class="line"></span><br><span class="line">features = features.float()</span><br></pre></td></tr></table></figure><p>使用torch.type()函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t2=t1.type(torch.FloatTensor)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用type_as()函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t3=t1.type_as(t2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>Tensor的形状修改<br>5.1 view()</li></ol><p>用view()来改变Tensor的形状：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = x.view(15)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-1所指的维度可以根据其他的维度推出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z = x.view(-1,5)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：<br>view()返回的新tensor与源tensor共享内存，实际上就是同一个tensor，也就是更改一个，另一个也会跟着改变。<br>（顾名思义，view()仅仅改变了对这个张量的观察角度）</p><p>Pytorch中的Tensor支持包含一百多种操作，包含转置，索引，切片，数学运算，线性代数，随机数等。</p><ol start="6"><li>Tensor的数据转换<br>6.1 item()</li></ol><p>作用：它可以将一个标量Tensor转换为一个Python number:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(1)</span><br><span class="line">x.item()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6.2 Tensor 转 NumPy<br>使用numpy()将Tensor转换成NumPy数组：<br>注意，这样产生的NumPy数组与Tensor共享相同的内存，改变其中一个另一个也会改变！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones(5)</span><br><span class="line">b = a.numpy() # 转为numpy</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6.3 NumPy数组转Tensor<br>使用from_numpy()将NumPy数组转换为Tensor：<br>注意，这样产生的NumPy数组与Tensor共享相同的内存，改变其中一个另一个也会改变！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.ones(5) </span><br><span class="line">b = torch.from_numpy(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li>Tensor的广播机制<br>当对两个形状不同的Tensor按元素运算时，可能会触发广播机制(broadcasting)机制：先适当复制元素使这两个Tensor形状相同后再按元素运算。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = torch.arange(1, 3).view(1,2) #[1,2]</span><br><span class="line">y =torch.arange(1, 4).view(3,1)</span><br><span class="line">print(x+y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor([[2, 3],</span><br><span class="line"> [3, 4],</span><br><span class="line"> [4, 5]])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8.tensor运算的内存开销<br>索引，view()是不会开辟新的内存的，而像y=x+y这样的运算是会开辟新的内存的，然后y指向新的内存。</p><ol start="9"><li>Tensor ON GPU<br>用方法to()可以将Tensor在CPU和GPU之间相互移动。</li></ol><p><strong>以下代码只有在PyTorch GPU版本上才会执⾏</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span>)  <span class="comment"># GPU</span></span><br><span class="line">x = torch.arange(<span class="number">1</span>, <span class="number">3</span>).view(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">y = torch.ones_like(x,device=device)  <span class="comment">#直接创建一个在GPU上的Tensor</span></span><br><span class="line"> x = x.to(device) <span class="comment"># 等价于 .to(&quot;cuda&quot;)</span></span><br><span class="line">z = x + y</span><br><span class="line"> <span class="built_in">print</span>(z)</span><br><span class="line"> <span class="built_in">print</span>(z.to(<span class="string">&quot;cpu&quot;</span>, torch.double)) <span class="comment"># to()还可以同时更改数据类型</span></span><br></pre></td></tr></table></figure><h3 id="Ski-image"><a href="#Ski-image" class="headerlink" title="Ski-image"></a>Ski-image</h3><h4 id="skimage的简介"><a href="#skimage的简介" class="headerlink" title="skimage的简介"></a>skimage的简介</h4><p>skimage即是Scikit-Image。基于python脚本语言开发的数字图片处理包，比如PIL,Pillow, opencv, scikit-image等。</p><p>PIL和Pillow只提供最基础的数字图像处理，功能有限。<br>opencv实际上是一个c++库，只是提供了python接口，更新速度非常慢。<br>scikit-image是基于scipy的一款图像处理包，它将图片作为<strong>numpy数组</strong>进行处理，正好与matlab一样，因此，我们最终选择scikit-image进行数字图像处理。</p><p>skimage包的全称是scikit-image SciKit (toolkit for SciPy) ，它对scipy.ndimage进行了扩展，提供了更多的图片处理功能。它是由python语言编写的，由scipy 社区开发和维护。<br>skimage包由许多的子模块组成，各个子模块提供不同的功能。</p><h4 id="主要子模块列表如下"><a href="#主要子模块列表如下" class="headerlink" title="主要子模块列表如下"></a>主要子模块列表如下</h4><table><thead><tr><th align="left">子模块名称</th><th align="left">主要实现功能</th></tr></thead><tbody><tr><td align="left">io</td><td align="left">读取、保存和显示图片或视频</td></tr><tr><td align="left">data</td><td align="left">提供一些测试图片和样本数据</td></tr><tr><td align="left">color</td><td align="left">颜色空间变换</td></tr><tr><td align="left">filters</td><td align="left">图像增强、边缘检测、排序滤波器、自动阈值等</td></tr><tr><td align="left">draw</td><td align="left">操作于numpy数组上的基本图形绘制，包括线条、矩形、圆和文本等</td></tr><tr><td align="left">transform</td><td align="left">几何变换或其它变换，如旋转、拉伸和拉东变换等</td></tr><tr><td align="left">morphology</td><td align="left">形态学操作，如开闭运算、骨架提取等</td></tr><tr><td align="left">exposure</td><td align="left">图片强度调整，如亮度调整、直方图均衡等</td></tr><tr><td align="left">feature</td><td align="left">特征检测与提取等</td></tr><tr><td align="left">measure</td><td align="left">图像属性的测量，如相似性或等高线等</td></tr><tr><td align="left">segmentation</td><td align="left">图像分割</td></tr><tr><td align="left">restoration</td><td align="left">图像恢复</td></tr><tr><td align="left">util</td><td align="left">通用函数</td></tr></tbody></table><h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><h4 id="NumPy-简介"><a href="#NumPy-简介" class="headerlink" title="NumPy- 简介"></a>NumPy- 简介</h4><p>NumPy 是一个 Python 包。 它代表 “Numeric Python”。 它是一个由<a href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">多维数组</a>对象和用于处理数组的例程集合组成的库。</p><p><strong>Numeric</strong>，即 NumPy 的前身，是由 Jim Hugunin 开发的。 也开发了另一个包 Numarray ，它拥有一些额外的功能。 2005年，Travis Oliphant 通过将 Numarray 的功能集成到 Numeric 包中来创建 NumPy 包。 这个开源项目有很多贡献者。</p><h4 id="NumPy-操作"><a href="#NumPy-操作" class="headerlink" title="NumPy 操作"></a>NumPy 操作</h4><p>使用NumPy，开发人员可以执行以下操作：</p><ol><li>数组的算数和逻辑运算。</li><li>傅立叶变换和用于图形操作的例程。</li><li>与线性代数有关的操作。 NumPy 拥有线性代数和随机数生成的内置函数。</li></ol><h4 id="NumPy-Ndarray-对象"><a href="#NumPy-Ndarray-对象" class="headerlink" title="NumPy - Ndarray 对象"></a>NumPy - Ndarray 对象</h4><p>NumPy 中定义的最重要的对象是称为 <code>ndarray</code> 的 N 维数组类型。 它描述相同类型的元素<a href="https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020">集合</a>。 可以使用基于零的索引访问集合中的项目。</p><p><code>ndarray</code>中的每个元素在内存中使用相同大小的块。 <code>ndarray</code>中的每个元素是数据类型对象的对象（称为 <code>dtype</code>）。</p><p>从<code>ndarray</code>对象提取的任何元素（通过切片）由一个数组标量类型的 Python 对象表示。 下图显示了<code>ndarray</code>，数据类型对象（<code>dtype</code>）和数组标量类型之间的关系。</p><p><img src="https://www.tutorialspoint.com//numpy/images/ndarray.jpg" alt="Ndarray"></p><p>它从任何暴露数组接口的对象，或从返回数组的任何方法创建一个ndarray。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.array(<span class="built_in">object</span>, dtype = <span class="literal">None</span>, copy = <span class="literal">True</span>, order = <span class="literal">None</span>, subok = <span class="literal">False</span>, ndmin = <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>上面的构造器接受以下参数：</p><table><thead><tr><th align="left">序号</th><th align="left">参数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>object</code> 任何暴露数组接口方法的对象都会返回一个数组或任何（嵌套）序列。</td></tr><tr><td align="left">2.</td><td align="left"><code>dtype</code> 数组的所需数据类型，可选。</td></tr><tr><td align="left">3.</td><td align="left"><code>copy</code> 可选，默认为<code>true</code>，对象是否被复制。</td></tr><tr><td align="left">4.</td><td align="left"><code>order</code> <code>C</code>（按行）、<code>F</code>（按列）或<code>A</code>（任意，默认）。</td></tr><tr><td align="left">5.</td><td align="left"><code>subok</code> 默认情况下，返回的数组被强制为基类数组。 如果为<code>true</code>，则返回子类。</td></tr><tr><td align="left">6.</td><td align="left"><code>ndmin</code> 指定返回数组的最小维数。</td></tr></tbody></table><h4 id="NumPy-asarray函数"><a href="#NumPy-asarray函数" class="headerlink" title="NumPy-asarray函数"></a>NumPy-asarray函数</h4><p>此函数类似于<code>numpy.array</code>，除了它有较少的参数。 这个例程对于将 Python 序列转换为<code>ndarray</code>非常有用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.asarray(a, dtype = <span class="literal">None</span>, order = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th align="left">序号</th><th align="left">参数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>a</code> 任意形式的输入参数，比如列表、列表的元组、元组、元组的元组、元组的列表</td></tr><tr><td align="left">2.</td><td align="left"><code>dtype</code> 通常，输入数据的类型会应用到返回的<code>ndarray</code></td></tr><tr><td align="left">3.</td><td align="left"><code>order</code> <code>&#39;C&#39;</code>为按行的 C 风格数组，<code>&#39;F&#39;</code>为按列的 Fortran 风格数组</td></tr></tbody></table><p>img.<a href="https://so.csdn.net/so/search?q=shape&spm=1001.2101.3001.7020">shape</a>[:2] 取彩色图片的长、宽。<br>如果img.shape[:3] 则取彩色图片的长、宽、<a href="https://so.csdn.net/so/search?q=%E9%80%9A%E9%81%93&spm=1001.2101.3001.7020">通道</a>。</p><p>关于img.shape[0]、[1]、[2]<br>img.shape[0]：图像的垂直尺寸（高度或长度）<br>img.shape[1]：图像的水平尺寸（宽度）<br>img.shape[2]：图像的通道数</p><p>在<a href="https://so.csdn.net/so/search?q=%E7%9F%A9%E9%98%B5&spm=1001.2101.3001.7020">矩阵</a>中，[0]就表示行数，[1]则表示列数。NumPy - 数据类型</p><p>NumPy 支持比 Python 更多种类的数值类型。 下表显示了 NumPy 中定义的不同标量数据类型。</p><table><thead><tr><th align="left">序号</th><th align="left">数据类型及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>bool_</code> 存储为一个字节的布尔值（真或假）</td></tr><tr><td align="left">2.</td><td align="left"><code>int_</code> 默认整数，相当于 C 的<code>long</code>，通常为<code>int32</code>或<code>int64</code></td></tr><tr><td align="left">3.</td><td align="left"><code>intc</code> 相当于 C 的<code>int</code>，通常为<code>int32</code>或<code>int64</code></td></tr><tr><td align="left">4.</td><td align="left"><code>intp</code> 用于索引的整数，相当于 C 的<code>size_t</code>，通常为<code>int32</code>或<code>int64</code></td></tr><tr><td align="left">5.</td><td align="left"><code>int8</code> 字节（-128 ~ 127）</td></tr><tr><td align="left">6.</td><td align="left"><code>int16</code> 16 位整数（-32768 ~ 32767）</td></tr><tr><td align="left">7.</td><td align="left"><code>int32</code> 32 位整数（-2147483648 ~ 2147483647）</td></tr><tr><td align="left">8.</td><td align="left"><code>int64</code> 64 位整数（-9223372036854775808 ~ 9223372036854775807）</td></tr><tr><td align="left">9.</td><td align="left"><code>uint8</code> 8 位无符号整数（0 ~ 255）</td></tr><tr><td align="left">10.</td><td align="left"><code>uint16</code> 16 位无符号整数（0 ~ 65535）</td></tr><tr><td align="left">11.</td><td align="left"><code>uint32</code> 32 位无符号整数（0 ~ 4294967295）</td></tr><tr><td align="left">12.</td><td align="left"><code>uint64</code> 64 位无符号整数（0 ~ 18446744073709551615）</td></tr><tr><td align="left">13.</td><td align="left"><code>float_</code> <code>float64</code>的简写</td></tr><tr><td align="left">14.</td><td align="left"><code>float16</code> 半精度浮点：符号位，5 位指数，10 位尾数</td></tr><tr><td align="left">15.</td><td align="left"><code>float32</code> 单精度浮点：符号位，8 位指数，23 位尾数</td></tr><tr><td align="left">16.</td><td align="left"><code>float64</code> 双精度浮点：符号位，11 位指数，52 位尾数</td></tr><tr><td align="left">17.</td><td align="left"><code>complex_</code> <code>complex128</code>的简写</td></tr><tr><td align="left">18.</td><td align="left"><code>complex64</code> 复数，由两个 32 位浮点表示（实部和虚部）</td></tr><tr><td align="left">19.</td><td align="left"><code>complex128</code> 复数，由两个 64 位浮点表示（实部和虚部）</td></tr></tbody></table><p>NumPy 数字类型是<code>dtype</code>（数据类型）对象的实例，每个对象具有唯一的特征。 这些类型可以是<code>np.bool_</code>，<code>np.float32</code>等。</p><h4 id="np-tile"><a href="#np-tile" class="headerlink" title="np.tile"></a>np.tile</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">np</span>.tile(<span class="class"><span class="keyword">data</span>,(<span class="title">x</span>,<span class="title">y</span>))</span></span><br></pre></td></tr></table></figure><p>此函数为扩展函数，data为要扩展的数据，类型为np类型<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">数组</a>，x,扩展行数，y扩展列数，如下代码测试 </p><h4 id="数据类型对象-dtype"><a href="#数据类型对象-dtype" class="headerlink" title="数据类型对象 (dtype)"></a>数据类型对象 (<code>dtype</code>)</h4><p>数据类型对象描述了对应于数组的固定内存块的解释，取决于以下方面：</p><ul><li>数据类型（整数、浮点或者 Python 对象）</li><li>数据大小</li><li>字节序（小端或大端）</li><li>在结构化类型的情况下，字段的名称，每个字段的数据类型，和每个字段占用的内存块部分。</li><li>如果数据类型是子序列，它的形状和数据类型。</li></ul><h3 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h3><p>Matplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。 它也可以和图形工具包一起使用，如 PyQt 和 wxPython。在项目中用于绘图，显示图像。</p><h4 id="pyplot简介"><a href="#pyplot简介" class="headerlink" title="pyplot简介"></a>pyplot简介</h4><p>pyplot是一个函数集合,能够让matplotlib像matlib一样工作,每一个函数都会对一个figure做出一些改变,例如,创建一个figure,在一个figure里创建一个plotting area,在plotting area里画一些线,在plot里加一些标签等<br> 在pyplot函数调用之间会保留着各种状态,比如当前figure和plotting area和当前的axes(这里的axes是指figure中axes部分,不是指数学上的axis的复数)<br> pyplot API没有面像对象API灵活,这里能看到的大部函数都是从一个Axes对象的方法,建议看文档中的例子了解它是怎么工作的<br> 用pyplot快速创建一张图</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">plt.ylabel(<span class="string">&#x27;some numbers&#x27;</span>)</span><br><span class="line">plt.<span class="keyword">show</span>()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/16406750-a8a66aed541d9e8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="img"></p><p>pyplot</p><p>为什么x轴是0-3,y轴是1-4,如果你给plot传入一个数组,plot会假设是一个y值的序列,然后自动创建相应的x值,因为python从0开始,默认的x向量与y同样长度,则x为[0,1,2,3]<br> plot是一个万能命令,它可以任意数里的参数,例如,画一个x-y二维图像,可以这样用命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt<span class="selector-class">.plot</span>(<span class="selector-attr">[1,2,3,4]</span>,<span class="selector-attr">[1,4,9,16]</span>)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/16406750-fb0188d80b4f3427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="img"></p><p>plot</p><h4 id="规定plot的形式"><a href="#规定plot的形式" class="headerlink" title="规定plot的形式"></a>规定plot的形式</h4><p>对于每个成对的x,y,还有一个可选的第三个参数,用来指定画线的颜色和类型,格式化的字母符号借鉴于matlab,你能把颜色符号与线类型连在一起,默认的格式化符号是’b-‘,就是蓝色的实线,如果你想画一个红色图点,可以</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>],<span class="string">&#x27;ro&#x27;</span>)</span><br><span class="line">plt.axis([<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">20</span>])</span><br><span class="line">plt.<span class="keyword">show</span>()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/16406750-a0204e07203c6cd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="img"></p><p>plot</p><p>plot文档里有所有的格式化参数,例子中axis()使用一个list [xmin,xmax,ymin,ymax]来指定可见范围<br> 如果matplotlib只能用lists,那对于数字处理就没什么用了.一般来讲,你可以用numpy.array,实际上,所有序列都被内部转换成numpy.array,下面的例子用不同的形式画了一些线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#evenly sampled time at 200ms intervals</span></span><br><span class="line">t = np.arange(<span class="number">0.</span>, <span class="number">5.</span>, <span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#red dashes, blue squares and green triangles</span></span><br><span class="line">plt.plot(t, t, <span class="string">&#x27;r--&#x27;</span>, t, t**<span class="number">2</span>, <span class="string">&#x27;bs&#x27;</span>, t, t**<span class="number">3</span>, <span class="string">&#x27;g^&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/16406750-75075bc85daa4794.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="img"></p><p>plot</p><h4 id="使用关键字plotting"><a href="#使用关键字plotting" class="headerlink" title="使用关键字plotting"></a>使用关键字plotting</h4><p>有一些实例,是通过字符串访问变量里的数据,例numpy.recarray,pandas.DataFrame<br> matplotlib可以让你提供一些带有关键字字典的对象,如果是这样的对象,plot可以把字符串和变量关联起来</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> = &#123;<span class="string">&#x27;a&#x27;</span>: np.arange(<span class="number">50</span>),</span><br><span class="line">        <span class="string">&#x27;c&#x27;</span>: np.random.randint(<span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>),</span><br><span class="line">        <span class="string">&#x27;d&#x27;</span>: np.random.randn(<span class="number">50</span>)&#125;</span><br><span class="line"><span class="keyword">data</span>[<span class="string">&#x27;b&#x27;</span>] = <span class="keyword">data</span>[<span class="string">&#x27;a&#x27;</span>] + <span class="number">10</span> * np.random.randn(<span class="number">50</span>)</span><br><span class="line"><span class="keyword">data</span>[<span class="string">&#x27;d&#x27;</span>] = np.abs(<span class="keyword">data</span>[<span class="string">&#x27;d&#x27;</span>]) * <span class="number">100</span></span><br><span class="line"></span><br><span class="line">plt.scatter(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, c=<span class="string">&#x27;c&#x27;</span>, s=<span class="string">&#x27;d&#x27;</span>, <span class="keyword">data</span>=<span class="keyword">data</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;entry a&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;entry b&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/16406750-0d05fd4f5ea8c4ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="img"></p><p>plot</p><p>使用分类变量做图</p><p>也可以使用分类变量做图,matlibplot有很多函数可以传入分类变量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&#x27;group_a&#x27;</span>, <span class="string">&#x27;group_b&#x27;</span>, <span class="string">&#x27;group_c&#x27;</span>]</span><br><span class="line">values = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">1</span>, figsize=(<span class="number">9</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">131</span>)</span><br><span class="line">plt.bar(names, values)</span><br><span class="line">plt.subplot(<span class="number">132</span>)</span><br><span class="line">plt.scatter(names, values)</span><br><span class="line">plt.subplot(<span class="number">133</span>)</span><br><span class="line">plt.plot(names, values)</span><br><span class="line">plt.suptitle(<span class="string">&#x27;Categorical Plotting&#x27;</span>)</span><br><span class="line">plt.<span class="keyword">show</span>()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/16406750-096048e252dd6eb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/900/format/webp" alt="img"></p><p>plot</p><h4 id="控制线属性"><a href="#控制线属性" class="headerlink" title="控制线属性"></a>控制线属性</h4><p>线有很多属性,如线宽,样式,反锯齿,有很多方式设置线的属性</p><ul><li>用关键字参数设置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y,linewidth=2.0)</span><br></pre></td></tr></table></figure><ul><li>用line2D实例的setter方法,plot会返回一列Line2D对像,例,line1,line2=plot(x1,y1,x2,y2),下面我们假设只有一条线,也就是返回的列表长度为1,我们元组拆包得到列表的第一个元素</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">line, = plt.<span class="title function_ invoke__">plot</span>(x, y, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">line.<span class="title function_ invoke__">set_antialiased</span>(False) <span class="comment"># turn off antialising</span></span><br></pre></td></tr></table></figure><ul><li>用setp命令,下面这个例子用一个matlab命令设置一条线的多个属性,setp可以传入一个或一列对象,可以使用关键字设置属性</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lines = plt.plot(x1, y1, x2, y2)</span><br><span class="line"><span class="comment">#use keyword args</span></span><br><span class="line">plt.setp(lines, color=<span class="string">&#x27;r&#x27;</span>, linewidth=2.0)</span><br><span class="line"><span class="comment">#or MATLAB style string value pairs</span></span><br><span class="line">plt.setp(lines, <span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;linewidth&#x27;</span>, 2.0)</span><br></pre></td></tr></table></figure><table><thead><tr><th>Property</th><th>Value Type</th></tr></thead><tbody><tr><td>alpha</td><td>float</td></tr><tr><td>color or c</td><td>任何matlibplot颜色</td></tr></tbody></table><p>获取可设置属性的列表,调用setp函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">69</span>]: lines = plt.<span class="title function_ invoke__">plot</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: plt.<span class="title function_ invoke__">setp</span>(lines)</span><br><span class="line">  alpha: <span class="keyword">float</span></span><br><span class="line">  animated: [True | False]</span><br><span class="line">  antialiased <span class="keyword">or</span> aa: [True | False]</span><br><span class="line">  ...snip</span><br></pre></td></tr></table></figure><h4 id="使用多个figure和axes"><a href="#使用多个figure和axes" class="headerlink" title="使用多个figure和axes"></a>使用多个figure和axes</h4><p>Matlab和pyplot,有一个当前figure和当前axes的概念,所有的plot命令都会作用在当前axes上,函数gca()返回当前axes,gcf()返回当前figure<br> 通常,你不用担心这个,因为都在内部处理了这些问题,下面是一个创建两个subplot的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(-t) * np.cos(<span class="number">2</span>*np.pi*t)</span><br><span class="line"></span><br><span class="line">t1 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.1</span>)</span><br><span class="line">t2 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.plot(t1, f(t1), <span class="string">&#x27;bo&#x27;</span>, t2, f(t2), <span class="string">&#x27;k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.plot(t2, np.cos(<span class="number">2</span>*np.pi*t2), <span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/16406750-e03992000391a66d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="img"></p><p>plot</p><p>这里的的figure()是可选的,因为默认情况自动创建了figure(1),还有如果你不指定任何subplot,会默认创建subplot(111),subplot指定行数,列数,plot序号,plot序号的范围是1到行数乘以列数.如果行列数相乘小于10,参数里的逗号是可选的,因为subplot(211)默认是指subplot(2,1,1)<br> 你可以创建任何数量的subplot和axes,如果你想用axes()命令手动指定axes位置(例如不是一个矩形),你可以用axes([left,bottom,width,height]),这里所有数都是小数(0 to1)<br> 可以多次用一个增长的数当参数调用figure()创建多个figures,当然,每个figure都包括多个subplot和axes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(<span class="number">1</span>)                <span class="comment"># the first figure</span></span><br><span class="line">plt.subplot(<span class="number">211</span>)             <span class="comment"># the first subplot in the first figure</span></span><br><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">plt.subplot(<span class="number">212</span>)             <span class="comment"># the second subplot in the first figure</span></span><br><span class="line">plt.plot([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">2</span>)                <span class="comment"># a second figure</span></span><br><span class="line">plt.plot([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])          <span class="comment"># creates a subplot(111) by default</span></span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">1</span>)                <span class="comment"># figure 1 current; subplot(212) still current</span></span><br><span class="line">plt.subplot(<span class="number">211</span>)             <span class="comment"># make subplot(211) in figure1 current</span></span><br><span class="line">plt.title(<span class="string">&#x27;Easy as 1, 2, 3&#x27;</span>) <span class="comment"># subplot 211 title</span></span><br></pre></td></tr></table></figure><p>clf()可以清除当前figure,cla()可以清除当前axes,如果你觉得内部状态不好用,你可以用弱状态的面向对象API来代替它<br> 如果你创建了多个figure,你需要注意一件事,figure是在调用close()的时候内存才被释放,删除所有figure,或用窗口管理器关闭窗口是不行的,因为pyplot在close()调用之前会有很多内部引用</p><h4 id="使用text"><a href="#使用text" class="headerlink" title="使用text"></a>使用text</h4><p>text()命令可以在任何位置填加文本,xlabel,ylabel和title可以在指定的地方填加文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mu, sigma = <span class="number">100</span>, <span class="number">15</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line"><span class="comment">#the histogram of the data</span></span><br><span class="line">n, bins, patches = plt.hist(x, <span class="number">50</span>, density=<span class="number">1</span>, facecolor=<span class="string">&#x27;g&#x27;</span>, alpha=<span class="number">0.75</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Smarts&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Probability&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Histogram of IQ&#x27;</span>)</span><br><span class="line">plt.text(<span class="number">60</span>, <span class="number">.025</span>, <span class="string">r&#x27;$\mu=100,\ \sigma=15$&#x27;</span>)</span><br><span class="line">plt.axis([<span class="number">40</span>, <span class="number">160</span>, <span class="number">0</span>, <span class="number">0.03</span>])</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/16406750-0e24a0bd9eac8169.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="img"></p><p>plot</p><p>所有的text()命令都会返回matplotlib.text.Text实例,和线段一样,你可以在函数里或者setp里用关键字参数自定义属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = plt.xlabel(<span class="string">&#x27;my data&#x27;</span>, fontsize=14, color=<span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="文本里用数学表达式"><a href="#文本里用数学表达式" class="headerlink" title="文本里用数学表达式"></a>文本里用数学表达式</h4><p>matplotlib里文本里可以用Tex方程表达式,例如,你想写sigma=15,你可以用Tex表达式,然后用$括起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.title(<span class="string">r&#x27;$\sigma_i=15$&#x27;</span>)</span><br></pre></td></tr></table></figure><p>前面的r很重要,它意味着\是字符串,不要当成python转义符,matplotlib有一个内置的Tex解析器和布局引擎,和自己的数字字体,也就是说可以在跨平台的时候不用安装Tex,如果安装了LaTex和dvipng,也可以用来做输出</p><h4 id="注释文本"><a href="#注释文本" class="headerlink" title="注释文本"></a>注释文本</h4><p>text()可以用在axes的任何位置,一个用法就是用来注释,annotate()可以很容易的提供帮助功能,有两个坐标点要考虑,xy和xytext,都是元组形式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">t = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.01</span>)</span><br><span class="line">s = np.cos(<span class="number">2</span>*np.pi*t)</span><br><span class="line">line, = plt.plot(t, s, lw=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.annotate(<span class="string">&#x27;local max&#x27;</span>, xy=(<span class="number">2</span>, <span class="number">1</span>), xytext=(<span class="number">3</span>, <span class="number">1.5</span>),</span><br><span class="line">             arrowprops=dict(facecolor=<span class="string">&#x27;black&#x27;</span>, shrink=<span class="number">0.05</span>),</span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line">plt.ylim(<span class="number">-2</span>, <span class="number">2</span>)</span><br><span class="line">plt.<span class="keyword">show</span>()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/16406750-a04eaa4ada419baf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="img"></p><h4 id="对数和其他非线性的axes"><a href="#对数和其他非线性的axes" class="headerlink" title="对数和其他非线性的axes"></a>对数和其他非线性的axes</h4><p>matplotlib不仅提供线性坐标轴刻度,而且还提供对数和分对数刻度,这种刻度对跨度很大的数据很有用,改变刻度比例很简单:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.xscale(<span class="string">&#x27;log&#x27;</span>)</span><br></pre></td></tr></table></figure><p>y轴不同刻度的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> NullFormatter  <span class="comment"># useful for `logit` scale</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fixing random state for reproducibility</span></span><br><span class="line">np.random.seed(<span class="number">19680801</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># make up some data in the interval ]0, 1[</span></span><br><span class="line">y = np.random.normal(loc=<span class="number">0.5</span>, scale=<span class="number">0.4</span>, size=<span class="number">1000</span>)</span><br><span class="line">y = y[(y &gt; <span class="number">0</span>) &amp; (y &lt; <span class="number">1</span>)]</span><br><span class="line">y.sort()</span><br><span class="line">x = np.arange(<span class="built_in">len</span>(y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot with various axes scales</span></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># linear</span></span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.yscale(<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># log</span></span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.yscale(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># symmetric log</span></span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.plot(x, y - y.mean())</span><br><span class="line">plt.yscale(<span class="string">&#x27;symlog&#x27;</span>, linthreshy=<span class="number">0.01</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;symlog&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># logit</span></span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.yscale(<span class="string">&#x27;logit&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;logit&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># Format the minor tick labels of the y-axis into empty strings with</span></span><br><span class="line"><span class="comment"># `NullFormatter`, to avoid cumbering the axis with too many labels.</span></span><br><span class="line">plt.gca().yaxis.set_minor_formatter(NullFormatter())</span><br><span class="line"><span class="comment"># Adjust the subplot layout, because the logit one may take more space</span></span><br><span class="line"><span class="comment"># than usual, due to y-tick labels like &quot;1 - 10^&#123;-3&#125;&quot;</span></span><br><span class="line">plt.subplots_adjust(top=<span class="number">0.92</span>, bottom=<span class="number">0.08</span>, left=<span class="number">0.10</span>, right=<span class="number">0.95</span>, hspace=<span class="number">0.25</span>,</span><br><span class="line">                    wspace=<span class="number">0.35</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/16406750-2ed448dea9d4e93b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="img"></p><h3 id="pillow（PIL）"><a href="#pillow（PIL）" class="headerlink" title="pillow（PIL）"></a>pillow（PIL）</h3><p>读取图片:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Image.open()</span><br></pre></td></tr></table></figure><p>array转换成image:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mage.fromarray(img)</span><br><span class="line">mage.fromarray(img)..resize((HW[<span class="number">1</span>],HW[<span class="number">0</span>])<span class="comment">#获得图片尺寸</span></span><br></pre></td></tr></table></figure><h4 id="一、使用-Image-open-创建图像实例"><a href="#一、使用-Image-open-创建图像实例" class="headerlink" title="一、使用 Image.open() 创建图像实例"></a>一、使用 Image.open() 创建图像实例</h4><p><code>Image </code>是 <code>Pillow </code>最常用的类，他可以通过多种方式创建图像实例。</p><p>“ from PIL import Image ”导入 Image 模块。然后通过 Image 类中的 open 函数即可载入图像文件, open 函数会自动判断图片格式，只需指定文件位置即可。成功，open 函数返回一个 Image 对象；载入文件失败，则会引起 IOError 异常 。</p><h4 id="1-通过文件创建-Image-对象"><a href="#1-通过文件创建-Image-对象" class="headerlink" title="1. 通过文件创建 Image 对象"></a>1. 通过文件创建 Image 对象</h4><p>通过文件创建 <code>Image </code>图像对象是最常用的方法</p><p><strong>示例：</strong>通过文件创建 Image 图像对象</p><p><img src="E:\MyBlog\public\img\PIL1.png" alt="image-20220522214824113"></p><p><strong>代码解读：</strong></p><blockquote><p>实例属性说明：<br>format 图像格式<br>size 图像的 (宽,高) 元组<br>mode 常见模式，默认 RGB 真彩图像；L 为灰阶图像；CMYK 印刷色彩；RGBA 带透明度的真彩图像；YCbCr 彩色视频格式；LAB L * a * b颜色空间；HSV 等。<br>show() 方法为使用系统默认图片查看器显示图像，一般用于调试；</p></blockquote><h4 id="2-从打开文件中读取"><a href="#2-从打开文件中读取" class="headerlink" title="2. 从打开文件中读取"></a>2. 从打开文件中读取</h4><p>可以从文件对象读取而不是文件名，但文件对象必须实现<code>read( )</code>，<code>seek( )</code> 和 <code>tell( ) </code>方法，并且是以二进制模式打开。</p><p><strong>示例：</strong>从文件对象中读取图像</p><p><img src="E:\MyBlog\public\img\PIL2.png" alt="image-20220522214840768"></p><h4 id="3-从-string-二进制流中读取"><a href="#3-从-string-二进制流中读取" class="headerlink" title="3. 从 string 二进制流中读取"></a>3. 从 string 二进制流中读取</h4><p><strong>要从字符串数据中读取图像，需使用 io 类：</strong></p><p><img src="E:\MyBlog\public\img\PIL3.png" alt="image-20220522214852602"></p><blockquote><p><strong>注意：</strong>在读取图像 header 之前将文件倒回（使用 seek(0) ）。</p></blockquote><h4 id="4-从tar文件中读取"><a href="#4-从tar文件中读取" class="headerlink" title="4. 从tar文件中读取"></a>4. 从tar文件中读取</h4><p><img src="E:\MyBlog\public\img\PIL4.png" alt="image-20220522214911541"></p><h4 id="二、读写图像"><a href="#二、读写图像" class="headerlink" title="二、读写图像"></a>二、读写图像</h4><h5 id="1-格式转换并保存图像"><a href="#1-格式转换并保存图像" class="headerlink" title="1. 格式转换并保存图像"></a>1. 格式转换并保存图像</h5><p><code>Image </code>模块中的 <code>save </code>函数可以保存图片，除非你指定文件格式，否则文件的扩展名就是文件格式。</p><p><img src="E:\MyBlog\public\img\PIL5.png" alt="image-20220522215020974"></p><blockquote><p><strong>注意：</strong> 如果你的图片mode是RGBA那么会出现异常,因为 RGBA 意思是红色，绿色，蓝色，Alpha 的色彩空间，Alpha 是指透明度。而 JPG 不支持透明度 ，所以要么丢弃Alpha , 要么保存为.png文件。解决方法将图片格式转换：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Image.<span class="built_in">open</span>(image_path).convert(<span class="string">&quot;RGB&quot;</span>).save(outfile)  <span class="comment"># convert 转换为 RGB 格式，丢弃Alpha</span></span><br></pre></td></tr></table></figure><p><code>save() </code>函数有两个参数，如果文件名没有指定图片格式，那么第二个参数是必须的，他指定图片的格式。</p><h5 id="2-创建缩略图"><a href="#2-创建缩略图" class="headerlink" title="2. 创建缩略图"></a>2. 创建缩略图</h5><p>创建缩略图 使用 <code>Image.thumbnail( size )</code>, <code>size </code>为缩略图宽长元组。</p><p><strong>示例：</strong> 创建缩略图</p><p><img src="E:\MyBlog\public\img\PIL6.png" alt="image-20220522215111572"></p><blockquote><p><strong>注意：</strong> 出现异常，同上一个示例，convert(“RGB”)转换图片mode。</p></blockquote><blockquote><p><strong>注意：</strong>除非必须，Pillow不会解码或栅格数据。当你打开文件，Pillow通过文件头确定文件格式，大小，mode等数据，余下数据直到需要时才处理。这意味着打开文件非常快速，它与文件大小和压缩格式无关。</p></blockquote><h4 id="三、剪贴，粘贴、合并图像"><a href="#三、剪贴，粘贴、合并图像" class="headerlink" title="三、剪贴，粘贴、合并图像"></a>三、剪贴，粘贴、合并图像</h4><p><code>Image</code>类包含允许您操作图像中的区域的方法。</p><p><strong>如：要从图像中复制子矩形图像使用 crop() 方法。</strong></p><h5 id="1-从图像复制子矩形"><a href="#1-从图像复制子矩形" class="headerlink" title="1. 从图像复制子矩形"></a>1. 从图像复制子矩形</h5><p><strong>示例：</strong> 截取矩形图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">box = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">region = im.crop(box)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义box元组，表示图像基于左上角为（0,0）的坐标，<code>box </code>坐标为 (左，上，右，下）。注意，坐标是基于像素。示例中为 300 * 300 像素。</p><h5 id="2-处理子矩形并将其粘贴回来"><a href="#2-处理子矩形并将其粘贴回来" class="headerlink" title="2. 处理子矩形并将其粘贴回来"></a>2. 处理子矩形并将其粘贴回来</h5><p><strong>示例：</strong> 在原图上粘贴子矩形图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">region = region.transpose(Image.ROTATE_180) <span class="comment"># 颠倒180度</span></span><br><span class="line">box = (<span class="number">400</span>, <span class="number">400</span>, <span class="number">700</span>, <span class="number">700</span>)  <span class="comment"># 粘贴位置，像素必须吻合，300 * 300</span></span><br><span class="line">im.paste(region, box)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>将子图（region） 粘贴（paste）回原图时，粘贴位置 box 的像素与宽高必须吻合。而原图和子图的 mode 不需要匹配，Pillow会自动处理。</p></blockquote><p><strong>示例：</strong>滚动图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">image, delta</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 向侧面滚动图像 &quot;&quot;&quot;</span></span><br><span class="line">    xsize, ysize = image.size</span><br><span class="line"></span><br><span class="line">    delta = delta % xsize</span><br><span class="line">    <span class="keyword">if</span> delta == <span class="number">0</span>: <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line">    part1 = image.crop((<span class="number">0</span>, <span class="number">0</span>, delta, ysize))</span><br><span class="line">    part2 = image.crop((delta, <span class="number">0</span>, xsize, ysize))</span><br><span class="line">    image.paste(part1, (xsize - delta, <span class="number">0</span>, xsize, ysize))</span><br><span class="line">    image.paste(part2, (<span class="number">0</span>, <span class="number">0</span>, xsize - delta, ysize))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    image_path = <span class="string">&#x27;test.jpg&#x27;</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    roll(im, <span class="number">300</span>).show()  <span class="comment"># 向侧面滚动 300 像素</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-分离和合并通道"><a href="#3-分离和合并通道" class="headerlink" title="3. 分离和合并通道"></a>3. 分离和合并通道</h5><p><code>Pillow </code>允许处理图像的各个通道，例如RGB图像有R、G、B三个通道。 <code>split </code>方法分离图像通道，如果图像为单通道则返回图像本身。merge 合并函数采用图像的 <code>mode </code>和 通道元组为参数，将它们合并成新图像。</p><p><strong>示例：</strong>交换RGB图像的三个波段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r, g, b = im.split()</span><br><span class="line">im = Image.merge(&quot;RGB&quot;, (b, g, r))</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>如果要处理单色系，可以先将图片转换为’RGB‘</p></blockquote><h4 id="四-几何变换"><a href="#四-几何变换" class="headerlink" title="四. 几何变换"></a>四. 几何变换</h4><p><code>PIL.Image.Image </code>包含调整图像大小<code>resize()</code>和旋转 <code>rotate() </code>的方法。前者采用元组给出新的大小，后者采用逆时针方向的角度。</p><p><strong>示例：</strong>调整大小并逆时针旋转 45度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out = im.resize((128, 128))</span><br><span class="line">out = out.rotate(45)</span><br></pre></td></tr></table></figure><p>要以90度为单位旋转图像，可以使用<code> rotate()</code> 或 <code>transpose() </code>方法。后者也可用于围绕其水平轴或垂直轴翻转图像。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">out = im.transpose(Image.FLIP_LEFT_RIGHT) # 水平左右翻转</span><br><span class="line">out = im.transpose(Image.FLIP_TOP_BOTTOM) # 垂直上下翻转</span><br><span class="line">out = im.transpose(Image.ROTATE_90) # 逆时针90度</span><br><span class="line">out = im.transpose(Image.ROTATE_180) # 逆时针180度</span><br><span class="line">out = im.transpose(Image.ROTATE_270) # 逆时针270度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>rotate() </code>和 <code>transpose()</code> 方法相同，他们之间没有差别， <code>transpose() </code>方法比较通用。</p><h4 id="五-颜色变换"><a href="#五-颜色变换" class="headerlink" title="五. 颜色变换"></a>五. 颜色变换</h4><p><strong>示例：</strong>在 <code>mode </code>之间转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">im = Image.open(&quot;hopper.ppm&quot;).convert(&quot;L&quot;) # 转换为灰阶图像</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>它支持每种模式转换为”L” 或 “RGB”，要在其他模式之间进行转换，必须先转换模式（通常为“RGB”图像）。</p></blockquote><h4 id="六-图像增强"><a href="#六-图像增强" class="headerlink" title="六. 图像增强"></a>六. 图像增强</h4><h5 id="1-Filters-过滤器"><a href="#1-Filters-过滤器" class="headerlink" title="1. Filters 过滤器"></a>1. Filters 过滤器</h5><p><code>ImageFilter </code>模块有很多预定义的增强过滤器，通过 <code>filter() </code>方法运用。</p><p><strong>示例：</strong>使用<code> filter()</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from PIL import ImageFilter</span><br><span class="line">out = im.filter(ImageFilter.DETAIL)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-像素点处理"><a href="#2-像素点处理" class="headerlink" title="2. 像素点处理"></a>2. 像素点处理</h5><p><code>point() </code>方法可用于转换图像的像素值（如对比度），在大多数情况下，可以将函数对象作为参数传递格此方法，它根据函数返回值对每个像素进行处理。</p><p><strong>示例：</strong>每个像素点扩大1.2倍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">out = im.point(lambda i: i * 1.2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述方法可以用简单的表达式进行图像处理，还可以通过组合<code>point()</code>和 <code>paste() </code>对图像的局部区域进行处理 。</p><h5 id="3-处理单独通道"><a href="#3-处理单独通道" class="headerlink" title="3. 处理单独通道"></a>3. 处理单独通道</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 将通道分离</span><br><span class="line">source = im.split()</span><br><span class="line"></span><br><span class="line">R, G, B = 0, 1, 2</span><br><span class="line"></span><br><span class="line"># 选择红色小于100的区域</span><br><span class="line">mask = source[R].point(lambda i: i &lt; 100 and 255)</span><br><span class="line"></span><br><span class="line"># 处理绿色</span><br><span class="line">out = source[G].point(lambda i: i * 0.7)</span><br><span class="line"></span><br><span class="line"># 粘贴已处理的通道，红色通道仅限于&lt;100</span><br><span class="line">source[G].paste(out, None, mask)</span><br><span class="line"></span><br><span class="line"># 合并图像</span><br><span class="line">im = Image.merge(im.mode, source)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意创建 mask 的语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imout = im.point(lambda i: expression and 255) xxxxxxxxxx imout = im.point(lambda i: expression and 255) imout ``=` `im.point(``lambda` `i: expression ``and` `255``) </span><br></pre></td></tr></table></figure><p>对于 and 逻辑判断来说，<code>expression </code>为 <code>False (0) </code>已经能证明整个表达式为 <code>False (0)</code> , 否则还有对后面的结果进行判断。所以 <code>expression </code>为 <code>False (0)</code> 返回 <code>False (0) </code>，<code>expression </code>为 True （本身的结果）是返回后面的 255；</p><p>同理对于 or 的逻辑判断，当前面的表达式为 True，返回前面的值；当前面表达式为 False，返回后面表达式的值。</p><h4 id="七、高级增强"><a href="#七、高级增强" class="headerlink" title="七、高级增强"></a>七、高级增强</h4><p>其他图像增强功能可以使用 <code>ImageEnhance </code>模块中的类。从图像创建后，可以使用 <code>ImageEnhance </code>快速调整图片的对比度、亮度、饱和度和清晰度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from PIL import ImageEnhance</span><br><span class="line"></span><br><span class="line">enh = ImageEnhance.Contrast(im)  # 创建调整对比度对象</span><br><span class="line">enh.enhance(1.3).show(&quot;增加30%对比度&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>ImageEnhance 方法类型：</strong></p><blockquote><p>ImageEnhance.Contrast(im) 对比度<br>ImageEnhance.Color(im) 色彩饱和度<br>ImageEnhance.Brightness(im) 亮度<br>ImageEnhance.Sharpness(im) 清晰度</p></blockquote><h4 id="八、-动态图像"><a href="#八、-动态图像" class="headerlink" title="八、 动态图像"></a>八、 动态图像</h4><p><code>Pillow </code>支持一些动态图像处理（如FLI/FLC，GIF等格式）。TIFF文件同样可以包含数帧图像。</p><p>打开动态图像时，PIL 会自动加载序列中的第一帧。你可以使用 <code>seek </code>和 <code>tell </code>方法在不同的帧之间移动。</p><p><strong>示例</strong>： 读取动态图像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">im = Image.open(&quot;animation.gif&quot;)</span><br><span class="line">im.seek(1) # 跳到第二帧</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    while 1:</span><br><span class="line">        im.seek(im.tell()+1)  # tell() 获取当前帧的索引号</span><br><span class="line">except EOFError: # 当读取到最后一帧时，Pillow抛出EOFError异常。</span><br><span class="line">    pass # 结束</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>有些版本的库中的驱动程序仅允许您搜索下一帧。要回放文件，您可能需要重新打开它。都遇到无法回放的库时，可以使用 for 语句循环实现。</p></blockquote><p><strong>示例</strong>：<code>for </code>使用 <code>ImageSequence Iterator </code>类遍历动态图像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from PIL import ImageSequence</span><br><span class="line">for frame in ImageSequence.Iterator(im):</span><br><span class="line">    # ...处理过程...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例：</strong>保存动态图像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">im.save(out, save_all=True, append_images=[im1, im2, ...])</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><blockquote><p>out 需要保存到那个文件<br>save_all 为True，保存图像的所有帧。否则，仅保存多帧图像的第一帧。<br>append_images 需要附加为附加帧的图像列表。列表中的每个图像可以是单帧或多帧图像（ 目前只有GIF，PDF，TIFF和WebP支持此功能）。</p></blockquote><h4 id="九、Postscript-打印"><a href="#九、Postscript-打印" class="headerlink" title="九、Postscript 打印"></a>九、Postscript 打印</h4><p><code>Pillow </code>允许通过 <code>Postscript Printer </code>在图片上添加图像或文字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">from PIL import PSDraw</span><br><span class="line"></span><br><span class="line">im = Image.open(&quot;test.jpg&quot;)</span><br><span class="line">title = &quot;hopper&quot;</span><br><span class="line">box = (1*72, 2*72, 7*72, 10*72) # in points</span><br><span class="line"></span><br><span class="line">ps = PSDraw.PSDraw() # 默认 sys.stdout</span><br><span class="line">ps.begin_document(title)</span><br><span class="line"></span><br><span class="line"># 画出图像 (75 dpi)</span><br><span class="line">ps.image(box, im, 75)</span><br><span class="line">ps.rectangle(box)</span><br><span class="line"></span><br><span class="line"># 画出标题</span><br><span class="line">ps.setfont(&quot;HelveticaNarrow-Bold&quot;, 36)</span><br><span class="line">ps.text((3*72, 4*72), title)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="十、配置加载器-draft"><a href="#十、配置加载器-draft" class="headerlink" title="十、配置加载器 draft"></a>十、配置加载器 draft</h4><p>某些解码器允许在从文件中读取图像时对其进行操作。这通常可用于创建缩略图时（当速度比质量更重要）加速解码并打印到单色激光打印机（仅需灰阶图像时）。</p><p><code>draft() </code>方法操作已打开但尚未加载的图像，使其尽可能匹配给定的模式和大小。它通过重新配置图像解码器来完成。仅适用于JPEG和<code>MPO</code>文件。</p><p><strong>示例：</strong>使用 <code>draft() </code>快速解码图像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">im = Image.open(&#x27;test.jpg&#x27;)</span><br><span class="line">print(&quot;original =&quot;, im.mode, im.size)</span><br><span class="line"></span><br><span class="line">im.draft(&quot;L&quot;, (100, 100))</span><br><span class="line">print(&quot;draft =&quot;, im.mode, im.size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">original = RGB (1920, 1200)</span><br><span class="line">draft = L (240, 150)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 生成的图像与请求的模式和大小可能不完全匹配。要确保图像不大于给定大小，需改用缩略图方法。</p><h3 id="argparse"><a href="#argparse" class="headerlink" title="argparse"></a>argparse</h3><p>argparse是python内置的一个用于命令项选项与参数解析的模块。<br> 主要有三个步骤：<br> 1- 创建 ArgumentParser() 对象；<br> 2- 调用 add_argyment() 方法添加参数；<br> 3- 使用 parse_args() 解析添加的参数。</p><p><strong>add_argument()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArgumentParser.add_argument(name <span class="keyword">or</span> flags...[, action][, nargs][, const][, default]</span><br><span class="line">                            [, <span class="built_in">type</span>][, choices][, required][, <span class="built_in">help</span>][,metavar][, dest])</span><br></pre></td></tr></table></figure><ul><li>name or flags：选项字符串的名字或者列表，例如foo 或者 -f, -foo；</li><li>action：命令行遇到参数时的动作，默认值是store。store_const表示赋值为const；append表示将遇到的值存储成列表，也就是如果参数重复则会保存多个值；append_const表示将参数规范中定义的一个值保存到一个列表；count表示存储遇到的次数；此外也可以继承argparse.Action自定义参数解析；</li><li>nargs：应该读取的命令行参数个数，可以是具体的数字，或者是？号，当不指定值时对于Positional argument使用default，对于Optional argument使用const；或者是*号，表示0或多个参数；或者是+号，表示1或多个参数；</li><li>const：一个在action和nargs选项所需的常量值；</li><li>default：不指定参数时的默认值；</li><li>type：命令行参数应该被转换成的类型；</li><li>choices：参数可允许的值的一个容器；</li><li>required：可选参数是否可以省略（仅针对可选参数）；</li><li>help：参数的帮助信息，当指定为argparse.SUPPRESS时表示不显示该参数的帮助信息；</li><li>metavar：在usage说明中的参数名称，对于必选参数默认就是参数名称（即上面的name or flags），对于可选参数默认是全大写的参数名称；</li><li>dest：parse_args()方法返回的对象所添加的属性的名称。默认情况下，对于可选参数选取最长的名称，中划线转换为下划线。</li></ul><h2 id="图像着色系统的理论支持——计算机图形学、图像处理技术与人工智能的结合"><a href="#图像着色系统的理论支持——计算机图形学、图像处理技术与人工智能的结合" class="headerlink" title="图像着色系统的理论支持——计算机图形学、图像处理技术与人工智能的结合"></a>图像着色系统的理论支持——计算机图形学、图像处理技术与人工智能的结合</h2><h3 id="图像归一化处理"><a href="#图像归一化处理" class="headerlink" title="图像归一化处理"></a>图像归一化处理</h3><p>1.什么是归一化？<br>归一化，Normalization,是指将在一定范围内的数值集合转换为0～1范围内。归一化的目的是控制输入向量的数值范围，不能过大或者过小。因为复杂程序运行本身已经非常耗时，如果数值过大，运行速度会更慢。<br>2.归一化的方法<br>归一化经常经常采用的是</p><p><strong>最大最小值归一化</strong></p><p><img src="E:\MyBlog\public\img\归一化.png" alt="image-20220522220605716"></p><p>x’为归一化之后的数值，x为需要归一化处理的数值</p><p><img src="E:\MyBlog\public\img\归一化1.png" alt="image-20220522220615200"></p><p><strong>Z-score归一化</strong></p><p>Z-score给予原始数据的均值（mean）和标准差（standard deviation）进行数据的归一化，公式如下，意义为数值距离均值有几个标准差，当E(Z)=0，SD(Z)=1，即均值为0，标准差为1，则表示经过处理后的数据符合标准正态分布。</p><p><img src="E:\MyBlog\public\img\归一化2.png" alt="image-20220522220715037"></p><p>该方法适用大多数类型的数据，但是它是一种中心化方法，会改变原有数据的分布结构，同样也不适用于稀疏数据的处理。</p><p><img src="E:\MyBlog\public\img\归一化3.png" alt="image-20220522220723615"></p><p><strong>3.图像归一化处理</strong><br>输入图像每个像素值范围是0到255之间的数值，对于计算机来说这个数值太大了，所以像素值归一化处理一般是将像素值除以255，得到0到1之间的数值来进行计算。<strong>在项目中，为了防止图像处理后数值过大，导致程序运行出错，或栈空间不足，所以我们这里也对图像就行了一个规范化处理。</strong></p><h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3><p><img src="E:\MyBlog\public\img\卷积4.jpg" alt="img"></p><p><strong>积操作其实就是每次取一个特定大小的矩阵<img src="https://www.zhihu.com/equation?tex=F" alt="[公式]">（蓝色矩阵中的阴影部分），然后将其对输入<img src="https://www.zhihu.com/equation?tex=X" alt="[公式]">（图中蓝色矩阵）依次扫描并进行内积的运算过程。</strong>可以看到，阴影部分每移动一个位置就会计算得到一个卷积值（绿色矩阵中的阴影部分），当<img src="https://www.zhihu.com/equation?tex=F" alt="[公式]">扫描完成后就得到了整个卷积后的结果<img src="https://www.zhihu.com/equation?tex=Y" alt="[公式]">（绿色矩阵）。</p><p>同时，我们将这个特定大小的矩阵<img src="https://www.zhihu.com/equation?tex=F" alt="[公式]">称为<strong>卷积核</strong>，即convolutional kernel或kernel或filter或detector，它可以是一个也可以是多个；将卷积后的结果<img src="https://www.zhihu.com/equation?tex=Y" alt="[公式]">称为<strong>特征图</strong>，即feature map，并且每一个卷积核卷积后都会得到一个对应的特征图；最后，对于输入<img src="https://www.zhihu.com/equation?tex=X" alt="[公式]">的形状，都会用三个维度来进行表示，即宽（width），高（high）和通道（channel）。例如图1中输入<img src="https://www.zhihu.com/equation?tex=X" alt="[公式]">的形状为<code>[7,7,1]</code>。</p><h4 id="多卷积核"><a href="#多卷积核" class="headerlink" title="多卷积核"></a><strong>多卷积核</strong></h4><p>注意，在上面笔者提到了卷积核的个数还可以是多个，那我们为什么需要多个卷积核进行卷积呢？在<strong>上一篇文章</strong>中我们介绍到：<strong>对于一个卷积核，可以认为其具有识别某一类元素（特征）的能力</strong>；而对于一些复杂的数据来说，仅仅只是通过一类特征来进行辨识往往是不够的。因此，通常来说我们都会通过多个不同的卷积核来对输入进行特征提取得到多个特征图，然再输入到后续的网络中。</p><p><img src="E:\MyBlog\public\img\卷积5.jpg" alt="img"></p><p>图 2. 多卷积核卷积图</p><p>如图2所示，对于同一个输入，通过两个不同的卷积核对其进行卷积特征提取，最后便能得到两个不同的特征图。从图2右边的特征图可以发现，上面的特征图在锐利度方面明显会强于下面的特征图。当然，这也是使用多卷积核进行卷积的意义，探测到多种特征属性以有利于后续的下游任务。</p><h4 id="卷积的计算"><a href="#卷积的计算" class="headerlink" title="卷积的计算"></a><strong>卷积的计算</strong></h4><p>到此为止， 对于卷积的原理和意义就算是交待完了，并且通过这些动态图片的展示，我们也有了更为直观的了解。但所谓数无形时少直觉，形少数时难入微。因此，下面我们就以单通道（灰度图）和三通道的输入来实际计算一下整个卷积的过程。</p><h4 id="单通道单卷积核"><a href="#单通道单卷积核" class="headerlink" title="单通道单卷积核"></a><strong>单通道单卷积核</strong></h4><p>如图3所示，现在有一张形状为<code>[5,5,1]</code>的灰度图，我们需要用图3右边的卷积核对其进行卷积处理，同时再考虑到偏置的作用。那么其计算过程是怎么样的呢？</p><p><img src="E:\MyBlog\public\img\卷积6.jpg" alt="img">图 3. 输入与卷积</p><p>如图4所示，右边为卷积后的特征图（feature map），左边为卷积核对输入图片左上放进行卷积时的示意图。因此，对于这个部分的计算过程有：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cunderbrace%7B1%5Ccdot0+2%5Ccdot0+0%5Ccdot1-1%5Ccdot0+1%5Ccdot1+0%5Ccdot1+2%5Ccdot1-1%5Ccdot0-2%5Ccdot1%7D_%7Bkernel%7D%5Cunderbrace%7B%5C;%5C;+1%5C;%5C;%7D_%7Bbias%7D=2%5C;%5C;%5C;%5C;%5C;%5C;%5C;%5C;%5C;%5C;%5C;(1)+%5C%5C" alt="[公式]"></p><p><img src="E:\MyBlog\public\img\卷积7.jpg" alt="img">图 4. 单通道单卷积（一）</p><p>同理，对于最右下角部分卷积计算过程有：</p><p><img src="https://www.zhihu.com/equation?tex=2%5Ccdot0+1%5Ccdot0+0%5Ccdot1+0%5Ccdot0+0%5Ccdot1+0%5Ccdot1-1%5Ccdot1+0%5Ccdot0-0%5Ccdot1+1=0%5C;%5C;%5C;%5C;%5C;%5C;%5C;%5C;%5C;%5C;%5C;(2)+%5C%5C" alt="[公式]"></p><p><img src="E:\MyBlog\public\img\卷积8.jpg" alt="img">图 5. 单通道单卷积（二）</p><p>因此，对于最后卷积的结果，我们得到的将是一个如图5右边所示形状为<code>[3,3,1]</code>的特征图。到此我们就把单通道单卷积的计算过程介绍完了。下面我们再来看单通道多卷积核的例子。</p><h4 id="单通道多卷积核"><a href="#单通道多卷积核" class="headerlink" title="单通道多卷积核"></a><strong>单通道多卷积核</strong></h4><p>如图6所示，左边依旧为输入矩阵，我们现在要用右边所示的两个卷积核对其进行卷积处理。</p><p><img src="E:\MyBlog\public\img\卷积9.jpg" alt="img"></p><p>图 6. 单通道多卷积（一）</p><p>同时可以看到，图6中右边的第一个卷积核就是图3里的卷积核，其结果也就是图5中计算得到的结果。对于旁边的卷积核，其计算过程如图7所示：</p><p><img src="E:\MyBlog\public\img\卷积10.jpg" alt="img">图 7. 单通道多卷积（二）</p><p>最后我们便能得到如图8右边所示的，形状为<code>[3,3,2]</code>的卷积特征图，其中2表示两个特征通道。</p><p><img src="E:\MyBlog\public\img\卷积11.jpg" alt="img">图 8. 单通道多卷积结果</p><p>到此，对于单通道的卷积计算过程就介绍完了。但通常情况下，我们遇到得更多的就是对多通道的输入进行卷积处理，例如包含有RGB三个通道的彩色图片等。接下来，笔者就开始介绍多通道的卷积计算过程。</p><h4 id="多通道单卷积核"><a href="#多通道单卷积核" class="headerlink" title="多通道单卷积核"></a><strong>多通道单卷积核</strong></h4><p>对于多通道的卷积过程，总体上还是还是同之前的一样，都是每次选取特定位置上的神经元进行卷积，然后依次移动直到卷积结束。下面我们先来看看多通道单卷积核的计算过程。</p><p><img src="E:\MyBlog\public\img\卷积12.jpg" alt="img">图 9. 多通道单卷积输入</p><p>如图9所示，左边为包含有三个通道的输入，右边为一个卷积核和一个偏置。<strong>注意，强调一下右边的仅仅只是一个卷积核，不是三个</strong>。笔者看到不少人在这个地方都会搞错。因为输入是三个通道，所以在进行卷积的时候，对应的每一个卷积核都必须要有三个通道才能进行卷积。下面我们就来看看具体的计算过程。</p><p><img src="E:\MyBlog\public\img\卷积3.jpg" alt="img">图 10. 多通道单卷积核图</p><p>如图10所示，右边为卷积后的特征图（feature map），左边为一个三通道的卷积核对输入图片左上放进行卷积时的示意图。因此，对于这个部分的计算过程有：</p><p><img src="E:\MyBlog\public\img\逆卷积公式.svg" alt="[公式]"></p><p>同理，对于其它部分的卷积计算过程也类似于上述计算步骤。由此我们便能得到如图10右边所示卷积后的形状为<code>[3,3,1]</code>的特征图。</p><h4 id="多通道多卷积核"><a href="#多通道多卷积核" class="headerlink" title="多通道多卷积核"></a><strong>多通道多卷积核</strong></h4><p>在介绍完多通道单卷积核的计算过程后，我们再来看看多通道多卷积核的计算过程。</p><p><img src="E:\MyBlog\public\img\卷积2.jpg" alt="img">图 11. 多通道多卷积核图</p><p>如图11所示，左边依旧为输入矩阵，我们现在要用右边所示的<strong>两个卷积核</strong>对其进行卷积处理。同时可以看到，第一个卷积核就是图9中所示的卷积核，其结果如图10所示。对于第二个卷积核，其计算过程也和式子<img src="https://www.zhihu.com/equation?tex=(3)" alt="[公式]">类似，都是将每个通道上的卷积结果进行相加，最后再加上偏置。因此，最后我们便能得到如图12右边所示的，形状为<code>[3,3,2]</code>的卷积特征图，其中2表示两个特征通道。</p><p><img src="E:\MyBlog\public\img\卷积1.jpg" alt="img">图 12. 多通道多卷积核结果图</p><p>同时，从上面单通道卷积核多通道卷积的计算过程可以发现：</p><p>（1）原始输入有多少个通道，其对应的<strong>一个卷积核</strong>就必须要有多少个通道，这样才能与输入进行匹配，也才能完成卷积操作。换句话说，如果输入数据的形状为<code>[n,n,c]</code>，那么对应每个卷积核的通道数也必须为<code>c</code>。</p><p>（2）用<code>k</code>个卷积核对输入进行卷积处理，那么最后得到的特征图一定就会包含有<code>k</code>个通道。例如，输入为<code>[n,n,c]</code>，且用<code>k</code>个卷积核对其进行卷积，则卷积核的形状必定为<code>[w1,w2,c,k]</code>，最终得到的特征图形状必定为<code>[h1,h2,k]</code>；其中<code>w1,w2</code>为卷积核的宽度，<code>h1,h2</code>为卷积后特征图的宽度。</p><h4 id="为什么需要深度卷积"><a href="#为什么需要深度卷积" class="headerlink" title="为什么需要深度卷积"></a><strong>为什么需要深度卷积</strong></h4><p>所谓深度卷积就是卷积之后再卷积，然后再卷积。卷积的次数可以是几次，也可以是几十次、甚至可以是几百次。因此，在全连接网络中我们可以通过更深的隐藏层来获取到更高级和更抽象的特征，以此来提高下游任务的精度。因此，采用深度卷积也是处于同样的目的。</p><h3 id="逆卷积"><a href="#逆卷积" class="headerlink" title="逆卷积"></a>逆卷积</h3><p>核心原理<br><img src="C:\Users\exia\AppData\Roaming\Typora\typora-user-images\image-20220522223526149.png" alt="image-20220522223526149"></p><p>最基本的形式</p><p><img src="E:\MyBlog\public\img\逆卷积5.gif" alt="img"></p><p>如果加入了stride呢？<br><img src="E:\MyBlog\public\img\逆卷积6.png" alt="image-20220522223402713"></p><p><img src="E:\MyBlog\public\img\逆卷积4.gif" alt="img"></p><p>如果加入了padding呢？</p><p><img src="E:\MyBlog\public\img\逆卷积3.png" alt="image-20220522223314572"></p><p><img src="E:\MyBlog\public\img\逆卷积2.gif" alt="img"></p><p>如果是最一般的形式，即既有padding，又有stride呢？<br><img src="E:\MyBlog\public\img\逆卷积.png" alt="image-20220522223242129"></p><h3 id="空洞卷积（Dilated-Convolution）"><a href="#空洞卷积（Dilated-Convolution）" class="headerlink" title="空洞卷积（Dilated Convolution）"></a>空洞卷积（Dilated Convolution）</h3><p><strong>简介</strong><br>空洞卷积也叫扩张卷积或者膨胀卷积，简单来说就是在卷积核元素之间加入一些空格(零)来扩大卷积核的过程。</p><p>空洞卷积的简单原理。下图是常规卷积和空洞卷积的动图对比：</p><p>常规卷积:</p><p><img src="E:\MyBlog\public\img\空洞卷积7.png" alt="image-20220522221806559"></p><p>空洞卷积:</p><p><img src="E:\MyBlog\public\img\空洞卷积6.png" alt="image-20220522221818309"></p><p>假设以一个变量a来衡量空洞卷积的扩张系数，则加入空洞之后的实际卷积核尺寸与原始卷积核尺寸之间的关系：K = K + (k-1)(a-1)</p><p>其中k为原始卷积核大小，a为卷积扩张率(dilation rate)，K为经过扩展后实际卷积核大小。除此之外，空洞卷积的卷积方式跟常规卷积一样。我们用一个扩展率a来表示卷积核扩张的程度。比如说a=1,2,4的时候卷积核核感受野如下图所示：</p><p><img src="E:\MyBlog\public\img\空洞卷积5.png" alt="image-20220522221830388"></p><p>在这张图像中，3×3 的红点表示经过卷积后，输出图像是 3×3 像素。尽管所有这三个扩张卷积的输出都是同一尺寸，但模型观察到的感受野有很大的不同。当a=1，原始卷积核size为3 * 3，就是常规卷积。a=2时，加入空洞之后的卷积核：size=3+(3-1) * (2-1)=5，对应的感受野可计算为：(2 ^(a+2))-1=7。a=3时，卷积核size可以变化到3+(3-1)(4-1)=9，感受野则增长到 (2 ^(a+2))-1=15。有趣的是，与这些操作相关的参数的数量是相等的。我们「观察」更大的感受野不会有额外的成本。因此，扩张卷积可用于廉价地增大输出单元的感受野，而不会增大其核大小，这在多个扩张卷积彼此堆叠时尤其有效。</p><p>论文《Multi-scale context aggregation by dilated convolutions》的作者用多个扩张卷积层构建了一个网络，其中扩张率 a 每层都按指数增大。由此，有效的感受野大小随层而指数增长，而参数的数量仅线性增长。这篇论文中扩张卷积的作用是系统性地聚合多个比例的形境信息，而不丢失分辨率。这篇论文表明其提出的模块能够提升那时候（2016 年）的当前最佳形义分割系统的准确度。请参阅论文了解更多信息。</p><p>为什么要增大感受野？<br>这里涉及到语义分割的一些发展历程，之前FCN率先提出以全卷积方式来处理像素级别的分割任务时，包括后来奠定语义分割baseline地位的U-Net，网络结构中存在大量的池化层来进行下采样，大量使用池化层的结果就是损失掉了一些信息，在解码上采样重建分辨率的时候肯定会有影响。特别是对于多目标、小物体的语义分割问题，以U-Net为代表的分割模型一直存在着精度瓶颈的问题。而基于增大感受野的动机背景下就提出了以空洞卷积为重大创新的deeplab系列分割网络。如下图所示：</p><p><img src="E:\MyBlog\public\img\空洞卷积4.png" alt="image-20220522221852291"></p><p>如何计算CNN的感受野<br>感受野(Receptive Field)是CNN中最重要的基础概念之一。深入理解感受野对于一些任务的网络结构设计和优化有着重要意义，比如语义分割模型的空洞卷积，其中就涉及到对感受野的深刻理解。</p><p>所谓感受野，是指输出特征图上某个像素对应到输入空间中的区域范围。所以感受野可以理解为特征图像素到输入区域的映射。 先来回顾一个从输入到特征图的计算过程：</p><p><img src="E:\MyBlog\public\img\空洞卷积3.png" alt="image-20220522221902462"></p><p>其中n_in为输入size，p为padding大小，f为卷积核size，s为卷积步长。假设输入大小为5 * 5，f=3 * 3，padding为1 * 1，卷积步长为2 * 2，那么输出特征图size根据公式可计算为3 * 3。如下图所示：</p><p><img src="C:\Users\exia\AppData\Roaming\Typora\typora-user-images\image-20220522221913628.png" alt="image-20220522221913628"></p><p>然后我们继续对3 * 3的特征图执行卷积，卷积参数同第一次卷积一样，可得输出特征图size为2 * 2。我们把输入、两次卷积过程和对应特征图放到一起看一下：</p><p><img src="E:\MyBlog\public\img\空洞卷积1.png" alt="image-20220522221929373"></p><p>可以看到两次卷积的特征图分别对应到输入空间的感受野大小，第一次卷积对应关系如图中绿色线条所示，感受野大小为3 * 3，第二次卷积对应关系如图中黄色线条所示，感受野大小为7 * 7。所以关键问题是特征图和输入空间的对应关系中，感受野的大小是如何计算的？</p><p>下面我们给出感受野大小的计算公式：</p><p><img src="E:\MyBlog\public\img\空洞卷积2.png" alt="image-20220522221939176"></p><p>其中RF_l+1为当前特征图对应的感受野大小，也就是我们要计算的目标感受野，RF_l为上一层特征图对应的感受野大小，f_l+1为当前卷积层卷积核大小，最后一项连乘项则表示之前卷积层的步长乘积。</p><p>根据感受野的计算公式我们来看上图中两次卷积的感受野计算过程：</p><p>原始输入size为5 * 5，第一层卷积核为3 * 3，输入步长为1，输入层初始化感受野为1 * 1，根据公式计算可得第一层卷积后的特征图对应的输入空间的感受野大小为1+(3-1) * 1=3。</p><p>第一层卷积输出特征图的感受野size为3，第二层卷积核size为3，卷积步长为2，则第二层的的感受野size计算为3+(3-1) * 2 * 1=7。所以我们可以看到当前层特征图的感受野大小对应到输入空间与前层的感受野和卷积步长以及当前层的卷积核大小密切相关。当步长大于1时，感受野的大小会呈现指数级增长。</p><p><img src="E:\MyBlog\public\img\空洞卷积.png" alt="image-20220522221951383"></p><p>注意： 感受野还有一点比较重要的是，对于一个卷积特征图而言，感受野中每个像素并不是同等重要的，越接近感受野中间的像素相对而言就越重要。</p><p>空洞卷积主要有三个作用：<br>扩大感受野。但需要明确一点，池化也可以扩大感受野，但空间分辨率降低了，相比之下，空洞卷积可以在扩大感受野的同时不丢失分辨率，且保持像素的相对空间位置不变。简单而言，空洞卷积可以同时控制感受野和分辨率。</p><p>获取多尺度上下文信息。当多个带有不同dilation rate的空洞卷积核叠加时，不同的感受野会带来多尺度信息，这对于分割任务是非常重要的。</p><p>可以降低计算量，不需要引入额外的参数，如上图空洞卷积示意图所示，实际卷积时只有带有红点的元素真正进行计算。</p><h3 id="RGB与LAB颜色空间的转换"><a href="#RGB与LAB颜色空间的转换" class="headerlink" title="RGB与LAB颜色空间的转换"></a>RGB与LAB颜色空间的转换</h3><h4 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h4><p>   RGB颜色空间是一种大的分类，具体而言RGB空间还包含多种空间，其中sRGB是HP和Microsoft联合制定的标准RGB空间，除此之外还有Adobe RGB，Apple RGB，ColorMatch RGB等等，他们通过不同的方式表示RGB三种颜色，使得它们具有不同的色彩宽度。<br>   计算机色彩显示器显示色彩的原理与彩色电视机一样，都是采用R、G、B相加混色的原理，通过发射出三种不同强度的电子束，使屏幕内侧覆盖的红、绿、蓝磷光材料发光而产生色彩的。这种色彩的表示方法称为RGB色彩空间表示。在多媒体计算机技术中，用的最多的是RGB色彩空间表示。<br>   根据三基色原理，用基色光单位来表示光的量，则在RGB色彩空间，任意色光F都可以用 RGB三色不同分量的相加混合而成：<br><img src="E:\MyBlog\public\img\rgb公式.png" alt="image-20220522222128214"></p><p>  我们可知自然界中任何一种色光都可由R、G、B三基色按不同的比例相加混合而成，当三基色分量都为0（最弱）时混合为黑色光；当三基色分量都为k（最强）时混合为白色光。任意色彩F是这个立方体坐标中的一点，调整三色系数r、g、b中的任一系数都会改变F的坐标值，也即改变了F的色值。RGB色彩空间采用物理三基色表示，因而物理意义很清楚，适合彩色显象管工作。然而这一体制并不适应人的视觉特点。因而，产生了其它不同的色彩空间表示法。</p><p><img src="E:\MyBlog\public\img\rgb.png" alt="image-20220522222138104"></p><h4 id="LAB"><a href="#LAB" class="headerlink" title="LAB"></a>LAB</h4><p>  RGB模式是一种发光屏幕的加色模式，CMYK模式是一种颜色反光的印刷减色模式。而Lab模式既不依赖光线，也不依赖于颜料，它是CIE组织确定的一个理论上包括了人眼可以看见的所有色彩的色彩模式。Lab模式弥补了RGB和CMYK两种色彩模式的不足。<br>　　Lab模式由三个通道组成，但不是R、G、B通道。它的一个通道是亮度，即L，取值范围是[0,100],表示从纯黑到纯白。另外两个是色彩通道，用A和B来表示。A通道包括的颜色是从深绿色（底亮度值）到灰色（中亮度值）再到亮粉红色（高亮度值），取值范围是[127,-128]；B通道则是从亮蓝色（底亮度值）到灰色（中亮度值）再到黄色（高亮度值），取值范围是[127,-128]。因此，这种色彩混合后将产生明亮的色彩。<br>　　Lab模式所定义的色彩最多，且与光线及设备无关</p><p>用处</p><p><img src="E:\MyBlog\public\img\LAB.png" alt="image-20220522224357912"></p><p>  在 Adobe Photoshop图像处理软件中，TIFF格式文件中，PDF文档中，都可以见到Lab颜色空间的身影。而在计算机视觉中，尤其是颜色识别相关的算法设计中，rgb,hsv,lab颜色空间混用更是常用的方法。</p><h3 id="pre-trained模型的使用"><a href="#pre-trained模型的使用" class="headerlink" title="pre-trained模型的使用"></a>pre-trained模型的使用</h3><p>预训练的模型通过将其权重和偏差矩阵传递给新模型来共享他们的学习成果。</p><ol><li>当数据集小的时候：</li></ol><p>A、相似度高：如果训练数据和pretrained <a href="https://so.csdn.net/so/search?q=model&spm=1001.2101.3001.7020">model</a>所用的数据相似度较高的时候，我们不需要从头造轮子，只需要修改最后的输出的softmax即可，采用已经训练好的结构来提取特征。</p><p>B、相似度低：如果训练数据和pretrained model所用的数据相似度较低，假设网络一共有n层，我们可以冻结预训练模型中的前k个层中的权重，然后重新训练后面的n-k个层，并修改最后一层的<a href="https://so.csdn.net/so/search?q=%E5%88%86%E7%B1%BB%E5%99%A8&spm=1001.2101.3001.7020">分类器</a>的输出类即可。因为数据的相似度不高，重新训练的过程就变得非常关键。而新数据集大小的不足，则是通过冻结预训练模型的前k层进行弥补。（相似度不高的时候重新训练是很有必要的，而冻结前K层的原因是为了弥补训练数据量不充足，当然了数据量不足可以采取数据增强方法，比如：对称，旋转，随机切，扭曲等等）</p><p>2.当<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E9%9B%86&spm=1001.2101.3001.7020">数据集</a>大的时候：</p><p>A、相似度高：这个是非常好也非常难得的情况，此时只要采用pretrained模型不需要改变任何参数即可，即保持模型原有的结构和初始权重不变，随后在新数据集的基础上重新训练。</p><p>B、相似度低：因为我们有一个很大的数据集，所以神经网络的训练过程将会比较有效率。然而，因为实际数据与预训练模型的训练数据之间存在很大差异，采用预训练模型将不会是一种高效的方式。因此最好的方法还是将预处理模型中的权重全都初始化后在新数据集的基础上重头开始训练。</p><h3 id="网络训练的流程"><a href="#网络训练的流程" class="headerlink" title="网络训练的流程"></a>网络训练的流程</h3><p>网络的训练过程如下：</p><p>选定训练组，从样本集中分别随机地寻求N个样本作为训练组；</p><p>将各权值、阈值，置成小的接近于0的随机值，并初始化精度控制参数和学习率；</p><p>从训练组中取一个输入模式加到网络，并给出它的目标输出向量；</p><p>计算出中间层输出向量，计算出网络的实际输出向量；</p><p>将输出向量中的元素与目标向量中的元素进行比较，计算出输出误差；对于中间层的隐单元也需要计算出误差；</p><p>依次计算出各权值的调整量和阈值的调整量；</p><p>调整权值和调整阈值；</p><p>当经历M后，判断指标是否满足精度要求，如果不满足，则返回(3)，继续迭代；如果满足就进入下一步；</p><p>训练结束，将权值和阈值保存在文件中。这时可以认为各个权值已经达到稳定，分类器已经形成。再一次进行训练，直接从文件导出权值和阈值进行训练，不需要进行初始化。<br>可参考：<a href="https://blog.csdn.net/jiaoyangwm/article/details/80011656?spm=1001.2014.3001.5506">卷积神经网络超详细介绍</a></p><h3 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h3><p>1、二维最大池化</p><p>返回滑动窗口中的最大值</p><p><img src="E:\MyBlog\public\img\池化.png" alt="image-20220522221613200"></p><p>2、填充、步幅、和多个通道</p><p>池化层与卷积层类似，都具有填充和步幅；</p><p>没有可学习的参数；</p><p>在每个输入通道应用池化层以获得相应的输出通道；</p><p>输出通道数=输入通道数；</p><p>3、平均池化层</p><p>最大池化层：每个窗口中最强的模式信号</p><p>平均池化层：将最大池化层中的最大操作替换为平均；</p><p>4、总结</p><p>池化层返回窗口中最大或平均值；</p><p>缓解卷积层对位置的敏感性；</p><p>同样有窗口大小、填充和步幅作为超参数。</p><h3 id="自监督介绍"><a href="#自监督介绍" class="headerlink" title="自监督介绍"></a>自监督介绍</h3><p>一句话总结，传统的<a href="https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6&spm=1001.2101.3001.7020">深度</a>学习需要大量的人工标注数据，自监督学习通过pretext task（前置任务）学习数据内部分布，生成伪标签来训练模型，打破了标签数据的局限，更接近人工智能的本质。预测图像的颜色，本质是学习图像的语义特征。</p><p>为什么这么说，就是站在人类认知的角度，我们为什么看到一张参天大树的图像，可以判断它是直立的？因为我们知道天空和地面的上下位置关系，树的常见状态我们也知道，所以我们能不假思索地判断出来。预测图片拼图和上色也是一样，我们学习到了图像的语义特征信息。而自监督学习可以不需要人为的标签标注，也是充分学习了图像的内部数据的结果。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h4 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h4><p>对一个Gray的图片建立到RGB的映射模型是一个比较复杂的回归问题，且效果难以把控。所以这里提出使用Lab颜色空间作为整个模型的映射机制，由于Lab将色彩信息放置在ab两个通道的特性，而L通道仅保存亮度等信息，这些信息可以从Gray图直接得到。</p><p>这就是说模型的输入是Lab中L通道的矩阵，目标是一个ab两通道的二层矩阵，建立的是从L向ab的映射关系。</p><p>当得到ab通道的信息再组合上L通道信息即得到彩色的Lab图片，而Lab图片到RGB图片的转换是固定的，也就是说，得到了期待的彩色RGB图片。</p><h4 id="前期优化"><a href="#前期优化" class="headerlink" title="前期优化"></a>前期优化</h4><p>那么，对训练过程中的一张图片，得到它的L信息很容易，得到ab信息也很容易，但是Lab色彩空间有个很大的问题就是其中包含了很多人类不可见的色彩，这些色彩是干扰模型预测的要素。在此，提出来一种新的思路，选取数据集中常见的色彩，组成ab值对，作为ab通道的信息。</p><p>实验证明，这种思路很成功，最后一共得到了313个常用值对信息。这就是说，预测的目标变为了一个值对或者313个值对的概率分布，原来复杂的回归变成了一个简单不少的分类问题。</p><p>当然，这里有一个问题，那就是训练时对于每个RGB图片（转为Lab图片），如何得到其目标的ab值对？这里使用了5近邻搜索法得到像素点的ab值对。</p><h4 id="后续处理"><a href="#后续处理" class="headerlink" title="后续处理"></a>后续处理</h4><p>得到了313个ab值对的颜色概率，如何将其映射回ab通道的色彩呢，在尝试了平均法和分立法之后（前者上色过于融合后者过于分界），使用兼有两种要求的模拟退火搜索法得到ab两个通道的矩阵。</p><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p>事实上，优化函数的研究这些年已经有了很大的发展，Adam已经可以满足本项目的需求了，但是在尝试使用分类经典的交叉熵函数时发现训练的模型上色均比较暗淡，这是因为imagenet数据集的图片普遍比较背景暗淡，为了产生比较鲜艳的色彩，提出了加上颜色再平衡系数的交叉熵函数，训练的模型效果得以改善。</p><h4 id="模型构建"><a href="#模型构建" class="headerlink" title="模型构建"></a>模型构建</h4><p>本项目模型构建基于Keras Function API（TensorFlow后端），训练与Tesla T4 16G GPU。模型提供于Github，可以使用Netron可视化h5模型。修改的交叉熵函数可见于脚本目录下的loss_function.py文件。</p><h4 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a>创新点</h4><p>由于图像的颜色具有多模态性质，即一张图像的颜色可以有多种可能，因此<strong>文章不是重建图像颜色，而是预测图像颜色</strong>。</p><p>（用灰度图中物体的纹理、语义等信息作为线索，来预测可能的上色，最后的上色结果只要真实即可。这不仅降低了上色的难度，而且也符合人们的认知）颜色预测是一个多模的问题，一个物体本来就可以上不同的颜色。对这种多模性建模，为各个像素预测一个颜色的分布，这可以鼓励探索颜色的多样性，而不仅仅局限在某一种颜色中。人的目标只是优化预测结果和真实图片（ground truth）间的欧氏距离（即MSE）（L2范式），这种损失函数会把所有的颜色求平均（因为颜色具有多模态），从而导致颜色饱和度不高，色彩不丰富。</p><p>我们的基本思路，就是通过前向encoder+ 反向decoder+ab概率分布预测的网络结构</p><p>代码的模型我们主要模仿的是以下思路编写的：</p><p><img src="C:\Users\exia\AppData\Roaming\Typora\typora-user-images\image-20220522223833755.png" alt="image-20220522223833755"></p><p>也就是读取图像后，经过一系列卷积，细化图像的精读，增加鲁棒性，接着再通过逆卷积，将图像进行还原，归一化，及统一规格后，将原本rgb颜色空间变为lab空间后，我们通过训练，得到一个深度预测ab通道普遍试用而稳定的权重等参数，构成模型，利用模型为图像着色。</p><h2 id="代码解说"><a href="#代码解说" class="headerlink" title="代码解说"></a>代码解说</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#__init__.py：</span><br><span class="line"># 定义并初始化网络，在初始化方法中引入父类初始化方法</span><br><span class="line">from .base_color import *</span><br><span class="line">from .eccvmodel import *</span><br><span class="line">from .siggraph17 import *</span><br><span class="line">from .util import *</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#base_color.py：</span><br><span class="line"></span><br><span class="line">import torch</span><br><span class="line">#在这里我们开始训练数据集，做图像处理中归一化处理，限制在一定范围内，防止数据过大，方便处理，增加鲁棒性</span><br><span class="line"></span><br><span class="line">from torch import nn</span><br><span class="line">#继承nn.Module,自定义网络模型，也可以根据需求对经典模型进行调整，他们都继承共同的抽象类nn.Module,其中包含好了很多函数。</span><br><span class="line">class BaseColor(nn.Module):</span><br><span class="line"># self相当于java，c++的this</span><br><span class="line">def __init__(self):</span><br><span class="line">#继承构造函数</span><br><span class="line">#super() 函数是用于调用父类(超类)的一个方法</span><br><span class="line">super(BaseColor, self).__init__()</span><br><span class="line"></span><br><span class="line">self.l_cent = 50.#中心</span><br><span class="line">self.l_norm = 100.#原灰度图归一化</span><br><span class="line">self.ab_norm = 110.#预测的彩色，图片进行归一化</span><br><span class="line"></span><br><span class="line">def normalize_l(self, in_l):</span><br><span class="line">return (in_l-self.l_cent)/self.l_norm</span><br><span class="line"></span><br><span class="line">def unnormalize_l(self, in_l):</span><br><span class="line">return in_l*self.l_norm + self.l_cent</span><br><span class="line"></span><br><span class="line">def normalize_ab(self, in_ab):</span><br><span class="line">return in_ab/self.ab_norm</span><br><span class="line"></span><br><span class="line">def unnormalize_ab(self, in_ab):</span><br><span class="line">return in_ab*self.ab_norm</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">#神经网络模型1</span><br><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">import numpy as np</span><br><span class="line">from IPython import embed</span><br><span class="line"></span><br><span class="line">from .base_color import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义网络结构，一共有8层conv网络层</span><br><span class="line"># 每一层conv都有二维卷积块和relu块，最后以BatchNorm layer结束</span><br><span class="line">class ECCVGenerator(BaseColor):</span><br><span class="line">    #nn.BatchNorm2d()</span><br><span class="line">    # 卷积层之后总会添加BatchNorm2d进行数据的归一化处理，这使得数据在进行Relu之前不会因为数据过大而导致网络性能的不稳定。</span><br><span class="line">    def __init__(self, norm_layer=nn.BatchNorm2d):</span><br><span class="line">        super(ECCVGenerator, self).__init__()</span><br><span class="line"></span><br><span class="line">        model1=[nn.Conv2d(1, 64, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model1+=[nn.ReLU(True),]</span><br><span class="line">        model1+=[nn.Conv2d(64, 64, kernel_size=3, stride=2, padding=1, bias=True),]</span><br><span class="line">        model1+=[nn.ReLU(True),]</span><br><span class="line">        model1+=[norm_layer(64),]</span><br><span class="line"></span><br><span class="line">        model2=[nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model2+=[nn.ReLU(True),]</span><br><span class="line">        model2+=[nn.Conv2d(128, 128, kernel_size=3, stride=2, padding=1, bias=True),]</span><br><span class="line">        model2+=[nn.ReLU(True),]</span><br><span class="line">        model2+=[norm_layer(128),]</span><br><span class="line"></span><br><span class="line">        model3=[nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model3+=[nn.ReLU(True),]</span><br><span class="line">        model3+=[nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model3+=[nn.ReLU(True),]</span><br><span class="line">        model3+=[nn.Conv2d(256, 256, kernel_size=3, stride=2, padding=1, bias=True),]</span><br><span class="line">        model3+=[nn.ReLU(True),]</span><br><span class="line">        model3+=[norm_layer(256),]</span><br><span class="line"></span><br><span class="line">        model4=[nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model4+=[nn.ReLU(True),]</span><br><span class="line">        model4+=[nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model4+=[nn.ReLU(True),]</span><br><span class="line">        model4+=[nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model4+=[nn.ReLU(True),]</span><br><span class="line">        model4+=[norm_layer(512),]</span><br><span class="line">        # 第5层和第6层dilation=2，采用了空洞卷积</span><br><span class="line">        model5=[nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, bias=True),]</span><br><span class="line">        model5+=[nn.ReLU(True),]</span><br><span class="line">        model5+=[nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, bias=True),]</span><br><span class="line">        model5+=[nn.ReLU(True),]</span><br><span class="line">        model5+=[nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, bias=True),]</span><br><span class="line">        model5+=[nn.ReLU(True),]</span><br><span class="line">        model5+=[norm_layer(512),]</span><br><span class="line"></span><br><span class="line">        model6=[nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, bias=True),]</span><br><span class="line">        model6+=[nn.ReLU(True),]</span><br><span class="line">        model6+=[nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, bias=True),]</span><br><span class="line">        model6+=[nn.ReLU(True),]</span><br><span class="line">        model6+=[nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, bias=True),]</span><br><span class="line">        model6+=[nn.ReLU(True),]</span><br><span class="line">        model6+=[norm_layer(512),]</span><br><span class="line"></span><br><span class="line">        model7=[nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model7+=[nn.ReLU(True),]</span><br><span class="line">        model7+=[nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model7+=[nn.ReLU(True),]</span><br><span class="line">        model7+=[nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model7+=[nn.ReLU(True),]</span><br><span class="line">        model7+=[norm_layer(512),]</span><br><span class="line">        #ConvTranspose2d，逆卷积操作，步长(Stride)，还原成原图</span><br><span class="line">        model8=[nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias=True),]</span><br><span class="line">        model8+=[nn.ReLU(True),]</span><br><span class="line">        model8+=[nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model8+=[nn.ReLU(True),]</span><br><span class="line">        model8+=[nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model8+=[nn.ReLU(True),]</span><br><span class="line">        # 最后一层对应到图中红色的方块区域，256到313的量化分布</span><br><span class="line">        model8+=[nn.Conv2d(256, 313, kernel_size=1, stride=1, padding=0, bias=True),]</span><br><span class="line"></span><br><span class="line">        self.model1 = nn.Sequential(*model1)</span><br><span class="line">        self.model2 = nn.Sequential(*model2)</span><br><span class="line">        self.model3 = nn.Sequential(*model3)</span><br><span class="line">        self.model4 = nn.Sequential(*model4)</span><br><span class="line">        self.model5 = nn.Sequential(*model5)</span><br><span class="line">        self.model6 = nn.Sequential(*model6)</span><br><span class="line">        self.model7 = nn.Sequential(*model7)</span><br><span class="line">        self.model8 = nn.Sequential(*model8)</span><br><span class="line"></span><br><span class="line">        self.softmax = nn.Softmax(dim=1)</span><br><span class="line">        # 输出层，将313的输入通道转为2的输出通道，返回ab的通道</span><br><span class="line">        self.model_out = nn.Conv2d(313, 2, kernel_size=1, padding=0, dilation=1, stride=1, bias=False)</span><br><span class="line">        # 上采样层，线性4倍空间大小上采样</span><br><span class="line">        # （论文原话）分辨率的所有更改都是通过转换块之间的空间下采样或上采样实现的</span><br><span class="line">        self.upsample4 = nn.Upsample(scale_factor=4, mode=&#x27;bilinear&#x27;)</span><br><span class="line"></span><br><span class="line">    # 前向传递搭建网络层，输入input_l（输入的灰度图像L通道）</span><br><span class="line">    def forward(self, input_l):</span><br><span class="line">        # 输入的L通道经过归一化后输入CONV1层</span><br><span class="line">        conv1_2 = self.model1(self.normalize_l(input_l))</span><br><span class="line">        conv2_2 = self.model2(conv1_2)</span><br><span class="line">        conv3_3 = self.model3(conv2_2)</span><br><span class="line">        conv4_3 = self.model4(conv3_3)</span><br><span class="line">        conv5_3 = self.model5(conv4_3)</span><br><span class="line">        conv6_3 = self.model6(conv5_3)</span><br><span class="line">        conv7_3 = self.model7(conv6_3)</span><br><span class="line">        conv8_3 = self.model8(conv7_3)</span><br><span class="line">        # ECCVGenerator的输出结果是第8层CONV的softmax的输出层计算结果</span><br><span class="line">        # 返回的（应该是）ab的通道预测概率</span><br><span class="line">        out_reg = self.model_out(self.softmax(conv8_3))</span><br><span class="line">        # 返回的是ab颜色的值</span><br><span class="line">        return self.unnormalize_ab(self.upsample4(out_reg))</span><br><span class="line"></span><br><span class="line">def eccv16(pretrained=True):</span><br><span class="line">model = ECCVGenerator()</span><br><span class="line">if(pretrained):</span><br><span class="line">import torch.utils.model_zoo as model_zoo</span><br><span class="line">model.load_state_dict(model_zoo.load_url(&#x27;https://colorizers.s3.us-east-2.amazonaws.com/colorization_release_v2-9b330a0b.pth&#x27;,map_location=&#x27;cpu&#x27;,check_hash=True))</span><br><span class="line">return model</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">#siggraphmodel.py：</span><br><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">from .base_color import *</span><br><span class="line"></span><br><span class="line">class SIGGRAPHGenerator(BaseColor):</span><br><span class="line">    def __init__(self, norm_layer=nn.BatchNorm2d, classes=529):</span><br><span class="line">        super(SIGGRAPHGenerator, self).__init__()</span><br><span class="line"></span><br><span class="line">        # Conv1</span><br><span class="line">        model1=[nn.Conv2d(4, 64, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model1+=[nn.ReLU(True),]</span><br><span class="line">        model1+=[nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model1+=[nn.ReLU(True),]</span><br><span class="line">        model1+=[norm_layer(64),]</span><br><span class="line">        # add a subsampling operation</span><br><span class="line"></span><br><span class="line">        # Conv2</span><br><span class="line">        model2=[nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model2+=[nn.ReLU(True),]</span><br><span class="line">        model2+=[nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model2+=[nn.ReLU(True),]</span><br><span class="line">        model2+=[norm_layer(128),]</span><br><span class="line">        # add a subsampling layer operation</span><br><span class="line"></span><br><span class="line">        # Conv3</span><br><span class="line">        model3=[nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model3+=[nn.ReLU(True),]</span><br><span class="line">        model3+=[nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model3+=[nn.ReLU(True),]</span><br><span class="line">        model3+=[nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model3+=[nn.ReLU(True),]</span><br><span class="line">        model3+=[norm_layer(256),]</span><br><span class="line">        # add a subsampling layer operation</span><br><span class="line"></span><br><span class="line">        # Conv4</span><br><span class="line">        model4=[nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model4+=[nn.ReLU(True),]</span><br><span class="line">        model4+=[nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model4+=[nn.ReLU(True),]</span><br><span class="line">        model4+=[nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model4+=[nn.ReLU(True),]</span><br><span class="line">        model4+=[norm_layer(512),]</span><br><span class="line"></span><br><span class="line">        # Conv5</span><br><span class="line">        model5=[nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, bias=True),]</span><br><span class="line">        model5+=[nn.ReLU(True),]</span><br><span class="line">        model5+=[nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, bias=True),]</span><br><span class="line">        model5+=[nn.ReLU(True),]</span><br><span class="line">        model5+=[nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, bias=True),]</span><br><span class="line">        model5+=[nn.ReLU(True),]</span><br><span class="line">        model5+=[norm_layer(512),]</span><br><span class="line"></span><br><span class="line">        # Conv6</span><br><span class="line">        model6=[nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, bias=True),]</span><br><span class="line">        model6+=[nn.ReLU(True),]</span><br><span class="line">        model6+=[nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, bias=True),]</span><br><span class="line">        model6+=[nn.ReLU(True),]</span><br><span class="line">        model6+=[nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, bias=True),]</span><br><span class="line">        model6+=[nn.ReLU(True),]</span><br><span class="line">        model6+=[norm_layer(512),]</span><br><span class="line"></span><br><span class="line">        # Conv7</span><br><span class="line">        model7=[nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model7+=[nn.ReLU(True),]</span><br><span class="line">        model7+=[nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model7+=[nn.ReLU(True),]</span><br><span class="line">        model7+=[nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model7+=[nn.ReLU(True),]</span><br><span class="line">        model7+=[norm_layer(512),]</span><br><span class="line"></span><br><span class="line">        # Conv7</span><br><span class="line">        model8up=[nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias=True)]</span><br><span class="line">        model3short8=[nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line"></span><br><span class="line">        model8=[nn.ReLU(True),]</span><br><span class="line">        model8+=[nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model8+=[nn.ReLU(True),]</span><br><span class="line">        model8+=[nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model8+=[nn.ReLU(True),]</span><br><span class="line">        model8+=[norm_layer(256),]</span><br><span class="line"></span><br><span class="line">        # Conv9</span><br><span class="line">        model9up=[nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1, bias=True),]</span><br><span class="line">        model2short9=[nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        # add the two feature maps above        </span><br><span class="line"></span><br><span class="line">        model9=[nn.ReLU(True),]</span><br><span class="line">        model9+=[nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        model9+=[nn.ReLU(True),]</span><br><span class="line">        model9+=[norm_layer(128),]</span><br><span class="line"></span><br><span class="line">        # Conv10</span><br><span class="line">        model10up=[nn.ConvTranspose2d(128, 128, kernel_size=4, stride=2, padding=1, bias=True),]</span><br><span class="line">        model1short10=[nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=True),]</span><br><span class="line">        # add the two feature maps above</span><br><span class="line"></span><br><span class="line">        model10=[nn.ReLU(True),]</span><br><span class="line">        model10+=[nn.Conv2d(128, 128, kernel_size=3, dilation=1, stride=1, padding=1, bias=True),]</span><br><span class="line">        model10+=[nn.LeakyReLU(negative_slope=.2),]</span><br><span class="line"></span><br><span class="line">        # classification output</span><br><span class="line">        model_class=[nn.Conv2d(256, classes, kernel_size=1, padding=0, dilation=1, stride=1, bias=True),]</span><br><span class="line"></span><br><span class="line">        # regression output</span><br><span class="line">        model_out=[nn.Conv2d(128, 2, kernel_size=1, padding=0, dilation=1, stride=1, bias=True),]</span><br><span class="line">        model_out+=[nn.Tanh()]</span><br><span class="line"></span><br><span class="line">        self.model1 = nn.Sequential(*model1)</span><br><span class="line">        self.model2 = nn.Sequential(*model2)</span><br><span class="line">        self.model3 = nn.Sequential(*model3)</span><br><span class="line">        self.model4 = nn.Sequential(*model4)</span><br><span class="line">        self.model5 = nn.Sequential(*model5)</span><br><span class="line">        self.model6 = nn.Sequential(*model6)</span><br><span class="line">        self.model7 = nn.Sequential(*model7)</span><br><span class="line">        self.model8up = nn.Sequential(*model8up)</span><br><span class="line">        self.model8 = nn.Sequential(*model8)</span><br><span class="line">        self.model9up = nn.Sequential(*model9up)</span><br><span class="line">        self.model9 = nn.Sequential(*model9)</span><br><span class="line">        self.model10up = nn.Sequential(*model10up)</span><br><span class="line">        self.model10 = nn.Sequential(*model10)</span><br><span class="line">        self.model3short8 = nn.Sequential(*model3short8)</span><br><span class="line">        self.model2short9 = nn.Sequential(*model2short9)</span><br><span class="line">        self.model1short10 = nn.Sequential(*model1short10)</span><br><span class="line"></span><br><span class="line">        self.model_class = nn.Sequential(*model_class)</span><br><span class="line">        self.model_out = nn.Sequential(*model_out)</span><br><span class="line"></span><br><span class="line">        self.upsample4 = nn.Sequential(*[nn.Upsample(scale_factor=4, mode=&#x27;bilinear&#x27;),])</span><br><span class="line">        self.softmax = nn.Sequential(*[nn.Softmax(dim=1),])</span><br><span class="line"></span><br><span class="line">    def forward(self, input_A, input_B=None, mask_B=None):</span><br><span class="line">        if(input_B is None):</span><br><span class="line">            input_B = torch.cat((input_A*0, input_A*0), dim=1)</span><br><span class="line">        if(mask_B is None):</span><br><span class="line">            mask_B = input_A*0</span><br><span class="line"></span><br><span class="line">        conv1_2 = self.model1(torch.cat((self.normalize_l(input_A),self.normalize_ab(input_B),mask_B),dim=1))</span><br><span class="line">        conv2_2 = self.model2(conv1_2[:,:,::2,::2])</span><br><span class="line">        conv3_3 = self.model3(conv2_2[:,:,::2,::2])</span><br><span class="line">        conv4_3 = self.model4(conv3_3[:,:,::2,::2])</span><br><span class="line">        conv5_3 = self.model5(conv4_3)</span><br><span class="line">        conv6_3 = self.model6(conv5_3)</span><br><span class="line">        conv7_3 = self.model7(conv6_3)</span><br><span class="line"></span><br><span class="line">        conv8_up = self.model8up(conv7_3) + self.model3short8(conv3_3)</span><br><span class="line">        conv8_3 = self.model8(conv8_up)</span><br><span class="line">        conv9_up = self.model9up(conv8_3) + self.model2short9(conv2_2)</span><br><span class="line">        conv9_3 = self.model9(conv9_up)</span><br><span class="line">        conv10_up = self.model10up(conv9_3) + self.model1short10(conv1_2)</span><br><span class="line">        conv10_2 = self.model10(conv10_up)</span><br><span class="line">        out_reg = self.model_out(conv10_2)</span><br><span class="line"></span><br><span class="line">        conv9_up = self.model9up(conv8_3) + self.model2short9(conv2_2)</span><br><span class="line">        conv9_3 = self.model9(conv9_up)</span><br><span class="line">        conv10_up = self.model10up(conv9_3) + self.model1short10(conv1_2)</span><br><span class="line">        conv10_2 = self.model10(conv10_up)</span><br><span class="line">        out_reg = self.model_out(conv10_2)</span><br><span class="line"></span><br><span class="line">        return self.unnormalize_ab(out_reg)</span><br><span class="line"></span><br><span class="line">def siggraph17(pretrained=True):</span><br><span class="line">    model = SIGGRAPHGenerator()</span><br><span class="line">  #下载模型</span><br><span class="line">    if(pretrained):</span><br><span class="line">        import torch.utils.model_zoo as model_zoo</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(&#x27;https://colorizers.s3.us-east-2.amazonaws.com/siggraph17-df00044c.pth&#x27;,map_location=&#x27;cpu&#x27;,check_hash=True))</span><br><span class="line">    return model</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#util.py：</span><br><span class="line">#处理图像的类PIL，数据处理的numpy，PIL和Pillow只提供最基础的数字图像处理，功能有限。</span><br><span class="line">#opencv实际上是一个c++库，只是提供了python接口，更新速度非常慢。</span><br><span class="line">#scikit-image是基于scipy的一款图像处理包，它将图片作为numpy数组进行处理，正好与matlab一样，因此，我们最终选择scikit-image进行数字图像处理。</span><br><span class="line">#进行图像规格的统一及通道的转换</span><br><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line">from skimage import color</span><br><span class="line">import torch</span><br><span class="line">import torch.nn.functional as F</span><br><span class="line">from IPython import embed</span><br><span class="line">#载入图片</span><br><span class="line">def load_img(img_path):</span><br><span class="line">out_np = np.asarray(Image.open(img_path))</span><br><span class="line">if(out_np.ndim==2):</span><br><span class="line">out_np = np.tile(out_np[:,:,None],3)</span><br><span class="line">return out_np</span><br><span class="line">#先把图片尺寸进行修改，转换为256*256</span><br><span class="line">#当数据源是ndarray时，array仍然会copy出一个副本，占用新的内存，但asarray不会。resample重采样</span><br><span class="line">def resize_img(img, HW=(256,256), resample=3):</span><br><span class="line">return np.asarray(Image.fromarray(img).resize((HW[1],HW[0]), resample=resample))</span><br><span class="line">#图片规格定为HW,尺寸为256*256，将数据转换成Tensor，便于模型使用</span><br><span class="line">def preprocess_img(img_rgb_orig, HW=(256,256), resample=3):</span><br><span class="line"># return original size L and resized L as torch Tensors</span><br><span class="line">img_rgb_rs = resize_img(img_rgb_orig, HW=HW, resample=resample)</span><br><span class="line">#将rgb图片转换为lab形式。用于之后预测ab通道</span><br><span class="line">img_lab_orig = color.rgb2lab(img_rgb_orig)</span><br><span class="line">img_lab_rs = color.rgb2lab(img_rgb_rs)</span><br><span class="line"></span><br><span class="line">img_l_orig = img_lab_orig[:,:,0]</span><br><span class="line">img_l_rs = img_lab_rs[:,:,0]</span><br><span class="line"></span><br><span class="line">tens_orig_l = torch.Tensor(img_l_orig)[None,None,:,:]</span><br><span class="line">tens_rs_l = torch.Tensor(img_l_rs)[None,None,:,:]</span><br><span class="line"></span><br><span class="line">return (tens_orig_l, tens_rs_l)</span><br><span class="line"></span><br><span class="line">def postprocess_tens(tens_orig_l, out_ab, mode=&#x27;bilinear&#x27;):</span><br><span class="line"># tens_orig_l 1 x 1 x H_orig x W_orig</span><br><span class="line"># out_ab 1 x 2 x H x W</span><br><span class="line">#取彩色图片的长、宽。</span><br><span class="line">HW_orig = tens_orig_l.shape[2:]</span><br><span class="line">HW = out_ab.shape[2:]</span><br><span class="line"></span><br><span class="line"># call resize function if needed</span><br><span class="line">#上采样算法: nearest, linear, bilinear, trilinear, area.默认为</span><br><span class="line">#nearest.如果采样后图像的长宽发生变化，我们将图像填充成采样后的图像尺寸</span><br><span class="line">if(HW_orig[0]!=HW[0] or HW_orig[1]!=HW[1]):</span><br><span class="line">out_ab_orig = F.interpolate(out_ab, size=HW_orig, mode=&#x27;bilinear&#x27;)</span><br><span class="line">else:</span><br><span class="line">out_ab_orig = out_ab</span><br><span class="line"># torch.cat的功能是将多个tensor类型矩阵的连接</span><br><span class="line">out_lab_orig = torch.cat((tens_orig_l, out_ab_orig), dim=1)</span><br><span class="line">#a.data.cpu().numpy()把tensor转换成numpy的格式</span><br><span class="line">return color.lab2rgb(out_lab_orig.data.cpu().numpy()[0,...].transpose((1,2,0)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#demo_release.py：</span><br><span class="line"></span><br><span class="line">import argparse</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">from colorizers import *</span><br><span class="line">#导入图像</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(&#x27;-i&#x27;,&#x27;--img_path&#x27;, type=str, default=&#x27;imgs/ansel_adams2.jpg&#x27;)</span><br><span class="line">parser.add_argument(&#x27;--use_gpu&#x27;, action=&#x27;store_true&#x27;, help=&#x27;whether to use GPU&#x27;)</span><br><span class="line">parser.add_argument(&#x27;-o&#x27;,&#x27;--save_prefix&#x27;, type=str, default=&#x27;saved&#x27;, help=&#x27;will save into this file with &#123;eccv16.png, siggraph17.png&#125; suffixes&#x27;)</span><br><span class="line">opt = parser.parse_args()</span><br><span class="line"></span><br><span class="line"># 载入着色，预训练的模型通过将其权重和偏差矩阵传递给新模型，eval() 函数用来执行一个字符串表达式,并返回表达式的值。</span><br><span class="line">colorizer_eccv16 = eccv16(pretrained=True).eval()</span><br><span class="line">colorizer_siggraph17 = siggraph17(pretrained=True).eval()</span><br><span class="line">#如果使用gpu加载，用cuda运算方法，提高运算效率</span><br><span class="line">if(opt.use_gpu):</span><br><span class="line">colorizer_eccv16.cuda()</span><br><span class="line">colorizer_siggraph17.cuda()</span><br><span class="line"></span><br><span class="line"># 默认将要被处理的图像尺寸为 256x256</span><br><span class="line"># grab L channel in both original ( &quot;orig&quot;) and resized (&quot;rs&quot;) resolutions</span><br><span class="line"># 在原始图像和调整大小和调整尺寸后的图像分别抓取L通道</span><br><span class="line"></span><br><span class="line">img = load_img(opt.img_path)</span><br><span class="line">(tens_l_orig, tens_l_rs) = preprocess_img(img, HW=(256,256))</span><br><span class="line">if(opt.use_gpu):</span><br><span class="line">tens_l_rs = tens_l_rs.cuda()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 着色器输出256×256 ab映射</span><br><span class="line"></span><br><span class="line"># #调整大小并连接到原来的L通道</span><br><span class="line">img_bw = postprocess_tens(tens_l_orig, torch.cat((0*tens_l_orig,0*tens_l_orig),dim=1))</span><br><span class="line">out_img_eccv16 = postprocess_tens(tens_l_orig, colorizer_eccv16(tens_l_rs).cpu())</span><br><span class="line">out_img_siggraph17 = postprocess_tens(tens_l_orig, colorizer_siggraph17(tens_l_rs).cpu())</span><br><span class="line">#保存输出图像</span><br><span class="line">plt.imsave(&#x27;%s_eccv16.png&#x27;%opt.save_prefix, out_img_eccv16)</span><br><span class="line">plt.imsave(&#x27;%s_siggraph17.png&#x27;%opt.save_prefix, out_img_siggraph17)</span><br><span class="line">#绘图，创建自定义图像，绘制子图</span><br><span class="line">plt.figure(figsize=(12,8))</span><br><span class="line">plt.subplot(2,2,1)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.title(&#x27;Original&#x27;)</span><br><span class="line">plt.axis(&#x27;off&#x27;)</span><br><span class="line"></span><br><span class="line">plt.subplot(2,2,2)</span><br><span class="line">plt.imshow(img_bw)</span><br><span class="line">plt.title(&#x27;Input&#x27;)</span><br><span class="line">plt.axis(&#x27;off&#x27;)</span><br><span class="line"></span><br><span class="line">plt.subplot(2,2,3)</span><br><span class="line">plt.imshow(out_img_eccv16)</span><br><span class="line">plt.title(&#x27;Output (ECCV 16)&#x27;)</span><br><span class="line">plt.axis(&#x27;off&#x27;)</span><br><span class="line"></span><br><span class="line">plt.subplot(2,2,4)</span><br><span class="line">plt.imshow(out_img_siggraph17)</span><br><span class="line">plt.title(&#x27;Output (SIGGRAPH 17)&#x27;)</span><br><span class="line">plt.axis(&#x27;off&#x27;)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>图例：</strong></p><p><img src="E:\MyBlog\public\img\图例.png" alt="image-20220522224801712"></p><h2 id="导入已训练的模型"><a href="#导入已训练的模型" class="headerlink" title="导入已训练的模型"></a><strong>导入已训练的模型</strong></h2><p><strong>开始着色!</strong> 在Python中加载模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python demo_release.py -i imgs/ansel_adams3.jpg</span><br></pre></td></tr></table></figure><p>以下加载预训练的着色器。有关如何运行模型的一些详细信息，请参见演示 <a href="https://github.com/richzhang/colorization/blob/master/demo_release.py">demo_release.py</a>，有一些预处理和后处理步骤：转换到实验室空间，调整大小到256x256，着色，并连接到原始的完全分辨率，并转换为RGB。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#处理图像的类PIL，数据处理的numpy，PIL和Pillow只提供最基础的数字图像处理，功能有限。</span><br><span class="line">#opencv实际上是一个c++库，只是提供了python接口，更新速度非常慢。</span><br><span class="line">#scikit-image是基于scipy的一款图像处理包，它将图片作为numpy数组进行处理，正好与matlab一样，因此，我们最终选择scikit-image进行数字图像处理。</span><br><span class="line">#进行图像规格的统一及通道的转换</span><br><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line">from skimage import color</span><br><span class="line">import torch</span><br><span class="line">import torch.nn.functional as F</span><br><span class="line">from IPython import embed</span><br><span class="line">#载入图片</span><br><span class="line">def load_img(img_path):</span><br><span class="line">out_np = np.asarray(Image.open(img_path))</span><br><span class="line">if(out_np.ndim==2):</span><br><span class="line">out_np = np.tile(out_np[:,:,None],3)</span><br><span class="line">return out_np</span><br><span class="line">#先把图片尺寸进行修改，转换为256*256</span><br><span class="line">#当数据源是ndarray时，array仍然会copy出一个副本，占用新的内存，但asarray不会。resample重采样</span><br><span class="line">def resize_img(img, HW=(256,256), resample=3):</span><br><span class="line">return np.asarray(Image.fromarray(img).resize((HW[1],HW[0]), resample=resample))</span><br><span class="line">#图片规格定为HW,尺寸为256*256，将数据转换成Tensor，便于模型使用</span><br><span class="line">def preprocess_img(img_rgb_orig, HW=(256,256), resample=3):</span><br><span class="line"># return original size L and resized L as torch Tensors</span><br><span class="line">img_rgb_rs = resize_img(img_rgb_orig, HW=HW, resample=resample)</span><br><span class="line">#将rgb图片转换为lab形式。用于之后预测ab通道</span><br><span class="line">img_lab_orig = color.rgb2lab(img_rgb_orig)</span><br><span class="line">img_lab_rs = color.rgb2lab(img_rgb_rs)</span><br><span class="line"></span><br><span class="line">img_l_orig = img_lab_orig[:,:,0]</span><br><span class="line">img_l_rs = img_lab_rs[:,:,0]</span><br><span class="line"></span><br><span class="line">tens_orig_l = torch.Tensor(img_l_orig)[None,None,:,:]</span><br><span class="line">tens_rs_l = torch.Tensor(img_l_rs)[None,None,:,:]</span><br><span class="line"></span><br><span class="line">return (tens_orig_l, tens_rs_l)</span><br><span class="line"></span><br><span class="line">def postprocess_tens(tens_orig_l, out_ab, mode=&#x27;bilinear&#x27;):</span><br><span class="line"># tens_orig_l 1 x 1 x H_orig x W_orig</span><br><span class="line"># out_ab 1 x 2 x H x W</span><br><span class="line">#取彩色图片的长、宽。</span><br><span class="line">HW_orig = tens_orig_l.shape[2:]</span><br><span class="line">HW = out_ab.shape[2:]</span><br><span class="line"></span><br><span class="line"># call resize function if needed</span><br><span class="line">#上采样算法: nearest, linear, bilinear, trilinear, area.默认为</span><br><span class="line">#nearest.如果采样后图像的长宽发生变化，我们将图像填充成采样后的图像尺寸</span><br><span class="line">if(HW_orig[0]!=HW[0] or HW_orig[1]!=HW[1]):</span><br><span class="line">out_ab_orig = F.interpolate(out_ab, size=HW_orig, mode=&#x27;bilinear&#x27;)</span><br><span class="line">else:</span><br><span class="line">out_ab_orig = out_ab</span><br><span class="line"># torch.cat的功能是将多个tensor类型矩阵的连接</span><br><span class="line">out_lab_orig = torch.cat((tens_orig_l, out_ab_orig), dim=1)</span><br><span class="line">#a.data.cpu().numpy()把tensor转换成numpy的格式</span><br><span class="line">return color.lab2rgb(out_lab_orig.data.cpu().numpy()[0,...].transpose((1,2,0)))</span><br><span class="line"></span><br><span class="line">colorizer_eccv16 = colorizers.eccv16().eval()</span><br><span class="line">colorizer_siggraph17 = colorizers.siggraph17().eval()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">import argparse</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">from colorizers import *</span><br><span class="line">#导入图像</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(&#x27;-i&#x27;,&#x27;--img_path&#x27;, type=str, default=&#x27;imgs/ansel_adams2.jpg&#x27;)</span><br><span class="line">parser.add_argument(&#x27;--use_gpu&#x27;, action=&#x27;store_true&#x27;, help=&#x27;whether to use GPU&#x27;)</span><br><span class="line">parser.add_argument(&#x27;-o&#x27;,&#x27;--save_prefix&#x27;, type=str, default=&#x27;saved&#x27;, help=&#x27;will save into this file with &#123;eccv16.png, siggraph17.png&#125; suffixes&#x27;)</span><br><span class="line">opt = parser.parse_args()</span><br><span class="line"></span><br><span class="line"># 载入着色，预训练的模型通过将其权重和偏差矩阵传递给新模型，eval() 函数用来执行一个字符串表达式,并返回表达式的值。</span><br><span class="line">colorizer_eccv16 = eccv16(pretrained=True).eval()</span><br><span class="line">colorizer_siggraph17 = siggraph17(pretrained=True).eval()</span><br><span class="line">#如果使用gpu加载，用cuda运算方法，提高运算效率</span><br><span class="line">if(opt.use_gpu):</span><br><span class="line">   colorizer_eccv16.cuda()</span><br><span class="line">   colorizer_siggraph17.cuda()</span><br><span class="line"></span><br><span class="line"># 默认将要被处理的图像尺寸为 256x256</span><br><span class="line"># grab L channel in both original ( &quot;orig&quot;) and resized (&quot;rs&quot;) resolutions</span><br><span class="line"># 在原始图像和调整大小和调整尺寸后的图像分别抓取L通道</span><br><span class="line"></span><br><span class="line">img = load_img(opt.img_path)</span><br><span class="line">(tens_l_orig, tens_l_rs) = preprocess_img(img, HW=(256,256))</span><br><span class="line">if(opt.use_gpu):</span><br><span class="line">   tens_l_rs = tens_l_rs.cuda()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 着色器输出256×256 ab映射</span><br><span class="line"></span><br><span class="line"># #调整大小并连接到原来的L通道</span><br><span class="line">img_bw = postprocess_tens(tens_l_orig, torch.cat((0*tens_l_orig,0*tens_l_orig),dim=1))</span><br><span class="line">out_img_eccv16 = postprocess_tens(tens_l_orig, colorizer_eccv16(tens_l_rs).cpu())</span><br><span class="line">out_img_siggraph17 = postprocess_tens(tens_l_orig, colorizer_siggraph17(tens_l_rs).cpu())</span><br><span class="line">#保存输出图像</span><br><span class="line">plt.imsave(&#x27;%s_eccv16.png&#x27;%opt.save_prefix, out_img_eccv16)</span><br><span class="line">plt.imsave(&#x27;%s_siggraph17.png&#x27;%opt.save_prefix, out_img_siggraph17)</span><br><span class="line">#绘图，创建自定义图像，绘制子图</span><br><span class="line">plt.figure(figsize=(12,8))</span><br><span class="line">plt.subplot(2,2,1)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.title(&#x27;Original&#x27;)</span><br><span class="line">plt.axis(&#x27;off&#x27;)</span><br><span class="line"></span><br><span class="line">plt.subplot(2,2,2)</span><br><span class="line">plt.imshow(img_bw)</span><br><span class="line">plt.title(&#x27;Input&#x27;)</span><br><span class="line">plt.axis(&#x27;off&#x27;)</span><br><span class="line"></span><br><span class="line">plt.subplot(2,2,3)</span><br><span class="line">plt.imshow(out_img_eccv16)</span><br><span class="line">plt.title(&#x27;Output (ECCV 16)&#x27;)</span><br><span class="line">plt.axis(&#x27;off&#x27;)</span><br><span class="line"></span><br><span class="line">plt.subplot(2,2,4)</span><br><span class="line">plt.imshow(out_img_siggraph17)</span><br><span class="line">plt.title(&#x27;Output (SIGGRAPH 17)&#x27;)</span><br><span class="line">plt.axis(&#x27;off&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能课堂问题 其一</title>
      <link href="posts/5e8c.html"/>
      <url>posts/5e8c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="基于机器学习对分类筛选的脑补"><a href="#基于机器学习对分类筛选的脑补" class="headerlink" title="基于机器学习对分类筛选的脑补"></a>基于机器学习对分类筛选的脑补</h1><h1 id="进行筛选"><a href="#进行筛选" class="headerlink" title="进行筛选"></a>进行筛选</h1><h2 id="1-overrider"><a href="#1-overrider" class="headerlink" title="1.@overrider"></a>1.@overrider</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.k.equals(((Line)obj).k) &amp;&amp; <span class="built_in">this</span>.b.equals(((Line)obj).b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-比较器"><a href="#2-比较器" class="headerlink" title="2.比较器"></a>2.比较器</h2><p><strong>Comparator位于包java.util下，而Comparable位于包java.lang下，Comparable接口将比较代码嵌入自身类中，而后者在一个独立的类中实现比较。</strong><br><strong>像Integer、String等这些基本类型的Java封装类都已经实现了Comparable接口，这些类对象本身就支持自比较，直接调用Collections.sort()就可以对集合中元素的排序，无需自己去实现Comparable接口。</strong></p><p>其实原理是一样的，就是用相应的特征什么的筛选出来，目前我知道的可能就是多个数和字符的对比，利用==放入这个函数</p><h1 id="用多个动态数组，集合，放置这些被筛选的元素"><a href="#用多个动态数组，集合，放置这些被筛选的元素" class="headerlink" title="用多个动态数组，集合，放置这些被筛选的元素"></a>用多个动态数组，集合，放置这些被筛选的元素</h1><p>注意：一定是动态，因为如果不是动态，我们哪知道一共有多少需要</p><p>搭配前面的比较，set可以根据某种规则去重，还有普通的arraylist.add</p><p>IdentityHashMap</p><h1 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h1><p>根据日期，来在归类后进行一定的排序，方便查找</p><p>这里可以用时间模式类来实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws ParseException &#123;</span><br><span class="line">        SimpleDateFormat s=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        Date date1=s.parse(&quot;1921-7-23&quot;);</span><br><span class="line">        Date date2=s.parse(&quot;2020-7-1&quot;);</span><br><span class="line">        int a=(int)((date2.getTime()-date1.getTime())/(1000*60));</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者就是普通的加减法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//例：1979.12.15-2015.3.2</span><br><span class="line"></span><br><span class="line">public class Date &#123;</span><br><span class="line">    static int days(int year1, int month1, int day1, int year2, int month2, int day2) &#123;</span><br><span class="line">        return getdays(year2, month2, day2) - getdays(year1, month1, day1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//  传入的日期与基点日期之间的天数</span><br><span class="line">    static int getdays(int year, int month, int day) &#123;</span><br><span class="line">        int sum = 0;</span><br><span class="line">        int[] dayOfMonth = new int[] &#123; 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 &#125;;</span><br><span class="line">        if (isLeapYear(year)) &#123;</span><br><span class="line">            dayOfMonth[2]++;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt; year; i++) &#123;</span><br><span class="line">            sum += 365;</span><br><span class="line">            if (isLeapYear(i)) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt; month; i++) &#123;</span><br><span class="line">            sum += dayOfMonth[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sum += day;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static boolean isLeapYear(int year) &#123;</span><br><span class="line">        boolean tag = false;</span><br><span class="line">        if (year % 4 == 0 &amp;&amp; year % 100 != 0 || year % 400 == 0) &#123;</span><br><span class="line">            tag = true;</span><br><span class="line">        &#125;</span><br><span class="line">        return tag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(days(1979, 12, 15, 2015, 3, 2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>根据一些图像识别封装类来实现具体的归类，这个我没用过。</p><p>甚至可以通过数据库的一些联动（mabatis什么的）</p><p>权限问题可以设置一个属性，然后放在数据库里面操作例如直接用guest，host这种权限，或者直接用key来写（1,2,3）</p><p>然后利用可视化的东西来提高相册颜值</p><p>比如标签分类</p><p><img src="C:\Users\exia\AppData\Roaming\Typora\typora-user-images\image-20220419150343825.png" alt="image-20220419150343825"></p><p>地点分类</p><p><img src="C:\Users\exia\AppData\Roaming\Typora\typora-user-images\image-20220419150406129.png" alt="image-20220419150406129"></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯笔记2</title>
      <link href="posts/195f.html"/>
      <url>posts/195f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="对蓝桥杯进行一个临时抱佛脚"><a href="#对蓝桥杯进行一个临时抱佛脚" class="headerlink" title="对蓝桥杯进行一个临时抱佛脚"></a>对蓝桥杯进行一个临时抱佛脚</h1><h2 id="1-排序"><a href="#1-排序" class="headerlink" title="1.排序"></a>1.排序</h2><h3 id="集合排序"><a href="#集合排序" class="headerlink" title="集合排序"></a>集合排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.util.Collections.sort(java.util.List)</span><br><span class="line"></span><br><span class="line">java.util.Collections.sort(java.util.List, java.util.Comparator)</span><br></pre></td></tr></table></figure><p>​     Arrays.sort();<br>Arrays.sort(int[] a, int fromIndex, int toIndex)；<br>​    //Arrays.sort(数组名,起始下标,终止下标);<br>​    //（默认排序为升序排序）</p><p>如果一个数组初始化时已经赋值。则sort函数可以另外一种格式</p><p><strong>Arrays.sort(数组名);</strong></p><p>sort函数的格式变为: <strong>Arrays.sort(数组名, 起始下标, 终止下标, new cmp());</strong></p><h3 id="Set排序"><a href="#Set排序" class="headerlink" title="Set排序"></a>Set排序</h3><p>Set是一类集合，简单来说就是将元素去重，没有顺序地放进集合里边</p><ol><li><p>放到TreeSet里面排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"><span class="comment">//方法一    </span></span><br><span class="line">    Set&lt;String&gt; sortSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;String&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o2.compareTo(o1);<span class="comment">//降序排列</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">    Set&lt;String&gt; sortSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;String&gt;((o1, o2) -&gt; o2.compareTo(o1));</span><br><span class="line">        sortSet.addAll(set);</span><br></pre></td></tr></table></figure></li><li><p>将Set放入List中排序</p><p>方法同集合排序</p></li></ol><h3 id="Map排序"><a href="#Map排序" class="headerlink" title="Map排序"></a>Map排序</h3><p>这里我只知道TreeMap，迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;String, Object&gt;(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String obj1, String obj2)</span> &#123;</span><br><span class="line">                        <span class="comment">// 降序排序</span></span><br><span class="line">                        <span class="keyword">return</span> obj2.compareTo(obj1);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        map.put(<span class="string">&quot;2019-03&quot;</span>, <span class="string">&quot;ccccc&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;2018-12&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;2019-01&quot;</span>, <span class="string">&quot;bbbbb&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;2019-02&quot;</span>, <span class="string">&quot;ddddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        Iterator&lt;String&gt; iter = keySet.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> iter.next();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;:&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h3><p>int compare(Object o1, Object o2) 返回一个基本类型的整型<br>如果要按照升序排序，<br>则o1 小于o2，返回-1（负数），相等返回0，01大于02返回1（正数）<br>如果要按照降序排序<br> 则o1 小于o2，返回1（正数），相等返回0，01大于02返回-1（负数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">shu</span>&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cmp</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;shu&gt;&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(shu a,shu b)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.x&lt;b.x)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.x&gt;b.x)&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以简化成</span></span><br><span class="line"><span class="comment">//return b.x-a.x</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> n=sc.nextInt();</span><br><span class="line">shu num[] = <span class="keyword">new</span> <span class="title class_">shu</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">num[i]=<span class="keyword">new</span> <span class="title class_">shu</span>();    <span class="comment">///这个地方容易漏  </span></span><br><span class="line">num[i].x=sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arrays.sort(num,<span class="number">0</span>,n,<span class="keyword">new</span> <span class="title class_">cmp</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==n-<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println(num[i].x);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">System.out.print(num[i].x+<span class="string">&quot; &quot;</span>);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sc.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象的比较"><a href="#对象的比较" class="headerlink" title="对象的比较"></a>对象的比较</h3><p>1.重写基类继承过来的equals方法，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.k.equals(((Line)obj).k) &amp;&amp; <span class="built_in">this</span>.b.equals(((Line)obj).b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.比较器</p><p>   <strong>Comparator位于包java.util下，而Comparable位于包java.lang下，Comparable接口将比较代码嵌入自身类中，而后者在一个独立的类中实现比较。</strong><br>       <strong>像Integer、String等这些基本类型的Java封装类都已经实现了Comparable接口，这些类对象本身就支持自比较，直接调用Collections.sort()就可以对集合中元素的排序，无需自己去实现Comparable接口。</strong><br>       <strong>而有些自定义类的List序列，当这个对象不支持自比较或者自比较函数不能满足你的要求时，你可以写一个比较器来完成两个对象之间大小的比较，也就是指定使用Comparator（临时规则排序，也称作专门规则排序），如果不指定Comparator，那么就用自然规则排序，这里的自然顺序就是实现Comparable接口设定的排序方式。</strong><br>若一个类要实现java.util.Comparator接口：它一定要实现int compare(T o1, T o2) 函数，而另一个可以不实现boolean equals(Object obj) 函数</p><ol><li>int compare(T o1, T o2) 是比较o1和o2的大小</li></ol><p>如果返回值为负数意味着o1比o2小，否则返回为零意味着o1等于o2，返回为正数意味着o1大于o2</p><p>例子如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Car&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String name , <span class="type">int</span> price , <span class="type">int</span> age)</span>&#123;</span><br><span class="line">​        <span class="built_in">this</span>.name = name;</span><br><span class="line">​        <span class="built_in">this</span>.price = price;</span><br><span class="line">​        <span class="built_in">this</span>.age = age;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">​        <span class="keyword">return</span> name;</span><br><span class="line">​    &#125;</span><br><span class="line">​     </span><br><span class="line">​    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">​        <span class="built_in">this</span>.name = name;</span><br><span class="line">​    &#125;</span><br><span class="line">​     </span><br><span class="line">​    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">​        <span class="keyword">return</span> price;</span><br><span class="line">​    &#125;</span><br><span class="line">​     </span><br><span class="line">​    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">int</span> price)</span> &#123;</span><br><span class="line">​        <span class="built_in">this</span>.price = price;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">​        <span class="keyword">return</span> age;</span><br><span class="line">​    &#125;</span><br><span class="line">​     </span><br><span class="line">​    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">​        <span class="built_in">this</span>.age = age;</span><br><span class="line">​    &#125;</span><br><span class="line">​       <span class="meta">@Override</span></span><br><span class="line">​    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">​        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">​                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">​                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">​                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">​                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="meta">@Override</span></span><br><span class="line">​    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Car car)</span> &#123;</span><br><span class="line">​        <span class="keyword">return</span> <span class="built_in">this</span>.price - car.price;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        ArrayList&lt;Car&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;宝马&quot;</span> , <span class="number">12</span> , <span class="number">2019</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;大众&quot;</span> , <span class="number">10</span> , <span class="number">2015</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;蓝比基尼&quot;</span> , <span class="number">50</span> , <span class="number">2018</span>));</span><br><span class="line">        Car[] cars = list.toArray(<span class="keyword">new</span> <span class="title class_">Car</span>[list.size()]);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(cars, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Car&gt;() &#123;<span class="comment">//添加一个外部排序器即可</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Car car, Car t1)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> t1.getAge() - car.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(Car car : cars)&#123;</span><br><span class="line">            System.out.println(car);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2.二分查找"></a>2.二分查找</h2><p>基本模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = ...;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(...) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (right + left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着来一个很简单的应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123; <span class="comment">// 注意</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (right + left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">            <span class="keyword">return</span> mid; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己的理解：首先输入要找的数，以及搜寻它的范围，接着将这个范围取一个中间值mid，进入循环…进行比较，更改lefr和right的位置，如果最后right和left相等，就说明找到了</p><h2 id="3-贪心算法"><a href="#3-贪心算法" class="headerlink" title="3.贪心算法"></a>3.贪心算法</h2><p>模板:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Greedy(C)  <span class="comment">//C是问题的输入集合即候选集合</span></span><br><span class="line">&#123;</span><br><span class="line">    S=&#123; &#125;;  <span class="comment">//初始解集合为空集</span></span><br><span class="line">    <span class="keyword">while</span> (not <span class="title function_">solution</span><span class="params">(S)</span>)  <span class="comment">//集合S没有构成问题的一个解</span></span><br><span class="line">    &#123;</span><br><span class="line">       x=select(C);    <span class="comment">//在候选集合C中做贪心选择</span></span><br><span class="line">       <span class="keyword">if</span> <span class="title function_">feasible</span><span class="params">(S, x)</span>  <span class="comment">//判断集合S中加入x后的解是否可行</span></span><br><span class="line">          S=S+&#123;x&#125;;</span><br><span class="line">          C=C-&#123;x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本思路：</p><ol><li>建立数学模型来描述问题。</li><li>把求解的问题分成若干个子问题。</li><li>对每一子问题求解，得到子问题的局部最优解。</li><li>把子问题的解局部最优解合成原来解问题的一个解。</li></ol><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p>当前有N件物品和一个容积为V的背包。已知第i件物品的体积是C,价值是Wi。<br>由于每种物品有且仅有一-件，因此只能选择放或不放，我们称之为01背包问题。<br>现在你需要选出若干件物品，在它们的重量之和不超过V的条件下，使得价值总和尽可能大。<br>对于每个物品是否要装入背包，我们自然可以进行暴力枚举或搜索，但是如果要暴力地去做，那么时间复杂度会非常的高，这</p><ul><li><pre><code class="java">/** 定义一个物体类 */ class Body&#123; int id;// 物体的序号 int w;// 物体的重量 int p;// 物体的价值 &#125; /**  * 一般背包问题的代码实现  * @param w：每个物体重量的数组  * @param p：每个物体收益的数组  * @param m：背包载重  * @return 结果集（放入哪几个物体、每个物体放入多少部分）    */    List&lt;Body&gt; commonPackage( int[] w, int[] p, int m )&#123;    // 构造物体对象列表（将入参存储在List&lt;Body&gt;中）    List&lt;Body&gt; bodys = new ArrayList&lt;&gt;();    for ( int i=0; i&lt;w.length; i++ ) &#123;        bodys.add(new Body(w[i],p[i]));    &#125;    // 对性价比排序（从高到低排序）    Collections.sort(bodys, new Comaprator&lt;Body&gt;()&#123;        int compare(Body b1,Body b2)&#123;         return b2.p/b2.w-b1.p/b1.w;     &#125; &#125;); // 将物体按照性价比从高到低依次加入背包 int rest = m;// 剩余重量 int i=0; List&lt;Body&gt; results = new ArrayList&lt;&gt;();// 存放结果集 for(; i&lt;bodys.size(); i++)&#123;     if ( rest&lt;bodys.get(i).w )         break;     Body curBody = bodys.get(i);     results.add(curBody);     rest -= curBody.w; &#125; // 计算最后一个物体能放入的部分 Body lastBody = bodys.get(i); results.add(new Body(lastBody.id,rest,(lastBody.p*rest/lastBody.w)); &#125;</code></pre></li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 找钱问题</span><br><span class="line"></span><br><span class="line">**假设有 25 分、10 分、5 分、1 分的硬币，现要找给客户 41 分的零钱，如何办到硬币个数最少？**</span><br><span class="line">**贪心策略：每一次都优先选择面值最大的硬币**</span><br><span class="line">**① 选择 25 分的硬币，剩 16 分**</span><br><span class="line">**② 选择 10 分的硬币，剩 6 分**</span><br><span class="line">**③ 选择 5 分的硬币，剩 1 分**</span><br><span class="line">**④ 选择 1 分的硬币**</span><br><span class="line">**最终的解是共 4 枚硬币**</span><br><span class="line">**✓ 25 分、10 分、5 分、1 分硬币各一枚**import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">public class CoinChange &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] faces = &#123;25,10,5,1&#125;;</span><br><span class="line">        Arrays.sort(faces);//1,5,10,25</span><br><span class="line">        int money = 41,coins = 0;</span><br><span class="line"></span><br><span class="line">        for (int i = faces.length-1; i &gt;=0 ; i--) &#123;</span><br><span class="line">            if (money &lt; faces[i])&#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            money -= faces[i];</span><br><span class="line">            coins++;</span><br><span class="line">            System.out.println(faces[i]);</span><br><span class="line">            i = faces.length;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;一共需要&quot;+coins+&quot;枚硬币&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br>25<br>10<br>5<br>1<br>一共需要4枚硬币</p><h2 id="4-DFS和BFS"><a href="#4-DFS和BFS" class="headerlink" title="4.DFS和BFS"></a>4.DFS和BFS</h2><p><strong>无特殊情况，DFS就用递归实现，BFS就用队列实现。</strong></p><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><p>现在小学的数学题目也不6是那么好玩的。<br>看看这个寒假作业：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   □ + □ = □</span><br><span class="line">   □ - □ = □</span><br><span class="line">   □ × □ = □</span><br><span class="line">   □ ÷ □ = □</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>(如果显示不出来，可以参见【图1.jpg】)</p><p>每个方块代表1~13中的某一个数字，但不能重复。<br>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6 + 7 = 13</span><br><span class="line">9 - 8 = 1</span><br><span class="line">3 * 4 = 12</span><br><span class="line">10 / 2 = 5</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以及： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> 7  + 6 = 13</span><br><span class="line"> 9  - 8 = 1</span><br><span class="line"> 3  * 4 = 12</span><br><span class="line"> 10 / 2 = 5</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>就算两种解法。（加法，乘法交换律后算不同的方案）<br>你一共找到了多少种方案？<br>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。<br>注意:该题全排列会超时。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> v[<span class="number">15</span>],a[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>]+a[<span class="number">1</span>]!=a[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">3</span>]-a[<span class="number">4</span>]!=a[<span class="number">5</span>])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">6</span>]*a[<span class="number">7</span>]!=a[<span class="number">8</span>])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">10</span>]*a[<span class="number">11</span>]==a[<span class="number">9</span>])</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">13</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[i]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">v[i]=<span class="number">1</span>;</span><br><span class="line">a[n]=i;</span><br><span class="line"><span class="built_in">dfs</span>(n+<span class="number">1</span>);</span><br><span class="line">v[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><h2 id="5-Dijkstra"><a href="#5-Dijkstra" class="headerlink" title="5.Dijkstra"></a>5.<strong>Dijkstra</strong></h2><p>这是蓝桥杯的最短路径问题：</p><p><img src="https://img-blog.csdnimg.cn/20200116202542993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2R1Y2hlbmxvbmc=,size_16,color_FFFFFF,t_70" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> _lanqiaobei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ways</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[][] point=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2022</span>][<span class="number">2022</span>] ;</span><br><span class="line"><span class="type">int</span>[] dist=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2022</span>];</span><br><span class="line"><span class="type">boolean</span>[] visit=<span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2022</span>];</span><br><span class="line">Arrays.fill(dist,Integer.MAX_VALUE);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2022</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2022</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) &#123;</span><br><span class="line">point[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(Math.abs(i - j) &lt;= <span class="number">21</span>) &#123;</span><br><span class="line">point[i][j]=i*j/gcd(i,j);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">point[i][j]=Integer.MAX_VALUE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dist[<span class="number">1</span>]=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">2022</span>;i++) &#123;</span><br><span class="line"><span class="type">int</span> u=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;<span class="number">2022</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(visit[j]==<span class="literal">false</span>&amp;&amp;dist[j]&lt;min) &#123;</span><br><span class="line">min=dist[i];</span><br><span class="line">u=j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">visit[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;<span class="number">2022</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(point[u][j]!=Integer.MAX_VALUE&amp;&amp;dist[u]+point[u][j]&lt;dist[j]) &#123;</span><br><span class="line">dist[j] = dist[u] + point[u][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(dist[<span class="number">2021</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-动态规划"><a href="#6-动态规划" class="headerlink" title="6.动态规划"></a>6.<strong>动态规划</strong></h2><p><a href="https://blog.csdn.net/u011612364/article/details/117516638?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164942540716780271924704%2522%252C%2522scm%25">https://blog.csdn.net/u011612364/article/details/117516638?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164942540716780271924704%2522%252C%2522scm%25</a></p><h2 id="7-计算几何"><a href="#7-计算几何" class="headerlink" title="7.计算几何"></a>7.<strong>计算几何</strong></h2><p>例题：<a href="https://blog.csdn.net/LHF_hai/article/details/79241508">https://blog.csdn.net/LHF_hai/article/details/79241508</a></p><h2 id="8-树"><a href="#8-树" class="headerlink" title="8.树"></a>8.树</h2><p><strong>二叉树的前、中、后序遍历，树状数组，最小生成树（Kruskal）。</strong></p><h2 id="9-栈和队列"><a href="#9-栈和队列" class="headerlink" title="9.栈和队列"></a>9.栈和队列</h2><p>Map:<a href="https://blog.csdn.net/haojiagou/article/details/88168835?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164942497316780271971557%2522%252C%2522scm%2522">https://blog.csdn.net/haojiagou/article/details/88168835?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164942497316780271971557%2522%252C%2522scm%2522</a></p><p>vector:<a href="https://blog.csdn.net/Listening_music/article/details/7034070?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164942503216780255270826%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164942503216780255270826&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-7034070.142%5Ev7%5Epc_search_result_cache,157%5Ev4%5Econtrol&amp;utm_term=vector+java&amp;spm=1018.2226.3001.418">https://blog.csdn.net/Listening_music/article/details/7034070?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164942503216780255270826%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164942503216780255270826&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-7034070.142^v7^pc_search_result_cache,157^v4^control&amp;utm_term=vector+java&amp;spm=1018.2226.3001.418</a> </p><p>set:<a href="https://blog.csdn.net/lushuaiyin/article/details/7381478?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164942525116782184652105%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164942525116782184652105&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-6-7381478.142%5Ev7%5Epc_search_result_cache,157%5Ev4%5Econtrol&amp;utm_term=set+java&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/lushuaiyin/article/details/7381478?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164942525116782184652105%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164942525116782184652105&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-6-7381478.142^v7^pc_search_result_cache,157^v4^control&amp;utm_term=set+java&amp;spm=1018.2226.3001.4187</a></p><p>pair:<a href="https://blog.csdn.net/dydy12232/article/details/105953310?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164942533316780271935036%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164942533316780271935036&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-105953310.142%5Ev7%5Epc_search_result_cache,157%5Ev4%5Econtrol&amp;utm_term=pair+java&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/dydy12232/article/details/105953310?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164942533316780271935036%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164942533316780271935036&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-105953310.142^v7^pc_search_result_cache,157^v4^control&amp;utm_term=pair+java&amp;spm=1018.2226.3001.4187</a></p><h2 id="10-简单数学"><a href="#10-简单数学" class="headerlink" title="10.简单数学"></a>10.<strong>简单数学</strong></h2><h3 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a><a href="https://www.zhihu.com/search?q=%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%221812604554%22%7D">最小公倍数</a></h3><p>两数相乘除公倍数</p><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b); &#125;</span><br></pre></td></tr></table></figure><h3 id="素数的筛选"><a href="#素数的筛选" class="headerlink" title="素数的筛选"></a>素数的筛选</h3><ul><li><pre><code class="java">package com.imooc.test2; /**  * 利用筛选法查找100以内的素数    */ public class Test &#123;    public static void main(String[] args) &#123;        // 定义一个int类型的数组        int[] a = new int[101];        int i,j;    // 初始化整个数组，全部初始化为1    for (i = 0; i &lt;101 ; i++) &#123;        a[i] = 1;    &#125;    for (i=2;i&lt;101;i++)&#123;        if(a[i]!=0)&#123;            for (j=i+i;j&lt;101;)&#123;                // 如果能被整除，说明是一个数的倍数，赋值为0                if(j%i==0)&#123;                    a[j]=0;                 j = j+i;                &#125;            &#125;        &#125;    &#125;    // 遍历筛选后的数组，输出100以内的素数       for ( i = 2; i &lt; 101; i++) &#123;         if (a[i]==1)&#123;             System.out.println(i);         &#125;     &#125; &#125; &#125;</code></pre></li></ul><h3 id="三角形公式"><a href="#三角形公式" class="headerlink" title="三角形公式"></a>三角形公式</h3><p>1.已知三角形底a，高h，则 S=ah/2</p><p>2.已知三角形三边a,b,c，则</p><p>（海伦公式）（p=(a+b+c)/2）</p><p>S=sqrt[p(p-a)(p-b)(p-c)]</p><p>=sqrt[(1/16)(a+b+c)(a+b-c)(a+c-b)(b+c-a)]</p><p>=1/4sqrt[(a+b+c)(a+b-c)(a+c-b)(b+c-a)]</p><p>3.已知三角形两边a,b,这两边夹角C，则S=1/2</p><p>absinC，即两夹边之积乘夹角的正弦值。</p><p>4.设三角形三边分别为a、b、c，内切圆半径为r</p><p>则三角形面积=(a+b+c)r/2</p><p>5.设三角形三边分别为a、b、c，外接圆半径为R</p><p>则三角形面积=abc/4R</p><h3 id="等差数列，等比数列"><a href="#等差数列，等比数列" class="headerlink" title="等差数列，等比数列"></a><a href="https://www.zhihu.com/search?q=%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%221812604554%22%7D">等差数列</a>，等比数列</h3><p>等差数列和公式：Sn=n(a1+an)/2=na1+n(n-1)/2 d</p><p>等比数列求和公式：q≠1时 Sn=a1(1-q^n)/(1-q)=(a1-anq)/(1-q)</p><p>更多。。。</p>]]></content>
      
      
      <categories>
          
          <category> 去蓝桥杯当炮灰系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenGL的配置</title>
      <link href="posts/5705.html"/>
      <url>posts/5705.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="OpenGL开发环境配置："><a href="#OpenGL开发环境配置：" class="headerlink" title="\OpenGL开发环境配置：*"></a><strong><em>\</em>OpenGL开发环境配置：*</strong></h1><p><strong><em>使用\</em></strong>*VS2019*<strong>**</strong>*开发环境，完成OpenG*<strong>**</strong>*L*<strong>**</strong>*开发所需函数库和头文件的配置*<strong>**</strong>*：****</p><p>1.从学习通下载一下OpenGL开发库，将文件分类放置到指定文件夹(以我自己的为主，其实就是vs下对应目录，自己找找吧~)</p><p>找到目录E:\vs\myvs\VC\Tools\MSVC\14.29.30133\include</p><p>将一系列.h放到里面。</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/1598e08b680cf0e4.jpg" alt="img"> </p><p>找到目录</p><p>E:\vs\myvs\VC\Tools\MSVC\14.29.30133\lib\x86</p><p>将一系列.lib文件放到里面。</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/fb07b65d469f6f05.jpg" alt="img"> </p><p>找到目录</p><p>C:\Windows\SysWOW64</p><p>将 一系列.dll文件 放到里面。</p><p>\3. 创建一个控制台应用</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/96161f693db16752.jpg" alt="img"></p><p>删除.cpp文件里的原内容，输入一段测试代码</p><p>按照下图所示配置项目属性：</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/23c1a3aff4114d2d.jpg" alt="img"> </p><p><img src="file:///C:\Users\exia\AppData\Local\Temp\ksohtml\wps596B.tmp.jpg" alt="img"> </p><p><img src="https://s3.bmp.ovh/imgs/2022/03/a32082cfc27b695c.jpg" alt="img"> </p><p><img src="https://s3.bmp.ovh/imgs/2022/03/2a86814c20a04257.jpg" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> 虚拟现实 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟现实 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真值和机器数及机器数的相互转换关系</title>
      <link href="posts/160d.html"/>
      <url>posts/160d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一：真值和机器数定义"><a href="#一：真值和机器数定义" class="headerlink" title="一：真值和机器数定义"></a>一：真值和机器数定义</h2><h2 id="1．真值"><a href="#1．真值" class="headerlink" title="1．真值"></a>1．真值</h2><p>真值是指在数值前面用“+”号表示正数，用“-”号表示负数的带符号二进制数。</p><h2 id="2．机器数"><a href="#2．机器数" class="headerlink" title="2．机器数"></a>2．机器数</h2><p>机器数（又称为机器码）是指在数字系统中用“0”表示符号“+”，用“1”表示符号“-”，即把符号“数值化”后的带符号二进制数。常用的机器数有原码、反码和补码。</p><h2 id="二、3种常用机器数"><a href="#二、3种常用机器数" class="headerlink" title="二、3种常用机器数"></a>二、3种常用机器数</h2><h2 id="1．原码"><a href="#1．原码" class="headerlink" title="1．原码"></a>1．原码</h2><p>求取方法：符号位用0表示正，用1表示负；数值位不变，即与真值的数值位相同。<br> 例如，若x＝0.1011、y＝–10110，则<br> [x]原码＝0.1011（由于x为正数，所以符号位为0，数值位与真值相同）<br> [y]原码＝110110（由于y为负数，所以符号位为1，数值位与真值相同）<br> 特点：求取方便，运算不方便，“0”有“+0”和“-0”两种不同形式。</p><h2 id="2．反码"><a href="#2．反码" class="headerlink" title="2．反码"></a>2．反码</h2><p>求取方法：符号位用0表示正，用1表示负。数值位与符号位相关，当为正数时，数值位不变，即与真值的数值位相同；当为负数时，数值位是真值的数值位按位取反（0变为1，1变为0）。<br> 例如，若x＝-0.1010、y＝+10101,则<br> [x]反码＝1. 0101（由于x为负数，所以符号位为1，数值位为真值的数值位按位变反）<br> [y]原码＝010101（由于y为正数，所以有符号位为0，数值位与真值相同）<br> 特点：求取较方便，运算较方便（可以将减法运算转化为加法运算），“0”有“+0”和“-0”两种不同形式。</p><h2 id="3．补码"><a href="#3．补码" class="headerlink" title="3．补码"></a>3．补码</h2><p>求取方法：符号位用0表示正，用1表示负。数值位与符号位相关，当为正数时，数值位不变，即与真值的数值位相同；当为负数时，数值位是真值的数值位按位取反，并在末位加1。<br> 例如，若x＝-11010、y＝+0.1010，则<br> [x]补码＝100110（由于x为负数，所以符号位为1，数值位为真值的数值位按位变反，末位加1）<br> [y]补码＝0.1010（由于y为正数，所以有符号位为0，数值位与真值相同）<br> 特点：运算方便（可以将减法运算转化为加法运算），“0”只有“+0”一种形式。</p><h2 id="三：机器码求法对比"><a href="#三：机器码求法对比" class="headerlink" title="三：机器码求法对比"></a>三：机器码求法对比</h2><p><a href="https://img-blog.csdnimg.cn/20200314205557216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDc1Mjg1,size_16,color_FFFFFF,t_70"><img src="https://i.bmp.ovh/imgs/2021/09/a944bf6aeddcf352.png" alt="在这里插入图片描述"></a></p><h2 id="四、真值、原码、反码、补码的相互转换"><a href="#四、真值、原码、反码、补码的相互转换" class="headerlink" title="四、真值、原码、反码、补码的相互转换"></a>四、真值、原码、反码、补码的相互转换</h2><p>带符号二进制数的真值、原码、反码和补码之间的相互转换如图1所示。<br> <a href="https://img-blog.csdnimg.cn/20200314204900875.png"><img src="https://i.bmp.ovh/imgs/2021/09/ea03a5567dcfe8ae.png" alt="在这里插入图片描述"></a></p><p> 举个栗子：</p><p> <a href="https://img-blog.csdnimg.cn/20200314205757565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDc1Mjg1,size_16,color_FFFFFF,t_70"><img src="https://i.bmp.ovh/imgs/2021/09/77cf48e7f6451555.png" alt="在这里插入图片描述"></a></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遥感思考题 第一章</title>
      <link href="posts/4e75.html"/>
      <url>posts/4e75.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-什么是图像，什么是数字图像？"><a href="#1-什么是图像，什么是数字图像？" class="headerlink" title="1.什么是图像，什么是数字图像？"></a>1.什么是图像，什么是数字图像？</h3><p>图像(image）是对客观对象的一种相似性的描述或写真.图像包含了这个客观对象的信息。是人们最主要的信息源。</p><p>数字图像指数字存储的、用计算机直接处理的图像，是空间坐标和图像数值不连续的、用离散数值表示的图像，在计算机内部，数字图像表现为二维阵列(网格）,属于不可见图像。</p><h3 id="2-什么是遥感数字图像-模拟图像-照片-与遥感数字图像有什么区别？"><a href="#2-什么是遥感数字图像-模拟图像-照片-与遥感数字图像有什么区别？" class="headerlink" title="2.什么是遥感数字图像?模拟图像(照片)与遥感数字图像有什么区别？"></a>2.什么是遥感数字图像?模拟图像(照片)与遥感数字图像有什么区别？</h3><p>遥感数字图像是以数字形式存储和表达的遥感图像.<br>模拟图像:又称光学图像,以胶片、相纸等硬拷贝形式存储的图像。图像是自然景物的反映，人眼感知的景物一般是连续的，照相机(非数码式）拍摄形成的照片也是连续的,两者均称之为模拟图像.广义的模拟图像还包括绘画。<br>差异:<br>模拟图像的显著特点是连续性:①空间位置的变化是连续的②每一空间位置上的亮度、色彩变化是连续的③符合数学上微积分连续性的定义数字图像的特点:便于计算机处理与分析;图像信息损失低;抽象性强。</p><h3 id="3-什么是遥感数字图像处理，主要内容有哪些？与数字图像处理有什么区别和联系？"><a href="#3-什么是遥感数字图像处理，主要内容有哪些？与数字图像处理有什么区别和联系？" class="headerlink" title="3.什么是遥感数字图像处理，主要内容有哪些？与数字图像处理有什么区别和联系？"></a>3.什么是遥感数字图像处理，主要内容有哪些？与数字图像处理有什么区别和联系？</h3><p>答:利用计算机对遥感数字图像进行一系列的操作，以求达到预期结果的技术，称作遥感数字图像处理.</p><p>其内容有:</p><p>①图像转换。包括模数(A/D）转换和数模（D/A）转换.图像转换的另一种<br>含义是为使图像处理问题简化或有利于图像特征提取等目的而实施的图像变换工作，如二维傅里叶变换、沃尔什-哈达玛变换、哈尔变换、离散余弦变换和小波变换等。<br>②数字图像校正。主要包括辐射校正和几何校正两种。<br>③数字图像增强。采用一系列技术改善图像的视觉效果，提高图像的清晰</p><p>度、对比度,突出所需信息的工作称为图像增强。图像增强处理不是以图像保真度为原则，而是设法有选择地突出便于人或机器分析某些感兴趣的信息，抑制一些无用的信息，以提高图像的使用价值.<br>④多源信息复合（融合)。<br>⑤遥感数字图像计算机解译处理.</p><h3 id="4-常用的遥感数字图像处理系统有哪些？主要功能和特点是什么？有什么差异？"><a href="#4-常用的遥感数字图像处理系统有哪些？主要功能和特点是什么？有什么差异？" class="headerlink" title="4.常用的遥感数字图像处理系统有哪些？主要功能和特点是什么？有什么差异？"></a>4.常用的遥感数字图像处理系统有哪些？主要功能和特点是什么？有什么差异？</h3><p>利用计算机对遥感数字图像进行一系列的操作，以求达到预期结果的技术，称作遥感数字图像处理.<br>特点：<br>②数字图像校正。主要包括辐射校正和几何校正两种。<br>③数字图像增强。采用一系列技术改善图像的视觉效果，提高图像的清晰<br>度、对比度,突出所需信息的工作称为图像增强。图像增强处理不是以图像保真度为原则，而是设法有选择地突出便于人或机器分析某些感兴趣的信息，抑制一些无用的信息，以提高图像的使用价值.<br>④多源信息复合（融合)。<br>⑤遥感数字图像计算机解译处理.</p><h3 id="5-什么是空间域图像处理，什么是频率域图像处理？"><a href="#5-什么是空间域图像处理，什么是频率域图像处理？" class="headerlink" title="5.什么是空间域图像处理，什么是频率域图像处理？"></a>5.什么是空间域图像处理，什么是频率域图像处理？</h3><h3 id="6-什么是图像增强？主要目的是什么？主要方法有哪些？"><a href="#6-什么是图像增强？主要目的是什么？主要方法有哪些？" class="headerlink" title="6.什么是图像增强？主要目的是什么？主要方法有哪些？"></a>6.什么是图像增强？主要目的是什么？主要方法有哪些？</h3><p>图像增强:使用多种处理方法压抑、去除噪声，增强显示图像整体或突出图像中特定地物的信息，使图像更容易理解、解译和判读。<br>主要目的:1.采用一系列技术改善图像的视觉效果，提高图像的清晰度;<br>2.将图像转换成一种更适合于人或机器进行分析处理的形式。<br>主要方法:彩色合成、图像拉伸、波段运算、图像平滑、锐化、图像融合等</p><h3 id="7-怎么理解图像处理的两个观点？"><a href="#7-怎么理解图像处理的两个观点？" class="headerlink" title="7.怎么理解图像处理的两个观点？"></a>7.怎么理解图像处理的两个观点？</h3><h3 id="8-遥感数字图像处理需要掌握哪些基本知识"><a href="#8-遥感数字图像处理需要掌握哪些基本知识" class="headerlink" title="8.遥感数字图像处理需要掌握哪些基本知识?"></a>8.遥感数字图像处理需要掌握哪些基本知识?</h3><h3 id="9-数字图像分析与数字图像处理的关系是什么？"><a href="#9-数字图像分析与数字图像处理的关系是什么？" class="headerlink" title="9.数字图像分析与数字图像处理的关系是什么？"></a>9.数字图像分析与数字图像处理的关系是什么？</h3><h3 id="10-遥感信息提取与遥感数字图像处理的关系是什么？"><a href="#10-遥感信息提取与遥感数字图像处理的关系是什么？" class="headerlink" title="10.遥感信息提取与遥感数字图像处理的关系是什么？"></a>10.遥感信息提取与遥感数字图像处理的关系是什么？</h3><h3 id="11-为什么要进行遥感数字图像处理？"><a href="#11-为什么要进行遥感数字图像处理？" class="headerlink" title="11.为什么要进行遥感数字图像处理？"></a>11.为什么要进行遥感数字图像处理？</h3><h3 id="12-什么情况下像素不是方的？或者说，哪些媒体中图像像素不是方的？"><a href="#12-什么情况下像素不是方的？或者说，哪些媒体中图像像素不是方的？" class="headerlink" title="12.什么情况下像素不是方的？或者说，哪些媒体中图像像素不是方的？"></a>12.什么情况下像素不是方的？或者说，哪些媒体中图像像素不是方的？</h3><h3 id="13-遥感数字图像处理与医学图像、工业图像、视频图像、艺术图像处理有什么区别？"><a href="#13-遥感数字图像处理与医学图像、工业图像、视频图像、艺术图像处理有什么区别？" class="headerlink" title="13.遥感数字图像处理与医学图像、工业图像、视频图像、艺术图像处理有什么区别？"></a>13.遥感数字图像处理与医学图像、工业图像、视频图像、艺术图像处理有什么区别？</h3><h3 id="14-遥感信息提取的主要内容有哪些？"><a href="#14-遥感信息提取的主要内容有哪些？" class="headerlink" title="14.遥感信息提取的主要内容有哪些？"></a>14.遥感信息提取的主要内容有哪些？</h3><h3 id="15-遥感数字图像处理与摄影测量之间的关系是什么？"><a href="#15-遥感数字图像处理与摄影测量之间的关系是什么？" class="headerlink" title="15.遥感数字图像处理与摄影测量之间的关系是什么？"></a>15.遥感数字图像处理与摄影测量之间的关系是什么？</h3><h3 id="16-遥感数字图像的像素值与一般数码照相机拍摄的图像的像素值有哪些异同？"><a href="#16-遥感数字图像的像素值与一般数码照相机拍摄的图像的像素值有哪些异同？" class="headerlink" title="16.遥感数字图像的像素值与一般数码照相机拍摄的图像的像素值有哪些异同？"></a>16.遥感数字图像的像素值与一般数码照相机拍摄的图像的像素值有哪些异同？</h3><h3 id="17-为什么遥感数字图像能够作为科学研究的依据？如果利用一般数码照相机的照片进行科学研究，需要注意解决哪些问题？"><a href="#17-为什么遥感数字图像能够作为科学研究的依据？如果利用一般数码照相机的照片进行科学研究，需要注意解决哪些问题？" class="headerlink" title="17.为什么遥感数字图像能够作为科学研究的依据？如果利用一般数码照相机的照片进行科学研究，需要注意解决哪些问题？"></a>17.为什么遥感数字图像能够作为科学研究的依据？如果利用一般数码照相机的照片进行科学研究，需要注意解决哪些问题？</h3><h3 id="18-与遥感图像有关的法律法规有哪些？"><a href="#18-与遥感图像有关的法律法规有哪些？" class="headerlink" title="18.与遥感图像有关的法律法规有哪些？"></a>18.与遥感图像有关的法律法规有哪些？</h3><h3 id="19-现代遥感数字图像处理方法包括哪些方面？"><a href="#19-现代遥感数字图像处理方法包括哪些方面？" class="headerlink" title="19.现代遥感数字图像处理方法包括哪些方面？"></a>19.现代遥感数字图像处理方法包括哪些方面？</h3><h3 id="20-当前我国对地观测的进展有哪些？"><a href="#20-当前我国对地观测的进展有哪些？" class="headerlink" title="20.当前我国对地观测的进展有哪些？"></a>20.当前我国对地观测的进展有哪些？</h3>]]></content>
      
      
      <categories>
          
          <category> 遥感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遥感数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统 页式存储 页与块之间的关系</title>
      <link href="posts/4bed.html"/>
      <url>posts/4bed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="页式存储"><a href="#页式存储" class="headerlink" title="页式存储"></a><strong>页式存储</strong></h3><ol><li><strong>注意页和块的对象的不同</strong><br>对<strong>程序</strong>进行<strong>分页</strong>存储<br>对<strong>内存</strong>进行<strong>分块</strong>存储</li></ol><p>文章最后会给出我总结的页和块的关系</p><ol><li><strong>逻辑地址和物理地址</strong></li></ol><p>a) <strong>逻辑地址</strong>：由两部分组成，即<strong>页号 + 页内地址</strong></p><blockquote><p>设逻辑地址由总长度为m的<strong>二进制数</strong>表示，页内地址为n位，则页号为m-n位。</p></blockquote><p>注意:</p><ul><li><strong>块内地址=页内地址=2n</strong>,同理最大的程序可允许有 &gt; &gt; <strong>2m-n</strong> 个页面。</li><li>计算公式：<ul><li><strong>页号 = 逻辑地址/页长（商）</strong></li><li><strong>页内地址 = 逻辑地址%页长（余数）</strong></li></ul></li></ul><hr><p>b) <strong>物理地址</strong></p><blockquote><p>物理地址 = 块号 * 块长 + 块内地址 +（用户基址）<br>物理地址 = 块号 * 页长 + 页内地址 +（用户基址）</p></blockquote><p>为了弄清楚上面一大堆名词之间的关系，看看下面的例题。<br>根据所给条件求出物理地址（答案虽然已经给出，但是你可以装作没看见啊）<br>ps：用户基址是1000</p><p>例题</p><p>分析：注意每个页的页内地址是一样的，所以由公式</p><ul><li>页号 = 逻辑地址/页长（商）</li><li>页内地址 = 逻辑地址%页长（余数）</li></ul><p>我们可以知道逻辑地址 = 页号 * 页长 + 页内地址，所以页长 = (逻辑地址 - 页内地址)/页号.</p><p>解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">块长=页长=(4865-769)/2=2048，又 块内地址=页内地址，故</span><br><span class="line">物理地址=块号*块长+块内地址+用户基址</span><br><span class="line">      =6*2048+769+1000=14057</span><br></pre></td></tr></table></figure><hr><p>页块术语对应</p><table><thead><tr><th align="left">页</th><th align="left">块</th></tr></thead><tbody><tr><td align="left">程序</td><td align="left">内存</td></tr><tr><td align="left">逻辑地址</td><td align="left">物理地址</td></tr><tr><td align="left">页号</td><td align="left">块号</td></tr><tr><td align="left">页内地址</td><td align="left">块内地址</td></tr><tr><td align="left">页长(页面大小)</td><td align="left">块长（块大小）</td></tr></tbody></table><p>ps：页内地址又可以成为页偏移，但是页内地址不是页长！！！！页长又可以成为页面大小。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何安装matlab</title>
      <link href="posts/4451.html"/>
      <url>posts/4451.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一：真值和机器数定义"><a href="#一：真值和机器数定义" class="headerlink" title="一：真值和机器数定义"></a>一：真值和机器数定义</h2><h1 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h1><p>1.双击打开下载的【R2020b（64bit)】文件夹，右击【R2020b（64bit).zip.001】压缩包选择【解压到 R2020b（64bit)】</p><p><img src="https://pic2.zhimg.com/80/v2-ee49c2d8e4b424cae8e8d7a191940059_720w.jpg" alt="img"></p><p>2.打开解压后的【R2020b（64bit)】文件夹，双击启动【虚拟光驱】</p><p><img src="https://pic1.zhimg.com/80/v2-1c901d9b28cfe6142152177a3fd5e208_720w.jpg" alt="img"></p><p>3.点击【加载镜像】选择安装包解压后的文件夹中的【R2020b_Win64】镜像，点击【打开】</p><p><img src="https://pic4.zhimg.com/80/v2-4f36a5743bcc53975178ecbcb97fcb1b_720w.jpg" alt="img"></p><p>4.双击镜像路径地址【……R2020b（64bit)……】</p><p><img src="https://pic2.zhimg.com/80/v2-7969a9fa42597eba6d948cfb5adbe005_720w.jpg" alt="img"></p><p>5.进入加载之后的文件夹，右击【setup】】选择【以管理员身份运行】</p><p><img src="https://pic3.zhimg.com/80/v2-c93c65bc315a2d649e251bde828493b6_720w.jpg" alt="img"></p><p>6.点击【高级选项】选择【我有文件安装密钥】</p><p><img src="https://pic1.zhimg.com/80/v2-889a75d8b45af30ba74edf5e97bcbcac_720w.jpg" alt="img"></p><p>7.选择【是】，点击【下一步】</p><p><img src="https://pic4.zhimg.com/80/v2-7a82a97c2438383df7a40ef41d26fb07_720w.jpg" alt="img"></p><p>8.输入文件安装密钥【09806-07443-53955-64350-21751-41297】，点击【下一步】</p><p><img src="https://pic3.zhimg.com/80/v2-9cedf757eadb5406ae9ced4929f190de_720w.jpg" alt="img"></p><p>9.点击【浏览】选择【license_standalone】（位于安装包解压后的“R2020b(64bit)”文件夹中“Crack”文件夹里面），点击【打开】</p><p><img src="https://pic4.zhimg.com/80/v2-394efbccd766e43cfab99526d7ceb3a7_720w.jpg" alt="img"></p><p>10.点击【下一步】</p><p><img src="https://pic3.zhimg.com/80/v2-9c842a4e73ccd7e8638e433ef680deba_720w.jpg" alt="img"></p><p>11.修改目标文件夹路径地址“C:\Program Files\Polyspace\R2020b”中的“C”可更改安装位置（我这里将C改为D，表示安装在D盘；不建议安装在C盘），点击【下一步】</p><p><img src="https://pic1.zhimg.com/80/v2-c74b9b30cfd140787dbf3ad57aa4f794_720w.jpg" alt="img"></p><p>12.点击【下一步】</p><p><img src="https://pic3.zhimg.com/80/v2-4163fa6568964a3527e85b5bdc152d16_720w.jpg" alt="img"></p><p>13.勾选【将快捷方式添加到桌面】，点击【下一步】</p><p><img src="https://pic4.zhimg.com/80/v2-85c594f30c5c573b5697f784a8b1ac6b_720w.jpg" alt="img"></p><p>14.点击【开始安装】</p><p><img src="https://pic3.zhimg.com/80/v2-35fcdf166a5d813359861f9fe40a4c2e_720w.jpg" alt="img"></p><p>15.软件安装中……(耐心等待)</p><p><img src="https://pic1.zhimg.com/80/v2-d3e3d38fdb6e15c6a5d57221fb8f90ec_720w.jpg" alt="img"></p><p>16.安装完成，点击【关闭】</p><p><img src="https://pic4.zhimg.com/80/v2-87b0d5e303dca6faebe8ac0da280b9b7_720w.jpg" alt="img"></p><p>17.打开安装包解压后的【R2020b(64bit)】文件夹中的【Crack】文件夹</p><p><img src="https://pic3.zhimg.com/80/v2-046dc690698bf1f4adaf99a2a4cb333e_720w.jpg" alt="img"></p><p>18.全选该文件夹下所有文件右击选择【复制】</p><p><img src="https://pic3.zhimg.com/80/v2-df4eed9e5f24f3eb86ba669f8825f772_720w.jpg" alt="img"></p><p>19.打开软件安装位置路径下（D:\Program Files\Polyspace\，这里的D为步骤11中修改后的磁盘名称），在空白处右击选择【粘贴】</p><p><img src="https://pic4.zhimg.com/80/v2-3c3cb5fda8f5b26762fcac1fc44bac53_720w.jpg" alt="img"></p><p>20.点击【替换目标中的文件】</p><p><img src="https://pic4.zhimg.com/80/v2-3916040aa5fc91569ccf167ef5154c0f_720w.jpg" alt="img"></p><p>21.双击打开该文件夹下的【R2020b】文件夹</p><p><img src="https://pic1.zhimg.com/80/v2-0a2e988a4c444d9562912496e12a2074_720w.jpg" alt="img"></p><p>22.双击打开【bin】文件夹</p><p><img src="https://pic1.zhimg.com/80/v2-2c942b70deef8903ab3854378df7fb88_720w.jpg" alt="img"></p><p>23.将【matlab】图标拖到到电脑桌面,或者右键直接发送到桌面亦可</p><p><img src="https://pic3.zhimg.com/80/v2-2315e7ce889107161c5ef301142a47f2_720w.jpg" alt="img"></p><p>24.双击桌面【matlab - 快捷方式】图标启动软件</p><p><img src="https://pic3.zhimg.com/80/v2-9f857fff80b5100679b87c9ae409dbb6_720w.jpg" alt="img"></p><p>25.安装成功</p><p><img src="https://pic3.zhimg.com/80/v2-acfe4fd25272cc217700a6e30ccc89fa_720w.jpg" alt="img"><a href="https://img-blog.csdnimg.cn/20200314205757565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDc1Mjg1,size_16,color_FFFFFF,t_70">https://img-blog.csdnimg.cn/20200314205757565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDc1Mjg1,size_16,color_FFFFFF,t_70</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 多媒体技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多媒体技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在spring中使用JdbcTemplate进行数据库管理操作</title>
      <link href="posts/2095.html"/>
      <url>posts/2095.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><h3 id="1、JdbcTemplate概念及使用"><a href="#1、JdbcTemplate概念及使用" class="headerlink" title="1、JdbcTemplate概念及使用"></a>1、JdbcTemplate概念及使用</h3><p> a）Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p><p> b）引入相关 jar 包</p><p> c）在 spring 配置文件配置数据库连接池</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///test&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注:</p><p><strong>1.如果数据库有中文乱码，解决方法</strong>：</p><p>1、建立数据库时指定字符集：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database user_db default character  set utf8 collate utf8_general_ci;      </span><br></pre></td></tr></table></figure><p>  2、用MySQL新版本驱动 Connector/J 8.x  的连接方式是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.cj.jdbc.Driver        </span><br><span class="line"></span><br><span class="line">  url=jdbc:mysql://localhost:3306/user_db?serverTimezone=UTC&amp;characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false</span><br></pre></td></tr></table></figure><p>2.如果我们的<strong>MySQL版本太高了</strong>，比如我就是MySQL8.那个链接驱动的jar包，版本要对应到8-x-x.详细xml配置:</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span><span class="comment">&lt;!--设置为close使Spring容器关闭同时数据源能够正常关闭，以免造成连接泄露  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/user_db?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone = GMT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>·’&amp;要转义为<img src="C:\Users\exia\AppData\Roaming\Typora\typora-user-images\image-20210129122228199.png" alt="image-20210129122228199"></p><p>·在数据库中，做完此类操作建议先关闭数据库，刷新一下，才能看见更改后的数据</p></blockquote></blockquote><p> d）配置 JdbcTemplate 对象，注入 DataSource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JdbcTemplate 对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--注入 dataSource--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--set方式注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> e）创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate 对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">@Service</span><br><span class="line">public class BookService &#123;</span><br><span class="line"> //注入 dao</span><br><span class="line"> @Autowired</span><br><span class="line"> private BookDao bookDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public class BookDaoImpl implements BookDao &#123;</span><br><span class="line"> //注入 JdbcTemplate</span><br><span class="line"> @Autowired</span><br><span class="line"> private JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、JdbcTemplate-操作数据库（添加）"><a href="#2、JdbcTemplate-操作数据库（添加）" class="headerlink" title="2、JdbcTemplate 操作数据库（添加）"></a>2、JdbcTemplate 操作数据库（添加）</h3><p> a）对应数据库创建实体类</p><p> b）创建service和dao</p><p> （1）在 dao 进行数据库添加操作</p><p> （2）调用 JdbcTemplate 对象里面 update 方法实现添加操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"> <span class="comment">//注入 JdbcTemplate</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"> <span class="comment">//添加的方法</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Book book)</span> &#123;</span><br><span class="line"> <span class="comment">//1 创建 sql 语句</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_book values(?,?,?)&quot;</span>;</span><br><span class="line"> <span class="comment">//2 调用方法实现</span></span><br><span class="line"> Object[] args = &#123;book.getUserId(), book.getUsername(),book.getUstatus()&#125;;</span><br><span class="line"> <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql,args);</span><br><span class="line"> System.out.println(update);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、JdbcTemplate-操作数据库（修改和删除）"><a href="#3、JdbcTemplate-操作数据库（修改和删除）" class="headerlink" title="3、JdbcTemplate 操作数据库（修改和删除）"></a>3、JdbcTemplate 操作数据库（修改和删除）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、修改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set username=?,ustatus=? where user_id=?&quot;</span>;</span><br><span class="line"> Object[] args = &#123;book.getUsername(), book.getUstatus(),book.getUserId()&#125;;</span><br><span class="line"> <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, args);</span><br><span class="line"> System.out.println(update);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、删除</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_book where user_id=?&quot;</span>;</span><br><span class="line"> <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, id);</span><br><span class="line"> System.out.println(update);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用JdbcTemplate 模板所实现的 “增删改” 都是调用了同一个 “update” 方法</span></span><br></pre></td></tr></table></figure><h3 id="4、JdbcTemplate-操作数据库（查询返回某个值）"><a href="#4、JdbcTemplate-操作数据库（查询返回某个值）" class="headerlink" title="4、JdbcTemplate 操作数据库（查询返回某个值）"></a>4、JdbcTemplate 操作数据库（查询返回某个值）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询表记录数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">selectCount</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from t_book&quot;</span>;</span><br><span class="line"><span class="comment">//queryForObject方法中：第一个参数代表--sql语句；第二个参数代表--返回类型class  </span></span><br><span class="line"> <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line"> <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">JdbcTemplate 操作数据库</span><br></pre></td></tr></table></figure><h3 id="5、JdbcTemplate-操作数据库（查询返回对象）"><a href="#5、JdbcTemplate-操作数据库（查询返回对象）" class="headerlink" title="5、JdbcTemplate 操作数据库（查询返回对象）"></a>5、JdbcTemplate 操作数据库（查询返回对象）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询返回对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">findBookInfo</span><span class="params">(String id)</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_book where user_id=?&quot;</span>;</span><br><span class="line"> <span class="comment">//调用方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    queryForObject方法中：</span></span><br><span class="line"><span class="comment">        第一个参数：sql语句</span></span><br><span class="line"><span class="comment">        第二个参数：RowMapper 是接口，针对返回不同类型数据，使用这个接口里面 实现类 完成数据封装</span></span><br><span class="line"><span class="comment">        第三个参数：sql 语句值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class), id);</span><br><span class="line"> <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、JdbcTemplate-操作数据库（查询返回集合）"><a href="#6、JdbcTemplate-操作数据库（查询返回集合）" class="headerlink" title="6、JdbcTemplate 操作数据库（查询返回集合）"></a>6、JdbcTemplate 操作数据库（查询返回集合）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所用场景：查询图书列表分页、、</span></span><br><span class="line"><span class="comment">//查询返回集合</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">findAllBook</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_book&quot;</span>;</span><br><span class="line"> <span class="comment">//调用方法</span></span><br><span class="line"> List&lt;Book&gt; bookList = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class));</span><br><span class="line"> <span class="keyword">return</span> bookList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、JdbcTemplate-操作数据库（批量操作）"><a href="#7、JdbcTemplate-操作数据库（批量操作）" class="headerlink" title="7、JdbcTemplate 操作数据库（批量操作）"></a>7、JdbcTemplate 操作数据库（批量操作）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量添加</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchAddBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_book values(?,?,?)&quot;</span>;</span><br><span class="line"><span class="comment">//batchUpdate方法 第一个参数：sql语句        第二个参数：List集合，添加多条记录数据</span></span><br><span class="line"> <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line"> System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//批量添加测试</span></span><br><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Object[] o1 = &#123;<span class="string">&quot;3&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;a&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;4&quot;</span>,<span class="string">&quot;c++&quot;</span>,<span class="string">&quot;b&quot;</span>&#125;;</span><br><span class="line">Object[] o3 = &#123;<span class="string">&quot;5&quot;</span>,<span class="string">&quot;MySQL&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line">batchArgs.add(o3);</span><br><span class="line"><span class="comment">//调用批量添加</span></span><br><span class="line">bookService.batchAdd(batchArgs);</span><br></pre></td></tr></table></figure><h3 id="8、JdbcTemplate-实现批量修改操作"><a href="#8、JdbcTemplate-实现批量修改操作" class="headerlink" title="8、JdbcTemplate 实现批量修改操作"></a>8、JdbcTemplate 实现批量修改操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量修改(同批量添加一样，调用同一个方法)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchUpdateBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set username=?,ustatus=? where user_id=?&quot;</span>;</span><br><span class="line"> <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line"> System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis笔记</title>
      <link href="posts/d40.html"/>
      <url>posts/d40.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="安装-Linux"><a href="#安装-Linux" class="headerlink" title="安装(Linux):"></a>安装(Linux):</h2><h3 id="第一步：下载redis安装包"><a href="#第一步：下载redis安装包" class="headerlink" title="第一步：下载redis安装包"></a>第一步：下载redis安装包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line"></span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.2.tar.gz</span><br></pre></td></tr></table></figure><h3 id="第二步：解压压缩包"><a href="#第二步：解压压缩包" class="headerlink" title="第二步：解压压缩包"></a>第二步：解压压缩包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-5.0.2.tar.gz</span><br></pre></td></tr></table></figure><h3 id="第三步：yum安装gcc依赖"><a href="#第三步：yum安装gcc依赖" class="headerlink" title="第三步：yum安装gcc依赖"></a>第三步：yum安装gcc依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc</span><br></pre></td></tr></table></figure><p>遇到选择,输入y即可</p><h3 id="第四步：跳转到redis解压目录下"><a href="#第四步：跳转到redis解压目录下" class="headerlink" title="第四步：跳转到redis解压目录下"></a>第四步：跳转到redis解压目录下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd redis-5.0.2</span><br></pre></td></tr></table></figure><h3 id="第五步：编译安装"><a href="#第五步：编译安装" class="headerlink" title="第五步：编译安装"></a>第五步：编译安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make MALLOC=libc</span><br><span class="line">cd src &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h2><p>将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize no</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br></pre></td></tr></table></figure><p>第二步：指定redis.conf文件启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[exia@localhost bin]$ redis-server /usr/myredis/redis.conf</span><br><span class="line">[exia@localhost bin]$ redis-cli -p 6379</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; set key1 hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><p>第三步：关闭redis进程</p><p>首先使用ps -aux | grep redis查看redis进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz991stxdwj560bfmadtZ src]# ps -aux | grep redis</span><br><span class="line">root     18714  0.0  0.1 141752  2008 ?        Ssl  13:07   0:00 ./redis-server 127.0.0.1:6379</span><br><span class="line">root     18719  0.0  0.0 112644   968 pts/0    R+   13:09   0:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><h2 id="启动后杂项基础知识"><a href="#启动后杂项基础知识" class="headerlink" title="启动后杂项基础知识"></a>启动后杂项基础知识</h2><ul><li><p>测试redis在机器运行的效能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/bin</span><br><span class="line">redis-benchmark</span><br></pre></td></tr></table></figure></li><li><p>单进程   </p><ul><li>单进程模型来处理客户端的请求。对读写等事件的响应 是通过对epoll函数的包装来做到的。Redis的实际处理速度完全依靠主进程的执行效率</li><li>Epoll是Linux内核为处理大批量文件描述符而作了改进的epoll，是Linux下多路复用IO接口select/poll的增强版本， 它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。</li></ul></li><li><p>默认16个数据库，类似数组下表从零开始，初始默认使用零号库，可在配置文件配置</p></li><li><p><code>select</code>命令切换数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 7 #切换到第八个数据库</span><br></pre></td></tr></table></figure></li><li><p><code>dbsize</code>查看当前数据库的key的数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dbsize</span><br><span class="line">key * #查看所有键</span><br></pre></td></tr></table></figure><p>遇到以下情况:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">(error) MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data set are disabled, because this instance is configured to report errors during writes if RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs for details about the RDB error.</span><br></pre></td></tr></table></figure><p>请参考：</p><p><a href="https://blog.csdn.net/xc_zhou/article/details/80893326">[230]连接Redis后执行命令错误 MISCONF Redis is configured to save RDB snapshots</a></p></li><li><p><code>flushdb</code>：清空当前库</p></li><li><p><code>flushall</code>；通杀全部库</p></li><li><p>统一密码管理，16个库都是同样密码，要么都OK要么一个也连接不上</p></li><li><p>Redis索引都是从零开始</p></li><li><p>为什么默认端口是6379(作者纪念一个歌手)</p></li></ul><h2 id="常用五大数据类型简介"><a href="#常用五大数据类型简介" class="headerlink" title="常用五大数据类型简介"></a>常用五大数据类型简介</h2><h3 id="Redis的五大数据类型"><a href="#Redis的五大数据类型" class="headerlink" title="Redis的五大数据类型"></a>Redis的五大数据类型</h3><ul><li>String（字符串）   <ul><li>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</li><li>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。</li><li>string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M</li></ul></li><li>Hash（哈希，类似java里的Map）   <ul><li>Redis hash 是一个键值对集合。</li><li>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</li><li>类似Java里面的Map&lt;String,Object&gt;</li></ul></li><li>List（列表）   <ul><li>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。</li><li>它的底层实际是个链表</li></ul></li><li>Set（集合）   <ul><li>Redis的Set是string类型的无序集合。它是通过HashTable实现实现的</li></ul></li><li>Zset(sorted set：有序集合)   <ul><li>Redis zset 和 set 一样也是string类型元素的集合，且不允许重复的成员。</li><li>不同的是每个元素都会关联一个double类型的分数。</li><li>redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的，但分数(score)却可以重复。</li></ul></li><li>哪里去获得redis常见数据类型操作命令   <ul><li><a href="https://www.oschina.net/action/GoToLink?url=http://redisdoc.com/">Redis 命令参考</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https://redis.io/commands">Redis 官网命令参考</a></li></ul></li></ul><h2 id="Key关键字"><a href="#Key关键字" class="headerlink" title="Key关键字"></a>Key关键字</h2><h3 id="常用的"><a href="#常用的" class="headerlink" title="常用的"></a>常用的</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>DEL key</td><td>该命令用于在 key 存在时删除 key。</td></tr><tr><td>DUMP key</td><td>序列化给定 key ，并返回被序列化的值。</td></tr><tr><td>EXISTS key</td><td>检查给定 key 是否存在。</td></tr><tr><td>EXPIRE key seconds</td><td>为给定 key 设置过期时间，以秒计。</td></tr><tr><td>EXPIREAT key timestamp</td><td>EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td></tr><tr><td>PEXPIRE key milliseconds</td><td>设置 key 的过期时间以毫秒计。</td></tr><tr><td>PEXPIREAT key milliseconds-timestamp</td><td>设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td></tr><tr><td>KEYS pattern</td><td>查找所有符合给定模式( pattern)的 key 。</td></tr><tr><td>MOVE key db</td><td>将当前数据库的 key 移动到给定的数据库 db 当中。</td></tr><tr><td>PERSIST key</td><td>移除 key 的过期时间，key 将持久保持。</td></tr><tr><td>PTTL key</td><td>以毫秒为单位返回 key 的剩余的过期时间。</td></tr><tr><td>TTL key</td><td>以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td></tr><tr><td>RANDOMKEY</td><td>从当前数据库中随机返回一个 key 。</td></tr><tr><td>RENAME key newkey</td><td>修改 key 的名称</td></tr><tr><td>RENAMENX key newkey</td><td>仅当 newkey 不存在时，将 key 改名为 newkey 。</td></tr><tr><td>SCAN cursor [MATCH pattern] [COUNT count]</td><td>迭代数据库中的数据库键。</td></tr><tr><td>TYPE key</td><td>返回 key 所储存的值的类型。</td></tr></tbody></table><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ul><li>keys *</li><li>exists key的名字，判断某个key是否存在</li><li>move key db —&gt;当前库就没有了，被移除了</li><li>expire key 秒钟：为给定的key设置过期时间</li><li>ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</li><li>type key 查看你的key是什么类型</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>单值单value</p><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SET key value</td><td>设置指定 key 的值</td></tr><tr><td>GET key</td><td>获取指定 key 的值。</td></tr><tr><td>GETRANGE key start end</td><td>返回 key 中字符串值的子字符</td></tr><tr><td>GETSET key value</td><td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td></tr><tr><td>GETBIT key offset</td><td>对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td></tr><tr><td>MGET key1 [key2..]</td><td>获取所有(一个或多个)给定 key 的值。</td></tr><tr><td>SETBIT key offset value</td><td>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td></tr><tr><td>SETEX key seconds value</td><td>将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td></tr><tr><td>SETNX key value</td><td>只有在 key 不存在时设置 key 的值。</td></tr><tr><td>SETRANGE key offset value</td><td>用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td></tr><tr><td>STRLEN key</td><td>返回 key 所储存的字符串值的长度。</td></tr><tr><td>MSET key value [key value …]</td><td>同时设置一个或多个 key-value 对。</td></tr><tr><td>MSETNX key value [key value …]</td><td>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td></tr><tr><td>PSETEX key milliseconds value</td><td>这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td></tr><tr><td>INCR key</td><td>将 key 中储存的数字值增一。</td></tr><tr><td>INCRBY key increment</td><td>将 key 所储存的值加上给定的增量值（increment） 。</td></tr><tr><td>INCRBYFLOAT key increment</td><td>将 key 所储存的值加上给定的浮点增量值（increment） 。</td></tr><tr><td>DECR key</td><td>将 key 中储存的数字值减一。</td></tr><tr><td>DECRBY key decrement</td><td>key 所储存的值减去给定的减量值（decrement） 。</td></tr><tr><td>APPEND key value</td><td>如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</td></tr></tbody></table><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><ul><li>set/get/del/append/strlen</li><li>Incr/decr/incrby/decrby,一定要是数字才能进行加减</li><li>getrange/setrange</li><li>setex(set with expire)键秒值/setnx(set if not exist)</li><li>mset/mget/msetnx</li><li>getset(先get再set)</li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>单值多value</p><h3 id="常用-1"><a href="#常用-1" class="headerlink" title="常用"></a>常用</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>BLPOP key1 [key2 ] timeout</td><td>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>BRPOP key1 [key2 ] timeout</td><td>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>BRPOPLPUSH source destination timeout</td><td>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>LINDEX key index</td><td>通过索引获取列表中的元素</td></tr><tr><td>LINSERT key BEFORE/AFTER pivot value</td><td>在列表的元素前或者后插入元素</td></tr><tr><td>LLEN key</td><td>获取列表长度</td></tr><tr><td>LPOP key</td><td>移出并获取列表的第一个元素</td></tr><tr><td>LPUSH key value1 [value2]</td><td>将一个或多个值插入到列表头部</td></tr><tr><td>LPUSHX key value</td><td>将一个值插入到已存在的列表头部</td></tr><tr><td>LRANGE key start stop</td><td>获取列表指定范围内的元素</td></tr><tr><td>LREM key count value</td><td>移除列表元素</td></tr><tr><td>LSET key index value</td><td>通过索引设置列表元素的值</td></tr><tr><td>LTRIM key start stop</td><td>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td>RPOP key</td><td>移除列表的最后一个元素，返回值为移除的元素。</td></tr><tr><td>RPOPLPUSH source destination</td><td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td>RPUSH key value1 [value2]</td><td>在列表中添加一个或多个值</td></tr><tr><td>RPUSHX key value</td><td>为已存在的列表添加值</td></tr></tbody></table><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><ul><li><p>lpush/rpush/lrange</p></li><li><p>lpop/rpop</p></li><li><p>lindex，按照索引下标获得元素(从上到下)</p></li><li><p>llen</p></li><li><p>lrem key 删N个value</p></li><li><p>ltrim key 开始index 结束index，截取指定范围的值后再赋值给key</p></li><li><p>rpoplpush 源列表 目的列表</p></li><li><p>lset key index value</p></li><li><p>linsert key before/after 值1 值2</p></li><li><blockquote><p> 1.lpush</p><p> 从左往右添加元素</p><p> **在key 对应 list的头部添加字符串元素</p><p>**</p><p> 2.rpush</p><p> 从右到左添加元素</p><p> 在key 对应 list 的尾部添加字符串元素</p></blockquote></li></ul><p>性能总结：</p><ul><li>它是一个字符串链表，left、right都可以插入添加；</li><li>如果键不存在，创建新的链表；</li><li>如果键已存在，新增内容；</li><li>如果值全移除，对应的键也就消失了。</li><li>链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了。</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>单值多value</p><h3 id="常用-2"><a href="#常用-2" class="headerlink" title="常用"></a>常用</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SADD key member1 [member2]</td><td>向集合添加一个或多个成员</td></tr><tr><td>SCARD key</td><td>获取集合的成员数</td></tr><tr><td>SDIFF key1 [key2]</td><td>返回给定所有集合的差集</td></tr><tr><td>SDIFFSTORE destination key1 [key2]</td><td>返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td>SINTER key1 [key2]</td><td>返回给定所有集合的交集</td></tr><tr><td>SINTERSTORE destination key1 [key2]</td><td>返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td>SISMEMBER key member</td><td>判断 member 元素是否是集合 key 的成员</td></tr><tr><td>SMEMBERS key</td><td>返回集合中的所有成员</td></tr><tr><td>SMOVE source destination member</td><td>将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td>SPOP key</td><td>移除并返回集合中的一个随机元素</td></tr><tr><td>SRANDMEMBER key [count]</td><td>返回集合中一个或多个随机数</td></tr><tr><td>SREM key member1 [member2]</td><td>移除集合中一个或多个成员</td></tr><tr><td>SUNION key1 [key2]</td><td>返回所有给定集合的并集</td></tr><tr><td>SUNIONSTORE destination key1 [key2]</td><td>所有给定集合的并集存储在 destination 集合中</td></tr><tr><td>SSCAN key cursor [MATCH pattern] [COUNT count]</td><td>迭代集合中的元素</td></tr></tbody></table><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><ul><li>sadd/smembers/sismember</li><li>scard，获取集合里面的元素个数</li><li>srem key value 删除集合中元素</li><li>srandmember key 某个整数(随机出几个数)</li><li>spop key 随机出栈</li><li>smove key1 key2 在key1里某个值 作用是将key1里的某个值赋给key2</li><li>数学集合类   <ul><li>差集：sdiff</li><li>交集：sinter</li><li>并集：sunion</li></ul></li></ul><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>KV模式不变，但V是一个键值对</p><h3 id="常用-3"><a href="#常用-3" class="headerlink" title="常用"></a>常用</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>HDEL key field1 [field2]</td><td>删除一个或多个哈希表字段</td></tr><tr><td>HEXISTS key field</td><td>查看哈希表 key 中，指定的字段是否存在。</td></tr><tr><td>HGET key field</td><td>获取存储在哈希表中指定字段的值。</td></tr><tr><td>HGETALL key</td><td>获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td>HINCRBY key field increment</td><td>为哈希表 key 中的指定字段的整数值加上增量 increment 。</td></tr><tr><td>HINCRBYFLOAT key field increment</td><td>为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td></tr><tr><td>HKEYS key</td><td>获取所有哈希表中的字段</td></tr><tr><td>HLEN key</td><td>获取哈希表中字段的数量</td></tr><tr><td>HMGET key field1 [field2]</td><td>获取所有给定字段的值</td></tr><tr><td>HMSET key field1 value1 [field2 value2 ]</td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中。</td></tr><tr><td>HSET key field value</td><td>将哈希表 key 中的字段 field 的值设为 value 。</td></tr><tr><td>HSETNX key field value</td><td>只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td>HVALS key</td><td>获取哈希表中所有值。</td></tr><tr><td>HSCAN key cursor [MATCH pattern] [COUNT count]</td><td>迭代哈希表中的键值对。</td></tr></tbody></table><h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><ul><li>hset/hget/hmset/hmget/hgetall/hdel</li><li>hlen</li><li>hexists key 在key里面的某个值的key</li><li>hkeys/hvals</li><li>hincrby/hincrbyfloat</li><li>hsetnx</li></ul><h2 id="ZSet"><a href="#ZSet" class="headerlink" title="ZSet"></a>ZSet</h2><p>在set基础上，加一个score值。 之前set是k1 v1 v2 v3， 现在zset是k1 score1 v1 score2 v2</p><h3 id="常用-4"><a href="#常用-4" class="headerlink" title="常用"></a>常用</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ZADD key score1 member1 [score2 member2]</td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td>ZCARD key</td><td>获取有序集合的成员数</td></tr><tr><td>ZCOUNT key min max</td><td>计算在有序集合中指定区间分数的成员数</td></tr><tr><td>ZINCRBY key increment member</td><td>有序集合中对指定成员的分数加上增量 increment</td></tr><tr><td>ZINTERSTORE destination numkeys key [key …]</td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td>ZLEXCOUNT key min max</td><td>在有序集合中计算指定字典区间内成员数量</td></tr><tr><td>ZRANGE key start stop [WITHSCORES]</td><td>通过索引区间返回有序集合指定区间内的成员</td></tr><tr><td>ZRANGEBYLEX key min max [LIMIT offset count]</td><td>通过字典区间返回有序集合的成员</td></tr><tr><td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</td><td>通过分数返回有序集合指定区间内的成员</td></tr><tr><td>ZRANK key member</td><td>返回有序集合中指定成员的索引</td></tr><tr><td>ZREM key member [member …]</td><td>移除有序集合中的一个或多个成员</td></tr><tr><td>ZREMRANGEBYLEX key min max</td><td>移除有序集合中给定的字典区间的所有成员</td></tr><tr><td>ZREMRANGEBYRANK key start stop</td><td>移除有序集合中给定的排名区间的所有成员</td></tr><tr><td>ZREMRANGEBYSCORE key min max</td><td>移除有序集合中给定的分数区间的所有成员</td></tr><tr><td>ZREVRANGE key start stop [WITHSCORES]</td><td>返回有序集中指定区间内的成员，通过索引，分数从高到低</td></tr><tr><td>ZREVRANGEBYSCORE key max min [WITHSCORES]</td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td>ZREVRANK key member</td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td>ZSCORE key member</td><td>返回有序集中，成员的分数值</td></tr><tr><td>ZUNIONSTORE destination numkeys key [key …]</td><td>计算给定的一个或多个有序集的并集，并存储在新的 key 中</td></tr><tr><td>ZSCAN key cursor [MATCH pattern] [COUNT count]</td><td>迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><ul><li>zadd/zrange   <ul><li>Withscores</li></ul></li><li>zrangebyscore key 开始score 结束score   <ul><li>withscores</li><li>( 不包含</li><li>Limit 作用是返回限制     <ul><li>limit 开始下标步 多少步</li></ul></li></ul></li><li>zrem key 某score下对应的value值，作用是删除元素</li><li>zcard/zcount key score区间/zrank key values值，作用是获得下标值/zscore key 对应值,获得分数</li><li>zrevrank key values值，作用是逆序获得下标值</li><li>zrevrange</li><li>zrevrangebyscore key 结束score 开始score</li></ul><h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><p>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf(Windows 名为 redis.windows.conf)。</p><p>你可以通过 CONFIG 命令查看或设置配置项。</p><p><strong>语法</strong></p><p><code>Redis CONFIG</code> 命令格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class="line"></span><br><span class="line">1) &quot;loglevel&quot;</span><br><span class="line">2) &quot;notice&quot;</span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>redis.conf 配置项说明如下：</p><p><strong>注意</strong>，下面配置项说明并不全，了解更多请检阅redis.conf。</p><table><thead><tr><th>序号</th><th>配置项</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td><code>daemonize no</code></td><td>Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</td></tr><tr><td>2</td><td><code>pidfile /var/run/redis.pid</code></td><td>当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定</td></tr><tr><td>3</td><td><code>port 6379</code></td><td>指定 Redis 监听端口，默认端口为 6379，作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字</td></tr><tr><td>4</td><td><code>bind 127.0.0.1</code></td><td>绑定的主机地址</td></tr><tr><td>5</td><td><code>timeout 300</code></td><td>当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能</td></tr><tr><td>6</td><td><code>loglevel notice</code></td><td>指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td></tr><tr><td>7</td><td><code>logfile stdout</code></td><td>日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null</td></tr><tr><td>8</td><td><code>databases 16</code></td><td>设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td></tr><tr><td>9</td><td><code>save &lt;seconds&gt; &lt;changes&gt;</code><br>Redis 默认配置文件中提供了三个条件：<br><code>save 900 1</code><br><code>save 300 10</code><br><code>save 60 10000</code><br></td><td>分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。<br>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td></tr><tr><td>10</td><td><code>rdbcompression yes</code></td><td>指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td></tr><tr><td>11</td><td><code>dbfilename dump.rdb</code></td><td>指定本地数据库文件名，默认值为 dump.rdb</td></tr><tr><td>12</td><td><code>dir ./</code></td><td>指定本地数据库存放目录</td></tr><tr><td>13</td><td><code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></td><td>设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</td></tr><tr><td>14</td><td><code>masterauth &lt;master-password&gt;</code></td><td>当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td></tr><tr><td>15</td><td><code>requirepass foobared</code></td><td>设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</td></tr><tr><td>16</td><td><code>maxclients 128</code></td><td>设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis  进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis  会关闭新的连接并向客户端返回 max number of clients reached 错误信息</td></tr><tr><td>17</td><td><code>maxmemory &lt;bytes&gt;</code></td><td>指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis  会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的  vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td></tr><tr><td>18</td><td><code>appendonly no</code></td><td>指定是否在每次更新操作后进行日志记录，Redis  在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save  条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no</td></tr><tr><td>19</td><td><code>appendfilename appendonly.aof</code></td><td>指定更新日志文件名，默认为 appendonly.aof</td></tr><tr><td>20</td><td><code>appendfsync everysec</code></td><td>指定更新日志条件，共有 3  个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用  fsync() 将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折中，默认值）<br></td></tr><tr><td>21</td><td><code>vm-enabled no</code></td><td>指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将浏览量较少的页即冷数据 swap 到磁盘上，浏览多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）</td></tr><tr><td>22</td><td><code>vm-swap-file /tmp/redis.swap</code></td><td>虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个 Redis 实例共享</td></tr><tr><td>23</td><td><code>vm-max-memory 0</code></td><td>将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory  设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0  的时候，其实是所有 value 都存在于磁盘。默认值为 0</td></tr><tr><td>24</td><td><code>vm-page-size 32</code></td><td>Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page  上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32  或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值</td></tr><tr><td>25</td><td><code>vm-pages 134217728</code></td><td>设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。</td></tr><tr><td>26</td><td><code>vm-max-threads 4</code></td><td>设置连接swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</td></tr><tr><td>27</td><td><code>glueoutputbuf yes</code></td><td>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</td></tr><tr><td>28</td><td><code>hash-max-zipmap-entries 64</code><br><code>hash-max-zipmap-value 512</code></td><td>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td></tr><tr><td>29</td><td><code>activerehashing yes</code></td><td>指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）</td></tr><tr><td>30</td><td><code>include /path/to/local.conf</code></td><td>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td></tr></tbody></table><h2 id="持久化之RDB"><a href="#持久化之RDB" class="headerlink" title="持久化之RDB"></a>持久化之RDB</h2><p>RDB（Redis DataBase）</p><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><ul><li>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里</li><li>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到  一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。  整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</li></ul><blockquote><p>Fork</p><p>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</p></blockquote><ul><li>rdb 保存的是dump.rdb文件</li><li>相关配置在配置文件的位置 - 在redis.conf搜寻<code>### SNAPSHOTTING ###</code></li></ul><h3 id="如何触发RDB快照"><a href="#如何触发RDB快照" class="headerlink" title="如何触发RDB快照"></a>如何触发RDB快照</h3><ul><li><p>配置文件中默认的快照配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbfilename dump.rdb</span><br></pre></td></tr></table></figure><ul><li>冷拷贝后重新使用     <ul><li>可以cp dump.rdb dump_new.rdb</li></ul></li></ul></li><li><p>命令save或者是bgsave   </p><ul><li>Save：save时只管保存，其它不管，全部阻塞</li><li>BGSAVE：Redis会在后台异步进行快照操作， 快照同时还可以响应客户端请求。可以通过lastsave 命令获取最后一次成功执行快照的时间</li></ul></li><li><p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p></li></ul><h3 id="如何恢复"><a href="#如何恢复" class="headerlink" title="如何恢复"></a>如何恢复</h3><ul><li>将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可</li><li><code>CONFIG GET dir</code>获取目录</li></ul><h3 id="优势与劣势"><a href="#优势与劣势" class="headerlink" title="优势与劣势"></a>优势与劣势</h3><ul><li>优势   <ul><li>适合大规模的数据恢复</li><li>对数据完整性和一致性要求不高</li></ul></li><li>劣势   <ul><li>在一定间隔时间做一次备份，所以如果redis意外down掉的话，就 会丢失最后一次快照后的所有修改</li><li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li></ul></li></ul><h3 id="如何停止"><a href="#如何停止" class="headerlink" title="如何停止"></a>如何停止</h3><p>动态所有停止RDB保存规则的方法：<code>redis-cli config set save &quot;&quot;</code></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/21.png" alt="img"></p><ul><li>RDB是一个非常紧凑的文件。</li><li>RDB在保存RDB文件时父进程唯一需要做的就是fork出一个子进程，接下来的工作全部由子进程来做，父进程不需要再做其他I0操作，所以RDB持久化方式可以最大化redis的性能。</li><li>与AOF相比，在恢复大的数据集的时候，RDB方式会更快一一些。</li><li>数据丢失风险大。</li><li>RDB需要经常fork子进程来保存数据集到硬盘上，当数据集比较大的时候fork的过程是非常耗时的吗，可能会导致Redis在一些毫秒级不能回应客户端请求。</li></ul><h2 id="持久化之AOF"><a href="#持久化之AOF" class="headerlink" title="持久化之AOF"></a>持久化之AOF</h2><p>AOF（Append Only File）</p><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h3><p>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)， 只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><h3 id="AOF配置"><a href="#AOF配置" class="headerlink" title="AOF配置"></a>AOF配置</h3><ul><li>相关配置在配置文件的位置 - 在redis.conf搜寻<code>### APPEND ONLY MODE ###</code></li><li>aof保存的是appendonly.aof文件（在配置文件可修改文件名）</li></ul><h3 id="AOF启动-修复-恢复"><a href="#AOF启动-修复-恢复" class="headerlink" title="AOF启动/修复/恢复"></a>AOF启动/修复/恢复</h3><ul><li>正常恢复   <ul><li>启动：设置Yes     <ul><li>修改默认的appendonly no，改为yes</li></ul></li><li>将有数据的aof文件复制一份保存到对应目录(config get dir)</li><li>恢复：重启redis然后重新加载</li></ul></li><li>异常恢复   <ul><li>启动：设置Yes     <ul><li>修改默认的appendonly no，改为yes</li></ul></li><li>备份被写坏的AOF文件</li><li>修复：     <ul><li>Redis-check-aof –fix进行修复</li></ul></li><li>恢复：重启redis然后重新加载</li></ul></li></ul><h3 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h3><ul><li>是什么：   <ul><li>AOF采用文件追加方式，文件会越来越大。为避免出现此种情况，新增了重写机制， 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集。可以使用命令bgrewriteaof</li></ul></li><li>重写原理   <ul><li>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，  遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，  而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似</li></ul></li><li>触发机制   <ul><li>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发</li></ul></li></ul><h3 id="优势与劣势-1"><a href="#优势与劣势-1" class="headerlink" title="优势与劣势"></a>优势与劣势</h3><ul><li>优势   <ul><li>每修改同步：appendfsync always 同步持久化 每次发生数据变更会被立即记录到磁盘 性能较差但数据完整性比较好</li><li>每秒同步：appendfsync everysec 异步操作，每秒记录 如果一秒内宕机，有数据丢失</li><li>不同步：appendfsync no 从不同步</li></ul></li><li>劣势   <ul><li>相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢于rdb</li><li>Aof运行效率要慢于rdb,每秒同步策略效率较好，不同步效率和rdb相同</li></ul></li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/22.png" alt="img"></p><ul><li>AOF文件时一个只进行追加的日志文件</li><li>Redis可以在AOF文件体积变得过大时，自动地在后台对AOF进行重写</li><li>AOF文件有序地保存了对数据库执行的所有写入操作，这些写入操作以Redis协议的格式保存，因此AOF文件的内容非常容易被人读懂，对文件进行分析也很轻松</li><li>对于相同的数据集来说，AOF文件的体积通常要大于RDB文件的体积</li><li>根据所使用的fsync 策略，AOF的速度可能会慢于RDB</li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h3><p>可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入，不许加塞。</p><h3 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h3><p>一个队列中，一次性、顺序性、排他性的执行一系列命令。</p><h3 id="怎么玩"><a href="#怎么玩" class="headerlink" title="怎么玩"></a>怎么玩</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>DISCARD</td><td>取消事务，放弃执行事务块内的所有命令。</td></tr><tr><td>EXEC</td><td>执行所有事务块内的命令。</td></tr><tr><td>MULTI</td><td>标记一个事务块的开始。</td></tr><tr><td>UNWATCH</td><td>取消 WATCH 命令对所有 key 的监视。</td></tr><tr><td>WATCH key [key …]</td><td>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</td></tr></tbody></table><h4 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h4><h5 id="正常执行"><a href="#正常执行" class="headerlink" title="正常执行"></a>正常执行</h5><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/23.png" alt="img"></p><h5 id="放弃事务"><a href="#放弃事务" class="headerlink" title="放弃事务"></a>放弃事务</h5><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/24.png" alt="img"></p><h5 id="全体连坐"><a href="#全体连坐" class="headerlink" title="全体连坐"></a>全体连坐</h5><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/25.png" alt="img"></p><p>类似Java编译异常</p><h5 id="冤头债主"><a href="#冤头债主" class="headerlink" title="冤头债主"></a>冤头债主</h5><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/26.png" alt="img"></p><p>类似Java运行异常</p><h5 id="watch监控"><a href="#watch监控" class="headerlink" title="watch监控"></a>watch监控</h5><h6 id="悲观锁-乐观锁-CAS-Check-And-Set"><a href="#悲观锁-乐观锁-CAS-Check-And-Set" class="headerlink" title="悲观锁/乐观锁/CAS(Check And Set)"></a>悲观锁/乐观锁/CAS(Check And Set)</h6><ul><li>悲观锁   <ul><li>悲观锁(Pessimistic Lock),  顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</li></ul></li><li>乐观锁   <ul><li>乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。</li><li>乐观锁策略:提交版本必须大于记录当前版本才能执行更新</li></ul></li><li>CAS</li></ul><h6 id="信用卡可用余额和欠额"><a href="#信用卡可用余额和欠额" class="headerlink" title="信用卡可用余额和欠额"></a>信用卡可用余额和欠额</h6><ul><li>初始化信用卡可用余额和欠额</li></ul><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/27.png" alt="img"></p><ul><li>无加塞篡改，先监控再开启multi， 保证两笔金额变动在同一个事务内</li></ul><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/28.png" alt="img"></p><ul><li>有加塞篡改   <ul><li>监控了key，<strong>如果key被修改了</strong>，后面一个事务的执行失效</li></ul></li></ul><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/29.png" alt="img"></p><ul><li>unwatch</li></ul><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/30.png" alt="img"></p><ul><li>一旦执行了exec之前加的监控锁都会被取消掉了（一次性）</li></ul><h6 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h6><ul><li>Watch指令，类似乐观锁，事务提交时，如果Key的值已被别的客户端改变， 比如某个list已被别的客户端push/pop过了，整个事务队列都不会被执行</li><li>通过WATCH命令在事务执行之前监控了多个Keys，倘若在WATCH之后有任何Key的值发生了变化， EXEC命令执行的事务都将被放弃，同时返回Nullmulti-bulk应答以通知调用者事务执行失败</li></ul><h3 id="3阶段"><a href="#3阶段" class="headerlink" title="3阶段"></a>3阶段</h3><ul><li>开启：以MULTI开始一个事务</li><li>入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</li><li>执行：由EXEC命令触发事务</li></ul><h3 id="3特性"><a href="#3特性" class="headerlink" title="3特性"></a>3特性</h3><ul><li><strong>单独的隔离操作</strong>：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li><li><strong>没有隔离级别的概念</strong>：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行， 也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题</li><li><strong>不保证原子性</strong>：redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ul><p>不遵循传统的ACID中的AI</p><h2 id="消息订阅发布简介"><a href="#消息订阅发布简介" class="headerlink" title="消息订阅发布简介"></a>消息订阅发布简介</h2><p><strong>用观察者模式理解学习</strong></p><p>进程间的一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/31.png" alt="img"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/32.png" alt="img"></p><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>PSUBSCRIBE pattern [pattern …]</td><td>订阅一个或多个符合给定模式的频道。</td></tr><tr><td>PUBSUB subcommand [argument [argument …]]</td><td>查看订阅与发布系统状态。</td></tr><tr><td>PUBLISH channel message</td><td>将信息发送到指定的频道。</td></tr><tr><td>PUNSUBSCRIBE [pattern [pattern …]]</td><td>退订所有给定模式的频道。</td></tr><tr><td>SUBSCRIBE channel [channel …]</td><td>订阅给定的一个或多个频道的信息。</td></tr><tr><td>UNSUBSCRIBE [channel [channel …]]</td><td>指退订给定的频道。</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下实例演示了发布订阅是如何工作的。在我们实例中我们创建了订阅频道名为 redisChat:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SUBSCRIBE redisChat</span><br><span class="line"></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;redisChat&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><p>现在，我们先重新开启个 redis 客户端，然后在同一个频道 redisChat 发布两次消息，订阅者就能接收到消息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PUBLISH redisChat &quot;Redis is a great caching technique&quot;</span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; PUBLISH redisChat &quot;Learn redis by runoob.com&quot;</span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"># 订阅者的客户端会显示如下消息</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;redisChat&quot;</span><br><span class="line">3) &quot;Redis is a great caching technique&quot;</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;redisChat&quot;</span><br><span class="line">3) &quot;Learn redis by runoob.com&quot;</span><br></pre></td></tr></table></figure><hr><p>订阅多个通配符 *</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PSUBSCRIBE new*</span><br></pre></td></tr></table></figure><p>收取消息，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH new1 redis2015</span><br></pre></td></tr></table></figure><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="是什么-3"><a href="#是什么-3" class="headerlink" title="是什么"></a>是什么</h3><p>行话：也就是我们所说的主从复制，主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主</p><h3 id="能干嘛-1"><a href="#能干嘛-1" class="headerlink" title="能干嘛"></a>能干嘛</h3><ul><li>读写分离</li><li>容灾恢复</li></ul><h3 id="怎么玩-1"><a href="#怎么玩-1" class="headerlink" title="怎么玩"></a>怎么玩</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li><p>配从(库)不配主(库)</p></li><li><p>从库配置命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof 主库IP 主库端口</span><br></pre></td></tr></table></figure><ul><li>每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件（具体位置：redis.conf搜寻<code>#### REPLICATION ####</code>）</li><li><code>info replication</code></li></ul></li><li><p>修改配置文件细节操作   </p><ul><li>拷贝多个redis.conf文件，按’redis[port].conf’重命名</li><li>开启daemonize yes</li><li>pid文件名字</li><li>指定端口</li><li>log文件名字</li><li>dump.rdb名字</li></ul></li></ul><blockquote><p>replication 英 [ˌreplɪ’keɪʃ(ə)n] 美 [ˌreplɪ’keɪʃ(ə)n]<br> n. (绘画等的)复制;拷贝;重复(实验);(尤指对答辩的)回答</p></blockquote><h4 id="常用3招"><a href="#常用3招" class="headerlink" title="常用3招"></a>常用3招</h4><h5 id="一主二仆"><a href="#一主二仆" class="headerlink" title="一主二仆"></a>一主二仆</h5><ul><li>Init <img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/33.png" alt="img"></li><li>一个Master两个Slave <img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/34.png" alt="img"></li><li>日志查看   <ul><li>主机日志 <img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/35.png" alt="img"></li><li>备机日志 <img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/36.png" alt="img"></li><li><code>info replication</code> <img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/37.png" alt="img"></li></ul></li><li>主从问题演示   <ol><li>切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的123是否也可以复制？     <ul><li>答：从头开始复制；123也可以复制</li></ul></li><li>从机是否可以写？set可否？     <ul><li>答：从机不可写，不可set，主机可写</li></ul></li><li>主机shutdown后情况如何？从机是上位还是原地待命     <ul><li>答：从机还是原地待命（咸鱼翻身，还是咸鱼）</li></ul></li><li>主机又回来了后，主机新增记录，从机还能否顺利复制？     <ul><li>答：能</li></ul></li><li>其中一台从机down后情况如何？依照原有它能跟上大部队吗？     <ul><li>答：不能跟上，每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件（具体位置：redis.conf搜寻<code>#### REPLICATION ####</code>）</li></ul></li></ol></li></ul><h5 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h5><ul><li>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力（奴隶的奴隶还是奴隶）</li><li>中途变更转向：会清除之前的数据，重新建立拷贝最新的</li><li><code>slaveof 新主库IP 新主库端口</code></li></ul><h5 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h5><ul><li><pre><code>SLAVEOF no one<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 使当前数据库停止与其他数据库的同步，转成主数据库</span><br><span class="line"></span><br><span class="line">### 复制原理</span><br><span class="line"></span><br><span class="line">- slave启动成功连接到master后会发送一个sync命令</span><br><span class="line">- master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步</span><br><span class="line">- 全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</span><br><span class="line">- 增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</span><br><span class="line">- 但是只要是重新连接master，一次完全同步（全量复制)将被自动执行</span><br><span class="line"></span><br><span class="line">### 哨兵模式(sentinel)</span><br><span class="line"></span><br><span class="line">一组sentinel能同时监控多个master</span><br><span class="line"></span><br><span class="line">#### 是什么</span><br><span class="line"></span><br><span class="line">反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</span><br><span class="line"></span><br><span class="line">#### 怎么玩(使用步骤)</span><br><span class="line"></span><br><span class="line">1. 调整结构，6379带着6380、6381</span><br><span class="line">2. 新建sentinel.conf文件，名字绝不能错</span><br><span class="line">3. 配置哨兵,填写内容   </span><br><span class="line">   1. `sentinel monitor 被监控数据库名字(自己起名字) 127.0.0.1 6379 1`</span><br><span class="line">   2. 上面最后一个数字1，表示主机挂掉后salve投票看让谁接替成为主机，得票数多少后成为主机（PS. 跟官网的描述有出入，下面有官方文档说明）</span><br><span class="line">4. 启动哨兵   </span><br><span class="line">   1. `redis-sentinel /sentinel.conf `（上述目录依照各自的实际情况配置，可能目录不同）</span><br><span class="line">5. 正常主从演示</span><br><span class="line">6. 原有的master挂了</span><br><span class="line">7. 投票新选</span><br><span class="line">8. 重新主从继续开工，info replication查查看</span><br><span class="line"></span><br><span class="line">问题：如果之前挂了的master重启回来，会不会双master冲突？ 答： 不会，原master，变成slave</span><br><span class="line"></span><br></pre></td></tr></table></figure>&gt; sentinel monitor &lt;master-group-name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;&gt; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">For the sake of clarity, let&#x27;s check line by line what the configuration options mean:</span><br><span class="line"></span><br><span class="line">The first line is used to tell Redis to monitor a master called  mymaster, that is at address 127.0.0.1 and port 6379, with a quorum of  2. Everything is pretty obvious but the **quorum** argument:</span><br><span class="line"></span><br><span class="line">- The **quorum** is the number of Sentinels that need  to agree about the fact the master is not reachable, in order to really  mark the master as failing, and eventually start a failover procedure if possible.</span><br><span class="line">- However **the quorum is only used to detect the failure**. In order to actually perform a failover, one of the Sentinels need to  be elected leader for the failover and be authorized to proceed. This  only happens with the vote of the **majority of the Sentinel processes**.</span><br><span class="line"></span><br><span class="line">So for example if you have 5 Sentinel processes, and the quorum for a given master set to the value of 2, this is what happens:</span><br><span class="line"></span><br><span class="line">- If two Sentinels agree at the same time about the master being unreachable, one of the two will try to start a failover.</span><br><span class="line">- If there are at least a total of three Sentinels reachable, the failover will be authorized and will actually start.</span><br><span class="line"></span><br><span class="line">In practical terms this means during failures **Sentinel never starts a failover if the majority of Sentinel processes are unable to talk** (aka no failover in the minority partition).</span><br><span class="line"></span><br><span class="line">[Source](https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fredis.io%2Ftopics%2Fsentinel%2F)</span><br><span class="line"></span><br><span class="line">quorum 英 [ˈkwɔːrəm] 美 [ˈkwɔːrəm]</span><br><span class="line"> n. (会议的)法定人数</span><br><span class="line"></span><br><span class="line">### 复制的缺点</span><br><span class="line"></span><br><span class="line">**复制延时**</span><br><span class="line"></span><br><span class="line">由于所有的写操作都是先在Master上操作，然后同步更新到slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</span><br><span class="line"></span><br><span class="line">## Jedis_测试联通</span><br><span class="line"></span><br><span class="line">- 在Eclipse创建普通Maven工程</span><br><span class="line">- [pom.xml](https://my.oschina.net/jallenkwong/blog/pom.xml)引入下面关键依赖</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>创建新类，测试连通，源码如下：</p></li></ul><p><a href="https://gitee.com/jallenkwong/LearnRedis/blob/master/src/main/java/com/lun/shang/TestPing.java">TestPing.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lun.shang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPing</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"><span class="comment">//输出PONG，redis连通成功</span></span><br><span class="line">System.out.println(jedis.ping());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jedis-常用API"><a href="#Jedis-常用API" class="headerlink" title="Jedis_常用API"></a>Jedis_常用API</h2><p><a href="https://gitee.com/jallenkwong/LearnRedis/blob/master/src/main/java/com/lun/shang/TestAPI.java">TestAPI.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAPI</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="comment">// key</span></span><br><span class="line">Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> keys.iterator(); iterator.hasNext();) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> (String) iterator.next();</span><br><span class="line">System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;jedis.exists====&gt;&quot;</span> + jedis.exists(<span class="string">&quot;k2&quot;</span>));</span><br><span class="line">System.out.println(jedis.ttl(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="comment">// jedis.append(&quot;k1&quot;,&quot;myreids&quot;);</span></span><br><span class="line">System.out.println(jedis.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">jedis.set(<span class="string">&quot;k4&quot;</span>, <span class="string">&quot;k4_redis&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">jedis.mset(<span class="string">&quot;str1&quot;</span>, <span class="string">&quot;v1&quot;</span>, <span class="string">&quot;str2&quot;</span>, <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;str3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">System.out.println(jedis.mget(<span class="string">&quot;str1&quot;</span>, <span class="string">&quot;str2&quot;</span>, <span class="string">&quot;str3&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// jedis.lpush(&quot;mylist&quot;,&quot;v1&quot;,&quot;v2&quot;,&quot;v3&quot;,&quot;v4&quot;,&quot;v5&quot;);</span></span><br><span class="line">List&lt;String&gt; list = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (String element : list) &#123;</span><br><span class="line">System.out.println(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set</span></span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;jd001&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;jd002&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;jd003&quot;</span>);</span><br><span class="line">Set&lt;String&gt; set1 = jedis.smembers(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set1.iterator(); iterator.hasNext();) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> (String) iterator.next();</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line">jedis.srem(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;jd002&quot;</span>);</span><br><span class="line">System.out.println(jedis.smembers(<span class="string">&quot;orders&quot;</span>).size());</span><br><span class="line"></span><br><span class="line"><span class="comment">// hash</span></span><br><span class="line">jedis.hset(<span class="string">&quot;hash1&quot;</span>, <span class="string">&quot;userName&quot;</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">System.out.println(jedis.hget(<span class="string">&quot;hash1&quot;</span>, <span class="string">&quot;userName&quot;</span>));</span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;telphone&quot;</span>, <span class="string">&quot;13811814763&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;abc@163.com&quot;</span>);</span><br><span class="line">jedis.hmset(<span class="string">&quot;hash2&quot;</span>, map);</span><br><span class="line">List&lt;String&gt; result = jedis.hmget(<span class="string">&quot;hash2&quot;</span>, <span class="string">&quot;telphone&quot;</span>, <span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String element : result) &#123;</span><br><span class="line">System.out.println(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zset</span></span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">60d</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">70d</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">80d</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">90d</span>, <span class="string">&quot;v4&quot;</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; s1 = jedis.zrange(<span class="string">&quot;zset01&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> s1.iterator(); iterator.hasNext();) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> (String) iterator.next();</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jedis-事务"><a href="#Jedis-事务" class="headerlink" title="Jedis_事务"></a>Jedis_事务</h2><h3 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Response;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监控key，如果该动了事务就被放弃</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 3 jedis.watch(&quot;serialNum&quot;); jedis.set(&quot;serialNum&quot;,&quot;s#####################&quot;);</span></span><br><span class="line"><span class="comment"> * jedis.unwatch();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> jedis.multi();<span class="comment">// 被当作一个命令进行执行</span></span><br><span class="line">Response&lt;String&gt; response = transaction.get(<span class="string">&quot;serialNum&quot;</span>);</span><br><span class="line">transaction.set(<span class="string">&quot;serialNum&quot;</span>, <span class="string">&quot;s002&quot;</span>);</span><br><span class="line">response = transaction.get(<span class="string">&quot;serialNum&quot;</span>);</span><br><span class="line">transaction.lpush(<span class="string">&quot;list3&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">transaction.lpush(<span class="string">&quot;list3&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">transaction.lpush(<span class="string">&quot;list3&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">transaction.exec();</span><br><span class="line"><span class="comment">// 2 transaction.discard();</span></span><br><span class="line">System.out.println(<span class="string">&quot;serialNum***********&quot;</span> + response.get());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p><a href="https://gitee.com/jallenkwong/LearnRedis/blob/master/src/main/java/com/lun/shang/TestTX.java">TestTX.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTX</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transMethod</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="type">int</span> balance;<span class="comment">// 可用余额</span></span><br><span class="line"><span class="type">int</span> debt;<span class="comment">// 欠额</span></span><br><span class="line"><span class="type">int</span> <span class="variable">amtToSubtract</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">// 实刷额度</span></span><br><span class="line"></span><br><span class="line">jedis.watch(<span class="string">&quot;balance&quot;</span>);</span><br><span class="line"><span class="comment">// jedis.set(&quot;balance&quot;,&quot;5&quot;);//此句不该出现，讲课方便。模拟其他程序已经修改了该条目</span></span><br><span class="line">Thread.sleep(<span class="number">7000</span>);</span><br><span class="line">balance = Integer.parseInt(jedis.get(<span class="string">&quot;balance&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (balance &lt; amtToSubtract) &#123;</span><br><span class="line">jedis.unwatch();</span><br><span class="line">System.out.println(<span class="string">&quot;modify&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;***********transaction&quot;</span>);</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line">transaction.decrBy(<span class="string">&quot;balance&quot;</span>, amtToSubtract);</span><br><span class="line">transaction.incrBy(<span class="string">&quot;debt&quot;</span>, amtToSubtract);</span><br><span class="line">transaction.exec();</span><br><span class="line">balance = Integer.parseInt(jedis.get(<span class="string">&quot;balance&quot;</span>));</span><br><span class="line">debt = Integer.parseInt(jedis.get(<span class="string">&quot;debt&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******&quot;</span> + balance);</span><br><span class="line">System.out.println(<span class="string">&quot;*******&quot;</span> + debt);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通俗点讲，watch命令就是标记一个键，如果标记了一个键， 在提交事务前如果该键被别人修改过，那事务就会失败，这种情况通常可以在程序中 重新再尝试一次。</span></span><br><span class="line"><span class="comment"> * 首先标记了键balance，然后检查余额是否足够，不足就取消标记，并不做扣减； 足够的话，就启动事务进行更新操作，</span></span><br><span class="line"><span class="comment"> * 如果在此期间键balance被其它人修改， 那在提交事务（执行exec）时就会报错， 程序中通常可以捕获这类错误再重新执行一次，直到成功。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="type">TestTX</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestTX</span>();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">retValue</span> <span class="operator">=</span> test.transMethod();</span><br><span class="line">System.out.println(<span class="string">&quot;main retValue-------: &quot;</span> + retValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jedis-主从复制"><a href="#Jedis-主从复制" class="headerlink" title="Jedis_主从复制"></a>Jedis_主从复制</h2><ol><li>6379,6380启动，先各自先独立</li><li>主写，从读</li></ol><p><a href="https://gitee.com/jallenkwong/LearnRedis/blob/master/src/main/java/com/lun/shang/TestMS.java">TestMS.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMS</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis_M</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis_S</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6380</span>);</span><br><span class="line"></span><br><span class="line">jedis_S.slaveof(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">jedis_M.set(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;1122V2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis_S.get(<span class="string">&quot;class&quot;</span>);<span class="comment">//可能有延迟，需再次启动才能使用</span></span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jedis-JedisPool"><a href="#Jedis-JedisPool" class="headerlink" title="Jedis_JedisPool"></a>Jedis_JedisPool</h2><h3 id="JedisPoolUtil"><a href="#JedisPoolUtil" class="headerlink" title="JedisPoolUtil"></a>JedisPoolUtil</h3><ol><li>获取Jedis实例需要从JedisPool中获取</li><li>用完Jedis实例需要返还给JedisPool</li><li>如果Jedis在使用过程中出错，则也需要还给JedisPool</li></ol><p><a href="https://gitee.com/jallenkwong/LearnRedis/blob/master/src/main/java/com/lun/shang/JedisPoolUtil.java">JedisPoolUtil.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisPoolUtil</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">JedisPoolUtil</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title function_">getJedisPoolInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == jedisPool) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (JedisPoolUtil.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == jedisPool) &#123;</span><br><span class="line"><span class="type">JedisPoolConfig</span> <span class="variable">poolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">poolConfig.setMaxActive(<span class="number">1000</span>);</span><br><span class="line">poolConfig.setMaxIdle(<span class="number">32</span>);</span><br><span class="line">poolConfig.setMaxWait(<span class="number">100</span> * <span class="number">1000</span>);</span><br><span class="line">poolConfig.setTestOnBorrow(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(poolConfig, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jedisPool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(JedisPool jedisPool, Jedis jedis)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != jedis) &#123;</span><br><span class="line">jedisPool.returnResourceObject(jedis);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>运行测试</p><p><a href="https://gitee.com/jallenkwong/LearnRedis/blob/master/src/main/java/com/lun/shang/TestPool.java">TestPool.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPool</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line"><span class="type">JedisPool</span> <span class="variable">jedisPool2</span> <span class="operator">=</span> JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(jedisPool == jedisPool2);</span><br><span class="line"></span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">jedis = jedisPool.getResource();</span><br><span class="line">jedis.set(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">JedisPoolUtil.release(jedisPool, jedis);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置总结"><a href="#配置总结" class="headerlink" title="配置总结"></a>配置总结</h3><p>JedisPool的配置参数大部分是由JedisPoolConfig的对应项来赋值的。</p><ul><li><p><strong>maxActive</strong>：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted。</p></li><li><p><strong>maxIdle</strong>：控制一个pool最多有多少个状态为idle(空闲)的jedis实例；</p></li><li><p>whenExhaustedAction</p><p>：表示当pool中的jedis实例都被allocated完时，pool要采取的操作；默认有三种。   </p><ul><li>WHEN_EXHAUSTED_FAIL –&gt; 表示无jedis实例时，直接抛出NoSuchElementException；</li><li>WHEN_EXHAUSTED_BLOCK –&gt; 则表示阻塞住，或者达到maxWait时抛出JedisConnectionException；</li><li>WHEN_EXHAUSTED_GROW –&gt; 则表示新建一个jedis实例，也就说设置的maxActive无用；</li></ul></li><li><p><strong>maxWait</strong>：表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛JedisConnectionException；</p></li><li><p><strong>testOnBorrow</strong>：获得一个jedis实例的时候是否检查连接可用性（ping()）；如果为true，则得到的jedis实例均是可用的；</p></li><li><p><strong>testOnReturn</strong>：return 一个jedis实例给pool时，是否检查连接可用性（ping()）；</p></li><li><p><strong>testWhileIdle</strong>：如果为true，表示有一个idle object  evitor线程对idle  object进行扫描，如果validate失败，此object会被从pool中drop掉；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；</p></li><li><p><strong>timeBetweenEvictionRunsMillis</strong>：表示idle object evitor两次扫描之间要sleep的毫秒数；</p></li><li><p><strong>numTestsPerEvictionRun</strong>：表示idle object evitor每次扫描的最多的对象数；</p></li><li><p><strong>minEvictableIdleTimeMillis</strong>：表示一个对象至少停留在idle状态的最短时间，然后才能被idle object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；</p></li><li><p><strong>softMinEvictableIdleTimeMillis</strong>：在minEvictableIdleTimeMillis基础上，加入了至少minIdle个对象已经在pool里面了。如果为-1，evicted不会根据idle  time驱逐任何对象。如果minEvictableIdleTimeMillis&gt;0，则此项设置无意义，且只有在timeBetweenEvictionRunsMillis大于0时才有意义；</p></li><li><p><strong>lifo</strong>：borrowObject返回对象时，是采用DEFAULT_LIFO（last in first out，即类似cache的最频繁使用队列），如果为False，则表示FIFO队列；</p></li></ul><hr><p>其中JedisPoolConfig对一些参数的默认设置如下：</p><ul><li>testWhileIdle=true</li><li>minEvictableIdleTimeMills=60000</li><li>timeBetweenEvictionRunsMillis=30000</li><li>numTestsPerEvictionRun=-1</li></ul>]]></content>
      
      
      <categories>
          
          <category> redis笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网自学 1</title>
      <link href="posts/a8cf.html"/>
      <url>posts/a8cf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><h3 id="本文档是根据B站视频自己做的计网笔记"><a href="#本文档是根据B站视频自己做的计网笔记" class="headerlink" title="本文档是根据B站视频自己做的计网笔记"></a>本文档是根据B站视频自己做的计网笔记</h3></blockquote><p><img src="https://i.bmp.ovh/imgs/2021/05/15e62da418ed84a3.png"></p><h1 id="1-计算机网络的概念"><a href="#1-计算机网络的概念" class="headerlink" title="1.计算机网络的概念"></a>1.计算机网络的概念</h1><ul><li>是一个将分散的、具有独立功能的计算机系统，通过通信设备（交换机和路由器）与线路连接起来，由功能完善的软件实现资源共享和学习传递的系统。</li><li>互连的、自治的计算机集合。</li><li>互连-互联互通    通信链路</li><li>自治-无主从关系</li></ul><h1 id="2-计算机网络的功能"><a href="#2-计算机网络的功能" class="headerlink" title="2.计算机网络的功能"></a>2.计算机网络的功能</h1><h2 id="1-数据通信（连通性"><a href="#1-数据通信（连通性" class="headerlink" title="1.数据通信（连通性)"></a><u>1.数据通信（连通性)</u></h2><h2 id="2-资源共享"><a href="#2-资源共享" class="headerlink" title="2.资源共享"></a><em><u>2.资源共享</u></em></h2><p>硬件 软件 数据</p><h4 id="3-分布式处理"><a href="#3-分布式处理" class="headerlink" title="3.分布式处理"></a>3.分布式处理</h4><p>多台计算机各自承担同一工作任务的不同部分    Hadoop平台</p><h4 id="4-提高可靠性"><a href="#4-提高可靠性" class="headerlink" title="4.提高可靠性"></a>4.提高可靠性</h4><p>替代机</p><h4 id="5-负载均衡"><a href="#5-负载均衡" class="headerlink" title="5.负载均衡"></a>5.负载均衡</h4><p>使得各计算机之间更亲密</p><h2 id="……"><a href="#……" class="headerlink" title="……"></a>……</h2><h1 id="3-计算机网络的组成"><a href="#3-计算机网络的组成" class="headerlink" title="3.计算机网络的组成"></a>3.计算机网络的组成</h1><h3 id="1-组成部分"><a href="#1-组成部分" class="headerlink" title="1.组成部分"></a>1.组成部分</h3><p>硬件 软件 协议</p><h3 id="2-工作方式"><a href="#2-工作方式" class="headerlink" title="2.工作方式"></a>2.工作方式</h3><ul><li><h4 id="边缘部分-（主机、端系统）"><a href="#边缘部分-（主机、端系统）" class="headerlink" title="边缘部分 （主机、端系统）"></a>边缘部分 （主机、端系统）</h4><p>用户直接使用 —&gt;C/S方式、P2P方式</p></li><li><h4 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h4><p>为边缘部分服务（路由器、网络）</p></li></ul><h3 id="3-功能组成"><a href="#3-功能组成" class="headerlink" title="3.功能组成"></a>3.功能组成</h3><ul><li><h4 id="通信子网"><a href="#通信子网" class="headerlink" title="通信子网"></a>通信子网</h4></li></ul><p>实现<u>数据通信</u></p><ul><li><h4 id="资源子网"><a href="#资源子网" class="headerlink" title="资源子网"></a>资源子网</h4></li></ul><p>实现<u>资源共享</u>/数据处理</p><p><img src="https://i.bmp.ovh/imgs/2021/05/25228d90965fdcb2.png"></p><h1 id="4-计算机网络的分类"><a href="#4-计算机网络的分类" class="headerlink" title="4.计算机网络的分类"></a>4.计算机网络的分类</h1><h4 id="1-按照分布范围分："><a href="#1-按照分布范围分：" class="headerlink" title="1.按照分布范围分："></a>1.按照分布范围分：</h4><ul><li>广域网WAN</li><li>城域网MAN</li><li>局域网WAN</li><li>个人区域网PAN</li></ul><h4 id="2-按照使用者分："><a href="#2-按照使用者分：" class="headerlink" title="2.按照使用者分："></a>2.按照使用者分：</h4><p>公用网</p><p>中国电信</p><p>专用网</p><p>军队，政府，银行，铁路，电力，公安……</p><h4 id="3-按照交换技术分"><a href="#3-按照交换技术分" class="headerlink" title="3.按照交换技术分"></a>3.按照交换技术分</h4><ul><li><p>电路交换</p></li><li><p>报文交换</p></li><li><p>分组交换</p></li></ul><h4 id="4-按拓扑结构分"><a href="#4-按拓扑结构分" class="headerlink" title="4.按拓扑结构分"></a>4.按拓扑结构分</h4><p><img src="https://i.bmp.ovh/imgs/2021/05/5a1c7f59b60a8390.png"></p><p>星形结构：n个节点，n-1条链路</p><h4 id="5-按照传输技术分"><a href="#5-按照传输技术分" class="headerlink" title="5.按照传输技术分"></a>5.按照传输技术分</h4><ul><li><p><strong>广播式网络</strong>    共享公共通信信道</p></li><li><p><strong>点对点网络</strong>    使用<strong>分组存储转发</strong>和<strong>路由选择</strong>机制（也是两种网络的区别）</p></li></ul><p>  参考视频：</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯笔记 关于递归</title>
      <link href="posts/2c92.html"/>
      <url>posts/2c92.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="蓝桥杯笔记-关于递归"><a href="#蓝桥杯笔记-关于递归" class="headerlink" title="蓝桥杯笔记 关于递归"></a>蓝桥杯笔记 关于递归</h1><h2 id="类型一"><a href="#类型一" class="headerlink" title="类型一"></a>类型一</h2><blockquote><p>全排列，比如现在有字符串”abc”，它还可以有”acb”, “bac”, “bca”, “cab”, “cba”等排列方式. 通过全排列的方式可以得到全部符合条件的结果, 然后再从可能的结果中选出符合要求的结果.大部分情况需要考虑回溯.</p></blockquote><h5 id="例题-带分数"><a href="#例题-带分数" class="headerlink" title="例题: 带分数"></a>例题: 带分数</h5><ul><li>100 可以表示为带分数的形式：100 = 3 + 69258 / 714</li><li>还可以表示为：100 = 82 + 3546 / 197</li><li>注意特征带分数中，数字1~9分别出现且只出现一次（不包含0）。</li><li>类似这样的带分数，100 有 11 种表示法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">题目要求：</span><br><span class="line">从标准输入读入一个正整数N (N&lt;1000*1000)</span><br><span class="line">程序输出该数字用数码1~9不重复不遗漏地组成带分数表示的全部种数。</span><br><span class="line">注意：不要求输出每个表示，只统计有多少表示法！</span><br><span class="line">例如：</span><br><span class="line">用户输入：</span><br><span class="line">100</span><br><span class="line">程序输出：</span><br><span class="line">11</span><br><span class="line">再例如：</span><br><span class="line">用户输入：</span><br><span class="line">105</span><br><span class="line">程序输出：</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>观察题目发现：</p><p>1.每个数字只能出现一次（没有0）</p><p>2.每一次排列后，都需要进行回溯，归位每个数字原来的位置（1,2,3,4,5,6,7,8,9,）</p><p>参考了一下这个：**<a href="https://blog.csdn.net/wenyeqv/article/details/105937092">全排列问题理解</a>**</p><p>自己撸的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_</span>带分数 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//结果个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == arr.length)&#123;</span><br><span class="line">            check();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;arr.length;i++)&#123;</span><br><span class="line">            swap(i,index);</span><br><span class="line">            process(index+<span class="number">1</span>);</span><br><span class="line">            swap(i,index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length - <span class="number">2</span>; j++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">jiaShu</span> <span class="operator">=</span> getNum(<span class="number">0</span>, i);<span class="comment">//带分数种的加数</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">fenZi</span> <span class="operator">=</span> getNum(i + <span class="number">1</span>, j);<span class="comment">//分子</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">fenMu</span> <span class="operator">=</span> getNum(j + <span class="number">1</span>, arr.length - <span class="number">1</span>);<span class="comment">//分母</span></span><br><span class="line">                <span class="keyword">if</span>(fenZi % fenMu == <span class="number">0</span> &amp;&amp; jiaShu + fenZi / fenMu == n)&#123;<span class="comment">//分子要能整除分母(也可以用float保存3种数, 就不用判断整除)</span></span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> i1)</span> &#123;</span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">system</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//用于算10的次方的基数, 如果用系统Math.pow()算10次方的话会慢很多.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n=i1;n&gt;=i;n--)&#123;</span><br><span class="line">            num+=system*arr[i1--];</span><br><span class="line">            system*=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> t=arr[i];</span><br><span class="line">        arr[i]=arr[index];</span><br><span class="line">        arr[index]=t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Scanner s=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n=s.nextInt();</span><br><span class="line">        process(<span class="number">0</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型二"><a href="#类型二" class="headerlink" title="类型二"></a>类型二</h2>]]></content>
      
      
      <categories>
          
          <category> 去蓝桥杯当炮灰系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven教程笔记(来自菜鸟教程)</title>
      <link href="posts/5542.html"/>
      <url>posts/5542.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Maven-功能"><a href="#Maven-功能" class="headerlink" title="Maven 功能"></a>Maven 功能</h2><p>Maven 能够帮助开发者完成以下工作：</p><ul><li>构建</li><li>文档生成</li><li>报告</li><li>依赖</li><li>SCMs</li><li>发布</li><li>分发</li><li>邮件列表</li></ul><hr><h2 id="约定配置"><a href="#约定配置" class="headerlink" title="约定配置"></a>约定配置</h2><p>Maven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。如下所示：</p><table><thead><tr><th>目录</th><th>目的</th></tr></thead><tbody><tr><td>${basedir}</td><td>存放pom.xml和所有的子目录</td></tr><tr><td>${basedir}/src/main/java</td><td>项目的java源代码</td></tr><tr><td>${basedir}/src/main/resources</td><td>项目的资源，比如说property文件，springmvc.xml</td></tr><tr><td>${basedir}/src/test/java</td><td>项目的测试类，比如说Junit代码</td></tr><tr><td>${basedir}/src/test/resources</td><td>测试用的资源</td></tr><tr><td>${basedir}/src/main/webapp/WEB-INF</td><td>web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面</td></tr><tr><td>${basedir}/target</td><td>打包输出目录</td></tr><tr><td>${basedir}/target/classes</td><td>编译输出目录</td></tr><tr><td>${basedir}/target/test-classes</td><td>测试编译输出目录</td></tr><tr><td>Test.java</td><td>Maven只会自动运行符合该命名规则的测试类</td></tr><tr><td>~/.m2/repository</td><td>Maven默认的本地仓库目录位置</td></tr></tbody></table><hr><h2 id="Maven-特点"><a href="#Maven-特点" class="headerlink" title="Maven 特点"></a>Maven 特点</h2><ul><li>项目设置遵循统一的规则。</li><li>任意工程中共享。</li><li>依赖管理包括自动更新。</li><li>一个庞大且不断增长的库。</li><li>可扩展，能够轻松编写 Java 或脚本语言的插件。</li><li>只需很少或不需要额外配置即可即时访问新功能。</li><li><strong>基于模型的构建</strong> − Maven能够将任意数量的项目构建到预定义的输出类型中，如 JAR，WAR 或基于项目元数据的分发，而不需要在大多数情况下执行任何脚本。</li><li><strong>项目信息的一致性站点</strong> − 使用与构建过程相同的元数据，Maven 能够生成一个网站或PDF，包括您要添加的任何文档，并添加到关于项目开发状态的标准报告中。</li><li><strong>发布管理和发布单独的输出</strong> − Maven 将不需要额外的配置，就可以与源代码管理系统（如 Subversion 或  Git）集成，并可以基于某个标签管理项目的发布。它也可以将其发布到分发位置供其他项目使用。Maven 能够发布单独的输出，如  JAR，包含其他依赖和文档的归档，或者作为源代码发布。</li><li><strong>向后兼容性</strong> −  您可以很轻松的从旧版本 Maven 的多个模块移植到 Maven 3 中。</li><li>子项目使用父项目依赖时，正常情况子项目应该继承父项目依赖，无需使用版本号，</li><li><strong>并行构建</strong> − 编译的速度能普遍提高20 - 50 %。</li><li><strong>更好的错误报告</strong> − Maven 改进了错误报告，它为您提供了 Maven wiki 页面的链接，您可以点击链接查看错误的完整描述。</li></ul><h1 id="Maven-环境配置"><a href="#Maven-环境配置" class="headerlink" title="Maven 环境配置"></a>Maven 环境配置</h1><p>Maven 是一个基于 Java 的工具，所以要做的第一件事情就是安装 JDK。</p><p>如果你还未安装 JDK，可以参考我们的 <a href="https://www.runoob.com/java/java-environment-setup.html">Java 开发环境配置</a>。</p><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>JDK</td><td>Maven 3.3 要求 JDK 1.7 或以上 Maven 3.2 要求 JDK 1.6 或以上 Maven 3.0/3.1 要求 JDK 1.5 或以上</td></tr><tr><td>内存</td><td>没有最低要求</td></tr><tr><td>磁盘</td><td>Maven 自身安装需要大约 10 MB 空间。除此之外，额外的磁盘空间将用于你的本地 Maven 仓库。你本地仓库的大小取决于使用情况，但预期至少 500 MB</td></tr><tr><td>操作系统</td><td>没有最低要求</td></tr></tbody></table><h3 id="检查-Java-安装"><a href="#检查-Java-安装" class="headerlink" title="检查 Java 安装"></a>检查 Java 安装</h3><table><thead><tr><th>操作系统</th><th>任务</th><th>命令</th></tr></thead><tbody><tr><td>Windows</td><td>打开命令控制台</td><td><code>c:\&gt; java -version</code></td></tr><tr><td>Linux</td><td>打开命令终端</td><td><code># java -version</code></td></tr><tr><td>Mac</td><td>打开终端</td><td><code>$ java -version</code></td></tr></tbody></table><h3 id="Maven-下载"><a href="#Maven-下载" class="headerlink" title="Maven 下载"></a>Maven 下载</h3><p>Maven 下载地址：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p><p><img src="https://www.runoob.com/wp-content/uploads/2018/09/750D721E-0624-4C16-AD4B-9EA5D7F6289A.png" alt="img"></p><p>不同平台下载对应的包：</p><table><thead><tr><th align="center">系统</th><th align="center">包名</th></tr></thead><tbody><tr><td align="center">Windows</td><td align="center">apache-maven-3.3.9-bin.zip</td></tr><tr><td align="center">Linux</td><td align="center">apache-maven-3.3.9-bin.tar.gz</td></tr><tr><td align="center">Mac</td><td align="center">apache-maven-3.3.9-bin.tar.gz</td></tr></tbody></table><p>下载包后解压到对应目录：</p><table><thead><tr><th align="center">系统</th><th>存储位置 (可根据自己情况配置)</th></tr></thead><tbody><tr><td align="center">Windows</td><td>E:\Maven\apache-maven-3.3.9</td></tr><tr><td align="center">Linux</td><td>/usr/local/apache-maven-3.3.9</td></tr><tr><td align="center">Mac</td><td>/usr/local/apache-maven-3.3.9</td></tr></tbody></table><h3 id="设置-Maven-环境变量"><a href="#设置-Maven-环境变量" class="headerlink" title="设置 Maven 环境变量"></a>设置 Maven 环境变量</h3><p>添加环境变量 MAVEN_HOME：</p><table><thead><tr><th>系统</th><th>配置</th></tr></thead><tbody><tr><td>Windows</td><td>右键 “计算机”，选择 “属性”，之后点击 “高级系统设置”，点击”环境变量”，来设置环境变量，有以下系统变量需要配置： 新建系统变量 <strong>MAVEN_HOME</strong>，变量值：E:\Maven\apache-maven-3.3.9 <img src="https://www.runoob.com/wp-content/uploads/2018/09/1536057115-1481-20151218175411912-170761788.png" alt="img"> 编辑系统变量 <strong>Path</strong>，添加变量值：;%MAVEN_HOME%\bin <img src="https://www.runoob.com/wp-content/uploads/2018/09/1536057115-7470-20151218175417006-1644078150.png" alt="img"> <strong>注意：</strong>注意多个值之间需要有分号隔开，然后点击确定。</td></tr><tr><td>Linux</td><td>下载解压： <code># wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz # tar -xvf  apache-maven-3.3.9-bin.tar.gz # sudo mv -f apache-maven-3.3.9 /usr/local/</code> 编辑 <strong>/etc/profile</strong> 文件 sudo vim /etc/profile，在文件末尾添加如下代码： <code>export MAVEN_HOME=/usr/local/apache-maven-3.3.9 export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</code> 保存文件，并运行如下命令使环境变量生效： # source /etc/profile 在控制台输入如下命令，如果能看到 Maven 相关版本信息，则说明 Maven 已经安装成功： <code># mvn -v</code></td></tr><tr><td>Mac</td><td>下载解压： <code>$ curl -O http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz $ tar -xvf  apache-maven-3.3.9-bin.tar.gz $ sudo mv -f apache-maven-3.3.9 /usr/local/</code> 编辑 <strong>/etc/profile</strong> 文件 sudo vim /etc/profile，在文件末尾添加如下代码： <code>export MAVEN_HOME=/usr/local/apache-maven-3.3.9 export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</code> 保存文件，并运行如下命令使环境变量生效： <code>$ source /etc/profile</code> 在控制台输入如下命令，如果能看到 Maven 相关版本信息，则说明 Maven 已经安装成功： <code>$ mvn -v Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:47+08:00) Maven home: /usr/local/apache-maven-3.3.9 Java version: 1.8.0_31, vendor: Oracle Corporation Java home: /Library/Java/JavaVirtualMachines/jdk1.8.0_31.jdk/Contents/Home/jre Default locale: zh_CN, platform encoding: ISO8859-1 OS name: &quot;mac os x&quot;, version: &quot;10.13.4&quot;, arch: &quot;x86_64&quot;, family: &quot;mac&quot;</code></td></tr></tbody></table><h1 id="Maven-POM"><a href="#Maven-POM" class="headerlink" title="Maven POM"></a>Maven POM</h1><p>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</p><p>执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。</p><p>POM 中可以指定以下配置：</p><ul><li>项目依赖</li><li>插件</li><li>执行目标</li><li>项目构建 profile</li><li>项目版本</li><li>项目开发者列表</li><li>相关邮件列表信息</li></ul><p>在创建 POM 之前，我们首先需要描述项目组 (groupId), 项目的唯一ID。</p><p><project xmlns = "http://maven.apache.org/POM/4.0.0"    xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation = "http://maven.apache.org/POM/4.0.0    http://maven.apache.org/xsd/maven-4.0.0.xsd">     <!-- 模型版本 -->    <modelVersion>4.0.0</modelVersion>    <!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group -->    <groupId>com.companyname.project-group</groupId>     <!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 -->    <artifactId>project</artifactId>     <!-- 版本号 -->    <version>1.0</version> </project></p><p>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。</p><table><thead><tr><th>节点</th><th>描述</th></tr></thead><tbody><tr><td>project</td><td>工程的根标签。</td></tr><tr><td>modelVersion</td><td>模型版本需要设置为 4.0。</td></tr><tr><td>groupId</td><td>这是工程组的标识。它在一个组织或者项目中通常是唯一的。例如，一个银行组织 com.companyname.project-group 拥有所有的和银行相关的项目。</td></tr><tr><td>artifactId</td><td>这是工程的标识。它通常是工程的名称。例如，消费者银行。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。</td></tr><tr><td>version</td><td>这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。例如： <code>com.company.bank:consumer-banking:1.0 com.company.bank:consumer-banking:1.1</code></td></tr></tbody></table><hr><h2 id="父（Super）POM"><a href="#父（Super）POM" class="headerlink" title="父（Super）POM"></a>父（Super）POM</h2><p>父（Super）POM是 Maven 默认的 POM。所有的 POM 都继承自一个父 POM（无论是否显式定义了这个父 POM）。父  POM 包含了一些可以被继承的默认设置。因此，当 Maven 发现需要下载 POM 中的 依赖时，它会到 Super POM 中配置的默认仓库  <a href="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</a> 去下载。</p><p>Maven 使用 effective pom（Super pom 加上工程自己的配置）来执行相关的目标，它帮助开发者在 pom.xml 中做尽可能少的配置，当然这些配置可以被重写。</p><p>使用以下命令来查看 Super POM 默认配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn help:effective-pom</span><br></pre></td></tr></table></figure><p>接下来我们创建目录 MVN/project，在该目录下创建 pom.xml，内容如下：</p><p><project xmlns = "http://maven.apache.org/POM/4.0.0"    xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation = "http://maven.apache.org/POM/4.0.0    http://maven.apache.org/xsd/maven-4.0.0.xsd">     <!-- 模型版本 -->    <modelVersion>4.0.0</modelVersion>    <!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group -->    <groupId>com.companyname.project-group</groupId>     <!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 -->    <artifactId>project</artifactId>     <!-- 版本号 -->    <version>1.0</version> </project></p><p>在命令控制台，进入 MVN/project 目录，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\MVN\project&gt;mvn help:effective-pom</span><br></pre></td></tr></table></figure><p>Maven 将会开始处理并显示 effective-pom。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Scanning for projects...</span><br><span class="line">Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom</span><br><span class="line">...</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 01:36 min</span><br><span class="line">[INFO] Finished at: 2018-09-05T11:31:28+08:00</span><br><span class="line">[INFO] Final Memory: 15M/149M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>Effective POM 的结果就像在控制台中显示的一样，经过继承、插值之后，使配置生效。</p><?xml version="1.0" encoding="UTF-8"?><!-- ================================================================= --> <!--                                                                   --> <!-- Generated by Maven Help Plugin on 2012-07-05T11:41:51             --> <!-- See: http://maven.apache.org/plugins/maven-help-plugin/           --> <!--                                                                   --> <!-- ================================================================= -->   <!-- ================================================================= --> <!--                                                                   --> <!-- Effective POM for project                                         --> <!-- 'com.companyname.project-group:project-name:jar:1.0'              --> <!--                                                                   --> <!-- ================================================================= -->   <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/ 2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 h ttp://maven.apache.org/xsd/maven-4.0.0.xsd">   <modelVersion>4.0.0</modelVersion>   <groupId>com.companyname.project-group</groupId>   <artifactId>project</artifactId>   <version>1.0</version>   <build>     <sourceDirectory>C:\MVN\project\src\main\java</sourceDirectory>     <scriptSourceDirectory>src/main/scripts</scriptSourceDirectory>     <testSourceDirectory>C:\MVN\project\src\test\java</testSourceDirectory>     <outputDirectory>C:\MVN\project\target\classes</outputDirectory>     <testOutputDirectory>C:\MVN\project\target\test-classes</testOutputDirectory>     <resources>       <resource>         <mergeId>resource-0</mergeId>         <directory>C:\MVN\project\src\main\resources</directory>       </resource>     </resources>     <testResources>       <testResource>         <mergeId>resource-1</mergeId>         <directory>C:\MVN\project\src\test\resources</directory>       </testResource>     </testResources>     <directory>C:\MVN\project\target</directory>     <finalName>project-1.0</finalName>     <pluginManagement>       <plugins>         <plugin>           <artifactId>maven-antrun-plugin</artifactId>           <version>1.3</version>         </plugin>         <plugin>           <artifactId>maven-assembly-plugin</artifactId>           <version>2.2-beta-2</version>         </plugin>         <plugin>           <artifactId>maven-clean-plugin</artifactId>           <version>2.2</version>         </plugin>         <plugin>           <artifactId>maven-compiler-plugin</artifactId>           <version>2.0.2</version>         </plugin>         <plugin>           <artifactId>maven-dependency-plugin</artifactId>           <version>2.0</version>         </plugin>         <plugin>           <artifactId>maven-deploy-plugin</artifactId>           <version>2.4</version>         </plugin>         <plugin>           <artifactId>maven-ear-plugin</artifactId>           <version>2.3.1</version>         </plugin>         <plugin>           <artifactId>maven-ejb-plugin</artifactId>           <version>2.1</version>         </plugin>         <plugin>           <artifactId>maven-install-plugin</artifactId>           <version>2.2</version>         </plugin>         <plugin>           <artifactId>maven-jar-plugin</artifactId>           <version>2.2</version>         </plugin>         <plugin>           <artifactId>maven-javadoc-plugin</artifactId>           <version>2.5</version>         </plugin>         <plugin>           <artifactId>maven-plugin-plugin</artifactId>           <version>2.4.3</version>         </plugin>         <plugin>           <artifactId>maven-rar-plugin</artifactId>           <version>2.2</version>         </plugin>         <plugin>           <artifactId>maven-release-plugin</artifactId>           <version>2.0-beta-8</version>         </plugin>         <plugin>           <artifactId>maven-resources-plugin</artifactId>           <version>2.3</version>         </plugin>         <plugin>           <artifactId>maven-site-plugin</artifactId>           <version>2.0-beta-7</version>         </plugin>         <plugin>           <artifactId>maven-source-plugin</artifactId>           <version>2.0.4</version>         </plugin>         <plugin>           <artifactId>maven-surefire-plugin</artifactId>           <version>2.4.3</version>         </plugin>         <plugin>           <artifactId>maven-war-plugin</artifactId>           <version>2.1-alpha-2</version>         </plugin>       </plugins>     </pluginManagement>     <plugins>       <plugin>         <artifactId>maven-help-plugin</artifactId>         <version>2.1.1</version>       </plugin>     </plugins>   </build>   <repositories>     <repository>       <snapshots>         <enabled>false</enabled>       </snapshots>       <id>central</id>       <name>Maven Repository Switchboard</name>       <url>http://repo1.maven.org/maven2</url>     </repository>   </repositories>   <pluginRepositories>     <pluginRepository>       <releases>         <updatePolicy>never</updatePolicy>       </releases>       <snapshots>         <enabled>false</enabled>       </snapshots>       <id>central</id>       <name>Maven Plugin Repository</name>       <url>http://repo1.maven.org/maven2</url>     </pluginRepository>   </pluginRepositories>   <reporting>     <outputDirectory>C:\MVN\project\target/site</outputDirectory>   </reporting> </project><p>在上面的 pom.xml 中，你可以看到 Maven 在执行目标时需要用到的默认工程源码目录结构、输出目录、需要的插件、仓库和报表目录。</p><p>Maven 的 pom.xml 文件也不需要手工编写。</p><p>Maven 提供了大量的原型插件来创建工程，包括工程结构和 pom.xml。</p><hr><h2 id="POM-标签大全详解"><a href="#POM-标签大全详解" class="headerlink" title="POM 标签大全详解"></a>POM 标签大全详解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 </span></span><br><span class="line"><span class="comment">        version。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--被继承的父项目的构件标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--被继承的父项目的全球唯一标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--被继承的父项目的版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 </span></span><br><span class="line"><span class="comment">            目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>asia.banseon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 </span></span><br><span class="line"><span class="comment">        特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的名称, Maven产生的文档用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon-maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目主页的URL, Maven产生的文档用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 </span></span><br><span class="line"><span class="comment">        签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>A maven project to study maven.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--描述了这个项目构建环境中的前提条件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--问题管理系统（例如jira）的名字， --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span>jira<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该项目使用的问题管理系统的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://jira.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目持续集成信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--持续集成系统的名字，例如continuum --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">notifier</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--传送通知的途径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--发生错误时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnError</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--构建失败时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnFailure</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--构建成功时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnSuccess</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--发生警告时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnWarning</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--不赞成使用。通知发送到哪里 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">address</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--扩展配置项 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目相关邮件列表信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--邮件的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">post</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">post</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--你可以浏览邮件信息的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span>http:/hi.baidu.com/banseon/demo/dev/<span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目开发者列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--某个项目开发者的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SCM里项目开发者的唯一标识符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>HELLO WORLD<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者的全名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者的email --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者的主页的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Project Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Architect<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者所属组织 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者所属组织的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>http://hi.baidu.com/banseon<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者属性，如即时消息如何处理等 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dept</span>&gt;</span>No<span class="tag">&lt;/<span class="name">dept</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者所在时区， -11到12范围内的整数。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>-5<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的其他贡献者列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contributors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目的其他贡献者。参见developers/developer元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">contributor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">contributors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--license用于法律上的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache 2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--官方的license正文页面的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--关于license的补充信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">comments</span>&gt;</span>A business-friendly OSS license<span class="tag">&lt;/<span class="name">comments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span></span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk</span><br><span class="line">        <span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当前代码的标签，在开发阶段默认为HEAD --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://svn.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--组织的全名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--组织主页的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构建项目需要的信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scriptSourceDirectory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--被编译过的应用程序class文件存放的目录。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--被编译过的测试class文件存放的目录。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testOutputDirectory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用来自该项目的一系列构建扩展 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--描述使用到的构建扩展。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--构建扩展的groupId --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--构建扩展的artifactId --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--构建扩展的版本 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 </span></span><br><span class="line"><span class="comment">                    子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--描述存放资源的目录，该路径相对POM路径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--包含的模式列表，例如**/*.xml. --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--排除的模式列表，例如**/*.xml --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构建产生的所有文件存放的目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filters</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用的插件列表 。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--plugin元素包含描述插件所需要的信息。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--插件在仓库里的group ID --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--插件在仓库里的artifact ID --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--被使用的插件的版本（或版本范围） --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--execution元素包含了插件执行需要的信息 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--配置的执行目标 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--配置是否被传播到子POM --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--作为DOM对象的配置 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--项目引入插件所需要的额外依赖 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            ......</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--作为DOM对象的配置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用的插件列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        ......</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在列的项目构建profile，如果被激活，会修改构建处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--根据环境参数或命令行参数激活某个构建处理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--profile默认是否激活的标志 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活profile的操作系统的名字 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活profile的操作系统所属家族(如 &#x27;windows&#x27;) --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活profile的操作系统体系结构 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活profile的操作系统版本 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活profile的属性的名称 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活profile的属性的值 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--如果指定的文件存在，则激活profile。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exists</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--如果指定的文件不存在，则激活profile。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">missing</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构建项目所需要的信息。参见build元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">finalName</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filters</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                                    ......</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                                ......</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">modules</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发现依赖和扩展的远程仓库列表。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--参见repositories/repository元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    ......</span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">reports</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--该元素包括使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参见dependencyManagement元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        ......</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参见distributionManagement元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参见properties元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--发现依赖和扩展的远程仓库列表。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包含需要连接到远程仓库的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如何处理远程仓库里发布版本的下载 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 </span></span><br><span class="line"><span class="comment">                策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-repository-proxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--远程仓库名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon-repository-proxy<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--远程仓库URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.169:9999/repository/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 </span></span><br><span class="line"><span class="comment">                而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            ......</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--依赖的group ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--依赖的artifact ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-artifact<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， </span></span><br><span class="line"><span class="comment">                尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 </span></span><br><span class="line"><span class="comment">                JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span><span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 - compile ：默认范围，用于编译 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath </span></span><br><span class="line"><span class="comment">                - runtime: 在执行时需要使用 - test: 用于test任务时使用 - system: 需要外在提供相应的元素。通过systemPath来取得 </span></span><br><span class="line"><span class="comment">                - systemPath: 仅用于范围为system。提供相应的路径 - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span><span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该元素描述使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--true，则，网站不包括默认的报表。这包括&quot;项目信息&quot;菜单中的报表。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludeDefaults</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用的报表插件和他们的配置。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--plugin元素包含描述报表插件需要的信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--报表插件在仓库里的group ID --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--报表插件在仓库里的artifact ID --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--被使用的报表插件的版本（或版本范围） --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--报表插件的配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--表示报表的一个集合，以及产生该集合的配置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--报表集合的唯一标识符，POM继承时用到 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--产生报表集合时，被使用的报表的配置 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--配置是否被继承到子POMs --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--这个集合里使用到哪些报表 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">reports</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact </span></span><br><span class="line"><span class="comment">        ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--部署项目产生的构件到远程仓库需要的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon maven2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>file://$&#123;basedir&#125;/target/deploy<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Banseon-maven2 Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--部署项目的网站需要的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-site<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--部署位置的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>business api website<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--部署位置的URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web</span><br><span class="line">            <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">downloadUrl</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构件新的group ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构件新的artifact ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构件新的版本号 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--显示给用户的，关于移动的额外信息，例如原因。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 </span></span><br><span class="line"><span class="comment">            Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">status</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Maven笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5框架新功能（通用日志、函数式表达式、webflux、响应式编程）</title>
      <link href="posts/115.html"/>
      <url>posts/115.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>整个 Spring5 框架的代码基于 Java8，运行时兼容 JDK9，许多不建议使用的类和方法在代码库中删除了。</p><h3 id="1、Spring-5-0-框架自带了通用的日志封装"><a href="#1、Spring-5-0-框架自带了通用的日志封装" class="headerlink" title="1、Spring 5.0 框架自带了通用的日志封装"></a>1、Spring 5.0 框架自带了通用的日志封装</h3><p> （1）Spring5 已经移除 Log4jConfigListener，官方建议使用 Log4j2</p><p> （2）Spring5 框架整合 Log4j2</p><p> 第一步 引入 jar 包</p><p> 第二步 创建 log4j2.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration 后面的 status 用于设置 log4j2 自身内部的信息输出，可以不设置，当设置成 trace 时，可以看到 log4j2 内部各种详细输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--先定义所有的 appender--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--然后定义 logger，只有定义 logger 并引入的 appender，appender 才会生效!--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--root：用于指定项目的根日志，如果没有单独指定 Logger，则会使用 root 作为默认的日志输出--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、Spring5-框架核心容器支持-Nullable-注解"><a href="#2、Spring5-框架核心容器支持-Nullable-注解" class="headerlink" title="2、Spring5 框架核心容器支持@Nullable 注解"></a>2、Spring5 框架核心容器支持@Nullable 注解</h3><p> @Nullable 注解可以使用在方法、属性、参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空</p><h3 id="3、Spring5-核心容器支持函数式风格-GenericApplicationContext"><a href="#3、Spring5-核心容器支持函数式风格-GenericApplicationContext" class="headerlink" title="3、Spring5 核心容器支持函数式风格 GenericApplicationContext"></a>3、Spring5 核心容器支持函数式风格 GenericApplicationContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数式风格创建对象，交给 spring 进行管理</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenericApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//1 创建 GenericApplicationContext 对象</span></span><br><span class="line"> <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line"> <span class="comment">//2 调用 context 的方法对象注册</span></span><br><span class="line"> context.refresh();</span><br><span class="line"> context.registerBean(<span class="string">&quot;user1&quot;</span>,User.class,() -&gt; <span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line"> <span class="comment">//3 获取在 spring 注册的对象</span></span><br><span class="line"> <span class="comment">// User user = (User)context.getBean(&quot;com.atguigu.spring5.test.User&quot;);</span></span><br><span class="line"> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)context.getBean(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line"> System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、Spring5-框架新功能——Webflux（类似于springMVC）"><a href="#4、Spring5-框架新功能——Webflux（类似于springMVC）" class="headerlink" title="4、Spring5 框架新功能——Webflux（类似于springMVC）"></a>4、Spring5 框架新功能——Webflux（类似于springMVC）</h3><p> a）Webflux是 Spring5 添加新的模块，用于 web 开发的，功能和 SpringMVC 类似的，Webflux 使用 当前一种比较流行的响应式编程出现的框架。</p><p> b）使用传统 web 框架，比如 SpringMVC，这些基于 Servlet 容器，Webflux 是一种异步非阻塞的框架，异步非阻塞的框架在 Servlet3.1 以后才支持，<strong>核心是基于 Reactor</strong> 的相关 API 实现的。</p><blockquote><p>解释什么是异步非阻塞 ：</p><p>（1）异步和同步 （针对调用者）</p><p> <strong>同步：</strong> 调用者发送请求，如果等着对方回应之后才去做其他事情就是同步</p><p> <strong>异步：</strong> 调用者发送请求，如果发送请求之后不等着对方回应就去做其他事情就是异步 √</p><p>（2）非阻塞和阻塞 （针对被调用者）</p><p> <strong>阻塞：</strong> 被调用者受到请求之后，做完请求任务之后才给出反馈就是阻塞</p><p> <strong>非阻塞：</strong> 被调用者受到请求之后，受到请求之后马上给出反馈然后再去做事情就是非阻塞 √</p></blockquote><p> c）Webflux 特点</p><p> （1）第一 非阻塞式：在有限资源下，<strong>提高系统吞吐量和伸缩性</strong>，以 Reactor 为基础实现响应式编程</p><p> （2）第二 函数式编程：Spring5 框架基于 java8，Webflux 使用 Java8 函数式编程方式实现路由请求</p><p> d）SpringMVC和Webflux之间区别</p><p> 相同：两个框架都可以使用注解方式，都运行在 Tomcat 等容器中</p><p> 不同：SpringMVC 采用命令式编程，Webflux 采用异步响应式编程</p><h3 id="5、响应式编程（Java-实现）"><a href="#5、响应式编程（Java-实现）" class="headerlink" title="5、响应式编程（Java 实现）"></a>5、响应式编程（Java 实现）</h3><blockquote><p> 概念：什么是响应式编程 响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便 地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。</p><p> 例子：电子表格程序就是响应式编程的一个例子。单元格可以包含字面值或类似”=B1+C1”的公 式，而包含公式的单元格的值会依据其他单元格的值的变化而变化。</p></blockquote><p> a）Java8 及其之前版本是提供的观察者模式两个类 Observer 和 Observable实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverDemo</span> <span class="keyword">extends</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">ObserverDemo</span> <span class="variable">observer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverDemo</span>();</span><br><span class="line"> <span class="comment">//添加观察者</span></span><br><span class="line"> observer.addObserver((o,arg)-&gt;&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;发生变化&quot;</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"> observer.addObserver((o,arg)-&gt;&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;手动被观察者通知，准备改变&quot;</span>);</span><br><span class="line"> &#125;);</span><br><span class="line">  <span class="comment">//这里必须进行两个方法调用才可以响应！！</span></span><br><span class="line"> observer.setChanged(); <span class="comment">//数据变化</span></span><br><span class="line"> observer.notifyObservers(); <span class="comment">//通知</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、响应式编程（Reactor-实现）"><a href="#6、响应式编程（Reactor-实现）" class="headerlink" title="6、响应式编程（Reactor 实现）"></a>6、响应式编程（Reactor 实现）</h3><p> （1）响应式编程操作中，Reactor 是满足 Reactive 规范框架</p><p> （2）Reactor 有两个核心类，<strong>Mono 和 Flux</strong>，这两个类实现接口 Publisher，提供丰富操作符。Flux 对象实现发布者，返回 N 个元素；Mono 实现发布者，返回 0 或者 1 个元素</p><p> （3）Flux 和 Mono 都是数据流的发布者，使用 Flux 和 Mono 都可以发出三种数据信号： 元素值，错误信号，完成信号，错误信号和完成信号都代表终止信号，终止信号用于告诉 订阅者数据流结束了，错误信号终止数据流同时把错误信息传递给订阅者</p><p> <strong>（4）代码演示 Flux （返回多个元素）和 Mono（返回0或1个元素）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一步 引入依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">123456</span><br><span class="line">//第二步 编程代码</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> //just 方法直接声明</span><br><span class="line"> Flux.just(1,2,3,4);</span><br><span class="line"> Mono.just(1);</span><br><span class="line"> //其他的方法</span><br><span class="line"> Integer[] array = &#123;1,2,3,4&#125;;</span><br><span class="line"> Flux.fromArray(array);</span><br><span class="line"></span><br><span class="line"> List<span class="tag">&lt;<span class="name">Integer</span>&gt;</span> list = Arrays.asList(array);</span><br><span class="line"> Flux.fromIterable(list);</span><br><span class="line"> Stream<span class="tag">&lt;<span class="name">Integer</span>&gt;</span> stream = list.stream();</span><br><span class="line"> Flux.fromStream(stream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （5）三种信号特点</p><p> ① 错误信号和完成信号都是终止信号，不能共存的</p><p> ② 如果没有发送任何元素值，而是直接发送错误或者完成信号，表示是空数据流</p><p> ③ 如果没有错误信号，没有完成信号，表示是无限数据流</p><p> （6）调用 just 或者其他方法只是声明数据流，数据流并没有发出，只有进行订阅之后才会触发数据流，不订阅什么都不会发生的！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//just方法声明后,进行订阅</span></span><br><span class="line">       Flux.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).subscribe(System.out::print);</span><br><span class="line">       Mono.just(<span class="number">1</span>).subscribe(System.out::print);</span><br></pre></td></tr></table></figure><p> <strong>（7）操作符</strong></p><p> 概念： 对数据流进行一道道操作，成为操作符，比如工厂流水线</p><p> a） map 元素映射为新元素</p><p> b） flatMap 元素映射为流；把每个元素转换流，把转换之后多个流合并大的流</p><h3 id="7、SpringWebflux-执行流程和核心-API"><a href="#7、SpringWebflux-执行流程和核心-API" class="headerlink" title="7、SpringWebflux 执行流程和核心 API"></a>7、SpringWebflux 执行流程和核心 API</h3><p> a）SpringWebflux 基于 Reactor，默认使用容器是 Netty，Netty 是高性能的 NIO 框架，<strong>异步非阻塞的框架</strong></p><p> b）SpringWebflux 核心控制器 DispatchHandler，实现接口 WebHandler 接口</p><p> c）SpringWebflux 里面 DispatcherHandler负责请求的处理 ； HandlerMapping请求查询到处理的方法 ；HandlerAdapter真正负责请求处理 ； HandlerResultHandler响应结果处理</p><p> d）SpringWebflux 实现函数式编程，两个接口：RouterFunction（路由处理） 和 HandlerFunction（处理函数）</p><h3 id="8、SpringWebflux（基于注解编程模型）"><a href="#8、SpringWebflux（基于注解编程模型）" class="headerlink" title="8、SpringWebflux（基于注解编程模型）"></a>8、SpringWebflux（基于注解编程模型）</h3><p> a）SpringWebflux 实现方式有两种：注解编程模型和函数式编程模型</p><p> b）使用注解编程模型方式，和之前 SpringMVC 使用相似的，只需要把相关依赖配置到项目中， SpringBoot 自动配置相关运行容器，默认情况下使用 Netty 服务器</p><blockquote><p>第一步 创建 SpringBoot 工程，引入 Webflux 依赖</p><p>第二步 配置启动端口号</p><p>第三步 创建包和相关类</p><p> 实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String gender, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他set和get略去...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 创建接口定义操作的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户操作接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    Mono&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;<span class="comment">//Mono返回单个或零个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有用户</span></span><br><span class="line">    Flux&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;<span class="comment">//Flux返回多个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加用户</span></span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">saveUserInfo</span><span class="params">(Mono&lt;User&gt; user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建map集合存储数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer,User&gt; users = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.users.put(<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lucy&quot;</span>,<span class="string">&quot;nan&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        <span class="built_in">this</span>.users.put(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;mary&quot;</span>,<span class="string">&quot;nv&quot;</span>,<span class="number">30</span>));</span><br><span class="line">        <span class="built_in">this</span>.users.put(<span class="number">3</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;nv&quot;</span>,<span class="number">50</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.justOrEmpty(<span class="built_in">this</span>.users.get(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询多个用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Flux.fromIterable(<span class="built_in">this</span>.users.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">saveUserInfo</span><span class="params">(Mono&lt;User&gt; userMono)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMono.doOnNext(person -&gt; &#123;</span><br><span class="line">            <span class="comment">//向map集合里面放值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> users.size()+<span class="number">1</span>;</span><br><span class="line">            users.put(id,person);</span><br><span class="line">        &#125;).thenEmpty(Mono.empty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 创建 controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"> <span class="comment">//注入 service</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> UserService userService;</span><br><span class="line"> <span class="comment">//id 查询</span></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Mono&lt;User&gt; <span class="title function_">geetUserId</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> userService.getUserById(id);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//查询所有</span></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Flux&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> userService.getAllUser();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//添加</span></span><br><span class="line"> <span class="meta">@PostMapping(&quot;/saveuser&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line"> Mono&lt;User&gt; userMono = Mono.just(user);</span><br><span class="line"> <span class="keyword">return</span> userService.saveUserInfo(userMono);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p> c）SpringMVC 方式实现，同步阻塞的方式，基于 SpringMVC+Servlet+Tomcat</p><p> SpringWebflux 方式实现，异步非阻塞 方式，基于 SpringWebflux+Reactor+Netty</p><h3 id="9、SpringWebflux（基于函数式编程模型）"><a href="#9、SpringWebflux（基于函数式编程模型）" class="headerlink" title="9、SpringWebflux（基于函数式编程模型）"></a>9、SpringWebflux（基于函数式编程模型）</h3><blockquote><p> （1）在使用函数式编程模型操作时候，需要自己初始化服务器</p><p> （2）基于函数式编程模型时候，有两个核心接口：RouterFunction（实现路由功能，请求转发 给对应的 handler）和 HandlerFunction（处理请求生成响应的函数）。核心任务定义两个函数 式接口的实现并且启动需要的服务器。</p><p> （ 3 ） SpringWebflux 请 求 和 响 应 不 再 是 ServletRequest 和 ServletResponse ，而是 ServerRequest 和 ServerResponse</p></blockquote><p> <strong>步骤：</strong></p><p> 第一步 把注解编程模型工程复制一份 ，保留 entity 和 service 内容</p><p> 第二步 创建 Handler（具体实现方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHandler</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">UserHandler</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.userService = userService;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//根据 id 查询</span></span><br><span class="line"> <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">getUserById</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">     <span class="comment">//获取 id 值</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> Integer.valueOf(request.pathVariable(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">     <span class="comment">//空值处理</span></span><br><span class="line">     Mono&lt;ServerResponse&gt; notFound = ServerResponse.notFound().build();</span><br><span class="line">     <span class="comment">//调用 service 方法得到数据</span></span><br><span class="line">     Mono&lt;User&gt; userMono = <span class="built_in">this</span>.userService.getUserById(userId);</span><br><span class="line">     <span class="comment">//把 userMono 进行转换返回</span></span><br><span class="line">     <span class="comment">//使用 Reactor 操作符 flatMap</span></span><br><span class="line">     <span class="keyword">return</span> userMono.flatMap(person -&gt;</span><br><span class="line">            ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(fromObject(person)))</span><br><span class="line">             .switchIfEmpty(notFound);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//查询所有</span></span><br><span class="line"> <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">//调用 service 得到结果</span></span><br><span class="line">     Flux&lt;User&gt; users = <span class="built_in">this</span>.userService.getAllUser();</span><br><span class="line">     <span class="keyword">return</span> ServerResponse.ok().contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">              .body(users,User.class);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//添加</span></span><br><span class="line"> <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">saveUser</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">//得到 user 对象</span></span><br><span class="line">        Mono&lt;User&gt; userMono = request.bodyToMono(User.class);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            ServerResponse.ok().build(<span class="built_in">this</span>.userService.saveUserInfo(userMono));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第三步 初始化服务器，编写 Router</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 创建 Router 路由</span></span><br><span class="line"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">routingFunction</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//创建 hanler 对象</span></span><br><span class="line"> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"> <span class="type">UserHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserHandler</span>(userService);</span><br><span class="line"> <span class="comment">//设置路由</span></span><br><span class="line"> <span class="keyword">return</span> RouterFunctions.route(</span><br><span class="line">GET(<span class="string">&quot;/users/&#123;id&#125;&quot;</span>).and(accept(APPLICATION_JSON)),handler::getUserById)</span><br><span class="line"> .andRoute(GET(<span class="string">&quot;/users&quot;</span>).and(accept(APPLICATION_JSON)),handler::getAllUsers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 创建服务器完成适配</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createReactorServer</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//路由和 handler 适配</span></span><br><span class="line"> RouterFunction&lt;ServerResponse&gt; route = routingFunction();</span><br><span class="line"> <span class="type">HttpHandler</span> <span class="variable">httpHandler</span> <span class="operator">=</span> toHttpHandler(route);</span><br><span class="line"> <span class="type">ReactorHttpHandlerAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReactorHttpHandlerAdapter</span>(httpHandler);</span><br><span class="line"> <span class="comment">//创建服务器</span></span><br><span class="line"> <span class="type">HttpServer</span> <span class="variable">httpServer</span> <span class="operator">=</span> HttpServer.create();</span><br><span class="line"> httpServer.handle(adapter).bindNow();<span class="comment">//立即生效</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最终调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line"> server.createReactorServer();</span><br><span class="line"> System.out.println(<span class="string">&quot;enter to exit&quot;</span>);</span><br><span class="line"> System.in.read();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 WebClient 调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="comment">//调用服务器地址</span></span><br><span class="line"> <span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> WebClient.create(<span class="string">&quot;http://127.0.0.1:5794&quot;</span>);</span><br><span class="line"> <span class="comment">//根据 id 查询</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line"> <span class="type">User</span> <span class="variable">userresult</span> <span class="operator">=</span> webClient.get().uri(<span class="string">&quot;/users/&#123;id&#125;&quot;</span>, id)</span><br><span class="line">                 .accept(MediaType.APPLICATION_JSON).retrieve().bodyToMono(User.class).block();</span><br><span class="line"> System.out.println(userresult.getName());</span><br><span class="line"> <span class="comment">//查询所有</span></span><br><span class="line"> Flux&lt;User&gt; results = webClient.get().uri(<span class="string">&quot;/users&quot;</span>)</span><br><span class="line"> .accept(MediaType.APPLICATION_JSON).retrieve().bodyToFlux(User.class);</span><br><span class="line"></span><br><span class="line"> results.map(stu -&gt; stu.getName())</span><br><span class="line"> .buffer().doOnNext(System.out::println).blockFirst();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中事务的使用及配置</title>
      <link href="posts/8fe4.html"/>
      <url>posts/8fe4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Spring——事务操作"><a href="#Spring——事务操作" class="headerlink" title="Spring——事务操作"></a>Spring——事务操作</h1><h2 id="1、事务概念"><a href="#1、事务概念" class="headerlink" title="1、事务概念"></a>1、事务概念</h2><h3 id="a）什么是事务"><a href="#a）什么是事务" class="headerlink" title="a）什么是事务"></a>a）什么是事务</h3><p> （1）事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操 作都失败</p><p> （2）典型场景：银行转账 张三 转账 100 元 给 李四； 张三少 100，李四多 100</p><h3 id="b）事务四个特性（ACID）"><a href="#b）事务四个特性（ACID）" class="headerlink" title="b）事务四个特性（ACID）"></a>b）事务四个特性（ACID）</h3><p>（1）原子性 （2）一致性 （3）隔离性 （4）持久性 </p><p><a href="https://blog.csdn.net/weixin_45496190/article/details/106368157">可查看这篇文章描述</a></p><h2 id="2、事务操作（模拟事务操作环境）"><a href="#2、事务操作（模拟事务操作环境）" class="headerlink" title="2、事务操作（模拟事务操作环境）"></a>2、事务操作（模拟事务操作环境）</h2><h4 id="a）创建-service，搭建-dao，完成对象创建和注入关系"><a href="#a）创建-service，搭建-dao，完成对象创建和注入关系" class="headerlink" title="a）创建 service，搭建 dao，完成对象创建和注入关系"></a>a）创建 service，搭建 dao，完成对象创建和注入关系</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）service 注入 dao，在 dao 注入 JdbcTemplate，在 JdbcTemplate 注入 DataSource</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> <span class="comment">//注入 dao</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b）在-dao-创建两个方法：多钱和少钱的方法，-在-service-创建方法（转账的方法）"><a href="#b）在-dao-创建两个方法：多钱和少钱的方法，-在-service-创建方法（转账的方法）" class="headerlink" title="b）在 dao 创建两个方法：多钱和少钱的方法， 在 service 创建方法（转账的方法）"></a>b）在 dao 创建两个方法：多钱和少钱的方法， 在 service 创建方法（转账的方法）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"> <span class="comment">//lucy 转账 100 给 mary</span></span><br><span class="line"> <span class="comment">//少钱</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_account set money=money-? where username=?&quot;</span>;</span><br><span class="line"> jdbcTemplate.update(sql,<span class="number">100</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//多钱</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMoney</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_account set money=money+? where username=?&quot;</span>;</span><br><span class="line"> jdbcTemplate.update(sql,<span class="number">100</span>,<span class="string">&quot;mary&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> <span class="comment">//注入 dao</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"> <span class="comment">//转账的方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//lucy 少 100</span></span><br><span class="line"> userDao.reduceMoney();</span><br><span class="line"> <span class="comment">//mary 多 100</span></span><br><span class="line"> userDao.addMoney();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    上边代码正常执行没有问题，</span></span><br><span class="line"><span class="comment">    但是如果代码执行过程中出现异常，有问题，如下模拟异常！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//这里执行后将会产生错误（异常），lucy 少 100后，mary不会多 100，这就不对了！！</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="comment">//转账方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.reduceMoney();<span class="comment">//lucy 少 100</span></span><br><span class="line">        <span class="type">int</span> x=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        userDao.addMoney(); <span class="comment">//mary 多 100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决上边的异常方法——【编程式事务（传统方法）】</span></span><br><span class="line"><span class="comment">//转账的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//第一步 开启事务</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二步 进行业务操作</span></span><br><span class="line">        <span class="comment">//lucy少100</span></span><br><span class="line">        userDao.reduceMoney();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟异常</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//mary多100</span></span><br><span class="line">        userDao.addMoney();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三步 没有发生异常，提交事务</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        <span class="comment">//第四步 出现异常，事务回滚</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、事务操作（Spring-事务管理介绍）"><a href="#3、事务操作（Spring-事务管理介绍）" class="headerlink" title="3、事务操作（Spring 事务管理介绍）"></a>3、事务操作（Spring 事务管理介绍）</h2><p>1、事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）</p><p>2、在 Spring 进行事务管理操作 ；两种方式：编程式事务管理、声明式事务管理（推荐使用）</p><p>3、声明式事务管理 （1）基于注解方式（推荐使用） （2）基于 xml 配置文件方式</p><p>4、在 Spring 进行声明式事务管理，底层使用 AOP 原理</p><p>5、Spring 事务管理 API ：提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</p><h2 id="4、注解声明式事务管理"><a href="#4、注解声明式事务管理" class="headerlink" title="4、注解声明式事务管理"></a>4、注解声明式事务管理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1、在 spring 配置文件配置事务管理器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--2、在 spring 配置文件，开启事务注解,引入名称空间！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag"> http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag"> http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag"> http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transactionmanager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--3、在 service 类上面（或者 service 类里面方法上面）添加事务注解--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    （1）@Transactional，这个注解添加到类上面，也可以添加方法上面</span></span><br><span class="line"><span class="comment">    （2）如果把这个注解添加类上面，这个类里面所有的方法都添加事务</span></span><br><span class="line"><span class="comment">    （3）如果把这个注解添加方法上面，为这个方法添加事务——@Transactional</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、事务操作（声明式事务管理参数配置）"><a href="#5、事务操作（声明式事务管理参数配置）" class="headerlink" title="5、事务操作（声明式事务管理参数配置）"></a>5、事务操作（声明式事务管理参数配置）</h2><p>Transactional（事务传播行为）</p><p> a）在 service 类上面添加注解@Transactional，在这个注解里面可以配置事务相关参数</p><p> b）propagation（事务传播行为）：多事务方法直接进行调用，这个过程中事务 是如何进行管理的</p><p> c）spring框架事务传播行为有七种：下面只介绍常用的两种传播行为</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED,)</span>            <span class="comment">//事务一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//调用update方法</span></span><br><span class="line">    update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;     <span class="comment">//事务二</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （1）<strong>REQUIRED</strong>：如果add方法本身有事务，调用update方法后，update使用当前add方法里面的事务；</p><p> 如果add方法本身没有事务，调用update方法后，创建新的事务</p><p> （2）<strong>REQUIRED_NEW</strong>：使用add调用update方法，不论add方法是否有事务，都会创建新的事务。<br><img src="https://img-blog.csdnimg.cn/20200704233319992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ5NjE5MA==,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="ioslation（事务隔离级别）"><a href="#ioslation（事务隔离级别）" class="headerlink" title="ioslation（事务隔离级别）"></a>ioslation（事务隔离级别）</h4><p> a）事务有特性成为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题</p><p> b）有三个读问题：脏读、不可重复读、虚（幻）读 可查看这里介绍</p><blockquote><p><strong>脏读：</strong> 一个未提交事务读取到另一个未提交事务的数据</p><p><strong>不可重复读：</strong> 一个未提交事务读取到另一提交事务修改数据</p><p><strong>虚读：</strong> 一个未提交事务读取到另一提交事务添加数据</p><p>![QQ截图20210129233357](C:\Users\exia\Pictures\Saved Pictures\QQ截图20210129233357.png)</p></blockquote><p> c）解决：通过设置事务隔离级别，解决读问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)</span><br></pre></td></tr></table></figure><p>timeout：超时时间</p><p>（1）事务需要在一定时间内进行提交，如果不提交进行回滚 （</p><p>2）默认值是 -1（不超时） ，设置时间以秒单位进行计算<br>readOnly：是否只读</p><p>​    （1）读：查询操作，写：添加修改删除操作</p><p>​    （2）readOnly 默认值 false，表示可以查询，可以添加修改删除操作</p><p>​    （3）设置 readOnly 值是 true，设置成 true 之后，只能查询<br>rollbackFor：回滚</p><p> 设置出现哪些异常进行事务回滚<br>noRollbackFor：不回滚</p><p> 设置出现哪些异常不进行事务回滚</p><h2 id="6、事务操作（XML-声明式事务管理）"><a href="#6、事务操作（XML-声明式事务管理）" class="headerlink" title="6、事务操作（XML 声明式事务管理）"></a>6、事务操作（XML 声明式事务管理）</h2><p>a）、在 spring 配置文件中进行配置 ：第一步 配置事务管理器 第二步 配置通知 第三步 配置切入点和切面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--1 创建事务管理器--&gt;</span><br><span class="line">&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line"> &lt;!--注入数据源--&gt;</span><br><span class="line"> &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!--2 配置通知--&gt;</span><br><span class="line">&lt;tx:advice id=&quot;txadvice&quot;&gt;</span><br><span class="line"> &lt;!--配置事务参数--&gt;</span><br><span class="line"> &lt;tx:attributes&gt;</span><br><span class="line"> &lt;!--指定哪种规则的方法上面添加事务--&gt;</span><br><span class="line"> &lt;tx:method name=&quot;accountMoney&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line"> &lt;!--&lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span><br><span class="line"> &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line">&lt;!--3 配置切入点和切面--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line"> &lt;!--配置切入点--&gt;</span><br><span class="line"> &lt;aop:pointcut id=&quot;pt&quot; expression=&quot;execution(*</span><br><span class="line">com.atguigu.spring5.service.UserService.*(..))&quot;/&gt;</span><br><span class="line"> &lt;!--配置切面--&gt;</span><br><span class="line"> &lt;aop:advisor advice-ref=&quot;txadvice&quot; pointcut-ref=&quot;pt&quot;/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h2 id="7、事务操作（完全注解声明式事务管理）"><a href="#7、事务操作（完全注解声明式事务管理）" class="headerlink" title="7、事务操作（完全注解声明式事务管理）"></a>7、事务操作（完全注解声明式事务管理）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//1、创建配置类，使用配置类替代 xml 配置文件</span><br><span class="line">@Configuration //配置类</span><br><span class="line">@ComponentScan(basePackages = &quot;com.atguigu&quot;) //组件扫描</span><br><span class="line">@EnableTransactionManagement //开启事务</span><br><span class="line">public class TxConfig &#123;</span><br><span class="line"> //创建数据库连接池</span><br><span class="line"> @Bean</span><br><span class="line"> public DruidDataSource getDruidDataSource() &#123;</span><br><span class="line"> DruidDataSource dataSource = new DruidDataSource();</span><br><span class="line"> dataSource.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line"> dataSource.setUrl(&quot;jdbc:mysql:///test&quot;);</span><br><span class="line"> dataSource.setUsername(&quot;root&quot;);</span><br><span class="line"> dataSource.setPassword(&quot;root&quot;);</span><br><span class="line"> return dataSource;</span><br><span class="line"> &#125;</span><br><span class="line"> //创建 JdbcTemplate 对象</span><br><span class="line"> @Bean</span><br><span class="line"> public JdbcTemplate getJdbcTemplate(DataSource dataSource) &#123;//从IOC容器中拿到配置注入的数据源</span><br><span class="line"> //到 ioc 容器中根据类型找到 dataSource</span><br><span class="line"> JdbcTemplate jdbcTemplate = new JdbcTemplate();</span><br><span class="line"> //注入 dataSource</span><br><span class="line"> jdbcTemplate.setDataSource(dataSource);</span><br><span class="line"> return jdbcTemplate;</span><br><span class="line"> &#125;</span><br><span class="line"> //创建事务管理器</span><br><span class="line"> @Bean</span><br><span class="line"> public DataSourceTransactionManager</span><br><span class="line">getDataSourceTransactionManager(DataSource dataSource) &#123;</span><br><span class="line"> DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();</span><br><span class="line"> transactionManager.setDataSource(dataSource);</span><br><span class="line"> return transactionManager;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Calendar类的使用</title>
      <link href="posts/ca6f.html"/>
      <url>posts/ca6f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h1><p>Calendar:它为特定瞬间与一组诸如 YEAR、MONTH、DAY_OF_MONTH、HOUR 等日历字段之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。</p><h3 id="一、构造方法"><a href="#一、构造方法" class="headerlink" title="一、构造方法"></a>一、构造方法</h3><p>protected Calendar() :由于修饰符是protected，所以无法直接创建该对象。需要通过别的途径生成该对象。</p><h3 id="二、成员方法"><a href="#二、成员方法" class="headerlink" title="二、成员方法"></a>二、成员方法</h3><table><thead><tr><th><strong>static Calendar getInstance()</strong></th><th>使用默认时区和区域设置获取日历。<strong>通过该方法生成Calendar对象。**</strong>如下所示：Calendar cr=Calendar.getInstance()；**</th></tr></thead><tbody><tr><td>public void set(int year,int month,int date,int hourofday,int minute,int second)</td><td>设置日历的年、月、日、时、分、秒。</td></tr><tr><td>public int get(int field)</td><td>返回给定日历字段的值。所谓字段就是年、月、日等等。</td></tr><tr><td>public void setTime(Date date)</td><td><strong>使用给定的Date设置此日历的时间。Date——Calendar</strong></td></tr><tr><td>public Date getTime()</td><td><strong>返回一个Date表示此日历的时间。Calendar—–Date</strong></td></tr><tr><td>abstract void add(int field,int amount)</td><td>按照日历的规则，给指定字段添加或减少时间量。</td></tr><tr><td>public long getTimeInMillies()</td><td>以毫秒为单位返回该日历的时间值。</td></tr></tbody></table><h3 id="三、日历字段"><a href="#三、日历字段" class="headerlink" title="三、日历字段"></a>三、日历字段</h3><p>日历字段包含以下两种：一种是表示时间的单位，例如年、月、日等等。另一种是具体的日期，例如一月、二月、三月、一日、二日、三日、一点钟、两点钟等等具体的时间。前一种一般时获取的时候使用，后一种一般判断的时候使用。</p><p>时间单位字段：</p><table><thead><tr><th><strong><em>YEAR\</em></strong></th><th>年</th><th><strong><em>MINUTE\</em></strong></th><th>分</th><th><strong><em>DAY_OF_WEEK_IN_MONTH\</em></strong></th><th>某月中第几周</th></tr></thead><tbody><tr><td><strong><em>MONTH\</em></strong></td><td>月</td><td><strong><em>SECOND/MILLISECOND</em></strong></td><td>秒/毫秒</td><td><strong><em>WEEK_OF_MONTH\</em></strong></td><td>日历式的第几周</td></tr><tr><td><strong><em>DATE\</em></strong></td><td>日</td><td><strong><em>DAY_OF_MONTH\</em></strong></td><td>和DATE一样</td><td><strong><em>DAY_OF_YEAR\</em></strong></td><td>一年的第多少天</td></tr><tr><td><strong><em>HOUR_OF_DAY\</em></strong></td><td>时</td><td><strong><em>DAY_OF_WEEK\</em></strong></td><td>周几</td><td><strong><em>WEEK_OF_YEAR\</em></strong></td><td>一年的第多少周</td></tr></tbody></table><p>具体时间字段：这里就不累赘了，从一月到十二月、从周一到周五</p><p>特殊的：**<em>AM_PM**</em> 返回1则表示是下午，返回0表示上午。</p><h3 id="四、例子"><a href="#四、例子" class="headerlink" title="四、例子"></a>四、例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Calendar;</span><br><span class="line"></span><br><span class="line">//        标题:世纪末的星期</span><br><span class="line">//        曾有邪教称1999年12月31日是世界末日。当然该谣言已经不攻自破。还有人称今后的某个世纪末的12月31日，如果是星期一则会....</span><br><span class="line">//        有趣的是，任何一个世纪末的年份的12月31日部不可能是星期一!!于是，“谣言制造商“又修改为星期日......</span><br><span class="line">//        1999年的12月31日是星期五，请问:未来剧一个离我们最近的一个世纪末年（即xx99年）的12月31日正好是星期天(即星期日)?</span><br><span class="line">//        请回答该年份(只写这个4位整数。不要写12月31等多余信息)</span><br><span class="line">public class _01世纪末的星期 &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        for(int year =1999;year&lt;10000;year+=100)&#123;</span><br><span class="line">            calendar.set(Calendar.YEAR,year);</span><br><span class="line">            calendar.set(Calendar.MONTH,11);//12月</span><br><span class="line">            calendar.set(Calendar.DAY_OF_MONTH,31);</span><br><span class="line">            if(calendar.get(Calendar.DAY_OF_WEEK)==1)&#123;</span><br><span class="line">                System.out.println(year);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring IOC容器 Bean 管理——基于注解方式</title>
      <link href="posts/a3e2.html"/>
      <url>posts/a3e2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="IOC-操作-Bean-管理-基于注解方式"><a href="#IOC-操作-Bean-管理-基于注解方式" class="headerlink" title="IOC 操作 Bean 管理(基于注解方式)"></a>IOC 操作 Bean 管理(基于注解方式)</h2><p> <strong>1、什么是注解</strong></p><p> （1）注解是代码特殊标记，格式：@注解名称(属性名称=属性值, 属性名称=属性值…)</p><p> （2）使用注解，注解作用在类上面，方法上面，属性上面</p><p> （3）使用注解目的：简化 xml 配置</p><p> <strong>2、Spring 针对 Bean 管理中创建对象提供注解</strong></p><p> 下面四个注解功能是一样的，都可以用来创建 bean 实例</p><p> （1）@Component</p><p> （2）@Service</p><p> （3）@Controller</p><p> （4）@Repository</p><p> <strong>3、基于注解方式实现对象创建</strong></p><p> 第一步 引入依赖 （引入<strong>spring-aop jar包</strong>）</p><p> 第二步 开启组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启组件扫描</span></span><br><span class="line"><span class="comment"> 1 如果扫描多个包，多个包使用逗号隔开</span></span><br><span class="line"><span class="comment"> 2 扫描包上层目录</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 第三步 创建类，在类上面添加创建对象注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在注解里面 value 属性值可以省略不写，</span></span><br><span class="line"><span class="comment">//默认值是类名称，首字母小写</span></span><br><span class="line"><span class="comment">//UserService -- userService</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span> <span class="comment">//注解等同于XML配置文件：&lt;bean id=&quot;userService&quot; class=&quot;..&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>4、开启组件扫描细节配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例 1</span></span><br><span class="line"><span class="comment"> use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span></span><br><span class="line"><span class="comment"> context:include-filter ，设置扫描哪些内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span> <span class="attr">use-defaultfilters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="comment">&lt;!--代表只扫描Controller注解的类--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--示例 2</span></span><br><span class="line"><span class="comment"> 下面配置扫描包所有内容</span></span><br><span class="line"><span class="comment"> context:exclude-filter： 设置哪些内容不进行扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="comment">&lt;!--表示Controller注解的类之外一切都进行扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>5、基于注解方式实现属性注入</strong></p><p> （1）@Autowired：根据属性类型进行自动装配</p><p> 第一步 把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</p><p>第二步 在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> <span class="comment">//定义 dao 类型属性</span></span><br><span class="line"> <span class="comment">//不需要添加 set 方法</span></span><br><span class="line"> <span class="comment">//添加注入属性注解</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line"> userDao.add();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dao实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Repository(value = &quot;userDaoImpl1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao add.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （2）@Qualifier：根据名称进行注入，这个@Qualifier 注解的使用，和上面@Autowired 一起使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义 dao 类型属性</span></span><br><span class="line"><span class="comment">//不需要添加 set 方法</span></span><br><span class="line"><span class="comment">//添加注入属性注解</span></span><br><span class="line"><span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line"><span class="comment">//根据名称进行注入（目的在于区别同一接口下有多个实现类，根据类型就无法选择，从而出错！）</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span> </span><br></pre></td></tr></table></figure><p> （3）@Resource：可以根据类型注入，也可以根据名称注入（它属于javax包下的注解，不推荐使用！）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Resource //根据类型进行注入</span></span><br><span class="line"><span class="meta">@Resource(name = &quot;userDaoImpl1&quot;)</span> <span class="comment">//根据名称进行注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><p> （4）@Value：注入普通类型属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;abc&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name</span><br></pre></td></tr></table></figure><p> <strong>6、完全注解开发</strong></p><p> （1）创建配置类，替代 xml 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//作为配置类，替代 xml 配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （2）编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testService2</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//加载配置类</span></span><br><span class="line"> <span class="type">ApplicationContext</span> <span class="variable">context</span></span><br><span class="line"> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>,</span><br><span class="line">UserService.class);</span><br><span class="line"> System.out.println(userService);</span><br><span class="line"> userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 其一</title>
      <link href="posts/24f.html"/>
      <url>posts/24f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="SpringBoot笔记-其一"><a href="#SpringBoot笔记-其一" class="headerlink" title="SpringBoot笔记 其一"></a>SpringBoot笔记 其一</h1><h2 id="开始第一个springboot项目"><a href="#开始第一个springboot项目" class="headerlink" title="开始第一个springboot项目"></a>开始第一个springboot项目</h2><h3 id="1-创建Maven项目"><a href="#1-创建Maven项目" class="headerlink" title="1.创建Maven项目"></a>1.创建Maven项目</h3><h3 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2.导入依赖"></a>2.导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-编写一个主程序：启动springBooy应用"><a href="#3-编写一个主程序：启动springBooy应用" class="headerlink" title="3.编写一个主程序：启动springBooy应用"></a>3.编写一个主程序：启动springBooy应用</h3><p>​    1.创建一个类:</p><p>​                <img src="https://z3.ax1x.com/2021/09/08/hHcaa8.png" alt="https://z3.ax1x.com/2021/09/08/hHcaa8.png"></p><p>​    2.编写代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myspringboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//来标注一个主程序类，说明这是一个springboot应用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldMainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-编写相关的Controller、Service"><a href="#4-编写相关的Controller、Service" class="headerlink" title="4.编写相关的Controller、Service"></a>4.编写相关的Controller、Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myspringboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="comment">//接受浏览器的hello请求</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-运行main方法，用浏览器打开localhost-8080得到如下界面："><a href="#5-运行main方法，用浏览器打开localhost-8080得到如下界面：" class="headerlink" title="5.运行main方法，用浏览器打开localhost:8080得到如下界面："></a>5.运行main方法，用浏览器打开localhost:8080得到如下界面：</h3><p><a href="https://z3.ax1x.com/2021/09/08/hHRCUf.png![](https://z3.ax1x.com/2021/09/08/hHRCUf.png)">https://z3.ax1x.com/2021/09/08/hHRCUf.png![](https://z3.ax1x.com/2021/09/08/hHRCUf.png)</a></p><h3 id="6-打开localhost-8080-hello得到："><a href="#6-打开localhost-8080-hello得到：" class="headerlink" title="6.打开localhost:8080/hello得到："></a>6.打开localhost:8080/hello得到：</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://z3.ax1x.com/2021/09/08/hHRhi8.png" alt="https://z3.ax1x.com/2021/09/08/hHRhi8.png"></h3><h3 id="7-简化部署"><a href="#7-简化部署" class="headerlink" title="7.简化部署"></a>7.简化部署</h3><p>不需要打war包</p><p>只需导入插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这个插件可以将应用打包成一个可执行的jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>将这个应用打成jar包，直接使用cmd中java -jar spring-boot-01-hello-1.0-SNAPSHOT.jar的命令进行执行</p></blockquote><h2 id="Hello-World探究"><a href="#Hello-World探究" class="headerlink" title="Hello World探究"></a>Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br></pre></td></tr></table></figure><p>Spring Boot的版本仲裁中心；</p><p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p><h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong>-==web==：</p><p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p><p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p><h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldMainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure><p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p><p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p><p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p><p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p><p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(EnableAutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure><p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p><p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p><p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p><p>​        给容器中导入组件？</p><p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p><p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        ![自动配置类](E:\源码、资料、课件\文档\Spring Boot 笔记\images\搜狗截图20180129224104.png)</p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p><p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p><p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p><p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p><p>​        </p><p>==Spring注解版（谷粒学院）==</p><h2 id="使用Spring-Initializer快速创建Spring-Boot项目"><a href="#使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="使用Spring Initializer快速创建Spring Boot项目"></a>使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p><p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p><p>默认生成的Spring Boot项目；</p><ul><li>主程序已经生成好了，我们只需要我们自己的逻辑</li><li>resources文件夹中目录结构<ul><li>static：保存所有的静态资源； js css  images；</li><li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li><li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li></ul></li></ul><h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><h2 id="YAML语法："><a href="#YAML语法：" class="headerlink" title="YAML语法："></a>YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>属性和值也是大小写敏感；</p><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p><p>​        字符串默认不用加上单引号或者双引号；</p><p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​        对象还是k: v的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">        <span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">        <span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> &#123;<span class="attr">lastName:</span> <span class="string">zhangsan</span>,<span class="attr">age:</span> <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure><h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">lastName:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line">    <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="number">12</span>&#125;</span><br><span class="line">    <span class="attr">lists:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小狗</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>javaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p><p>![idea配置乱码](E:/源码、资料、课件/文档/Spring Boot 笔记/images/搜狗截图20180130161620.png)</p><h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value(&quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = &quot;person&quot;)默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value(&quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(locations = &#123;&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure><p>不来编写Spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.springboot.service.HelloService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p><p>1、配置类**@Configuration**——&gt;Spring配置文件</p><p>2、使用**@Bean**给容器中添加组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HelloService <span class="title function_">helloService02</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;配置类@Bean给容器中添加组件了...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HelloService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##4、配置文件占位符</p><h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="type">int</span>&#125;、$&#123;random.<span class="type">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="type">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="type">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person.last-name</span>=<span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="attr">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="attr">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="attr">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="attr">person.maps.k2</span>=<span class="string">14</span></span><br><span class="line"><span class="attr">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="attr">person.dog.name</span>=<span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line"><span class="attr">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p><p>默认使用application.properties的配置；</p><h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure><h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p><p>​    2、命令行：</p><p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p><p>​        可以直接在测试的时候，配置传入命令行参数</p><p>​    3、虚拟机参数；</p><p>​        -Dspring.profiles.active=dev</p><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>–file:./config/</p><p>–file:./</p><p>–classpath:/config/</p><p>–classpath:/</p><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p><p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p><p>多个配置用空格分开； –配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p><p>==<strong>优先加载带profile</strong>==</p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p>==<strong>再来加载不带profile</strong>==</p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config">参考官方文档</a></p><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties">配置文件能配置的属性参照</a></p><h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p><p><strong>2）、@EnableAutoConfiguration 作用：</strong></p><ul><li><p>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</p></li><li><p>可以查看selectImports()方法的内容；</p></li><li><p>List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</p><ul><li><pre><code class="java">SpringFactoriesLoader.loadFactoryNames()扫描所有jar包类路径下  META-INF/spring.factories把扫描到的这些文件的内容包装成properties对象从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==**</span><br><span class="line"></span><br><span class="line">```properties</span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HttpEncodingProperties.class)</span>  <span class="comment">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span>  <span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span>  <span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpEncodingAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(CharacterEncodingFilter.class)</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">    <span class="keyword">public</span> CharacterEncodingFilter <span class="title function_">characterEncodingFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderedCharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="built_in">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="built_in">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="built_in">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>根据当前不同的条件判断，决定这个配置类是否生效？</p><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p><p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span>  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpEncodingProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_CHARSET</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>精髓：</strong></p><p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p><p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p><p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p><p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p><p>xxxxAutoConfigurartion：自动配置类；</p><p>给容器中添加组件</p><p>xxxxProperties:封装配置文件中相关属性；</p><h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p>我们怎么知道哪些自动配置类生效；</p><p>**==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==**，这样我们就可以很方便的知道哪些自动配置类生效；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO-CONFIGURATION REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required class <span class="string">&#x27;org.springframework.web.servlet.DispatcherServlet&#x27;</span>; <span class="meta">@ConditionalOnMissingClass</span> did not find unwanted <span class="title function_">class</span> <span class="params">(OnClassCondition)</span></span><br><span class="line">      - <span class="meta">@ConditionalOnWebApplication</span> (required) found <span class="title function_">StandardServletEnvironment</span> <span class="params">(OnWebApplicationCondition)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Negative matches:（没有启动，没有匹配成功的自动配置类）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   ActiveMQAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required classes <span class="string">&#x27;javax.jms.ConnectionFactory&#x27;</span>, <span class="string">&#x27;org.apache.activemq.ActiveMQConnectionFactory&#x27;</span> (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required classes <span class="string">&#x27;org.aspectj.lang.annotation.Aspect&#x27;</span>, <span class="string">&#x27;org.aspectj.lang.reflect.Advice&#x27;</span> (OnClassCondition)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随缘更新的SpringBoot学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-AOP概念及使用</title>
      <link href="posts/a5ee.html"/>
      <url>posts/a5ee.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring-AOP"></a>Spring-AOP</h2><h3 id="1、AOP-基本概念"><a href="#1、AOP-基本概念" class="headerlink" title="1、AOP 基本概念"></a><strong>1、AOP 基本概念</strong></h3><p> （1）面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p> （2）通俗描述：不通过修改源代码方式，在主干功能里面添加新功能</p><p> （3）使用登录例子说明 AOP</p><p><img src="https://img-blog.csdnimg.cn/20200702135106266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ5NjE5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2、AOP（底层原理）"><a href="#2、AOP（底层原理）" class="headerlink" title="2、AOP（底层原理）"></a><strong>2、AOP（底层原理）</strong></h3><p> a）AOP 底层使用动态代理 ，动态代理有两种情况：</p><blockquote><p>第一种 有接口情况，使用 JDK 动态代理 ；创建<strong>接口实现类代理对象</strong>，增强类的方法<br> <img src="https://img-blog.csdnimg.cn/20200702135134128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ5NjE5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><blockquote><p>第二种 没有接口情况，使用 CGLIB 动态代理；创建<strong>子类的代理对象</strong>，增强类的方法<br> <img src="https://img-blog.csdnimg.cn/2020070213514980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ5NjE5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="3、AOP（JDK-动态代理）"><a href="#3、AOP（JDK-动态代理）" class="headerlink" title="3、AOP（JDK 动态代理）"></a><strong>3、AOP（JDK 动态代理）</strong></h3><p> 1）使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象</p><blockquote><p>调用 newProxyInstance 方法，方法有三个参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                      InvocationHandler h)</span></span><br></pre></td></tr></table></figure><p> 第一参数，类加载器</p><p> 第二参数，增强方法所在的类，这个类实现的接口，<em>支持多个接口</em></p><p> 第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分</p></blockquote><p> 2）编写 JDK 动态代理代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）创建接口，定义方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//（2）创建接口实现类，实现方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> a+b;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> id;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//（3）使用 Proxy 类创建接口代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="comment">//创建接口实现类代理对象</span></span><br><span class="line"> Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line"> <span class="type">UserDaoImpl</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>(); </span><br><span class="line"><span class="comment">/** 第一参数，类加载器 </span></span><br><span class="line"><span class="comment">第二参数，增强方法所在的类，这个类实现的接口，(支持多个接口)</span></span><br><span class="line"><span class="comment">第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分  */</span></span><br><span class="line"> <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span>(UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UserDaoProxy</span>(userDao));</span><br><span class="line"> <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> dao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"> System.out.println(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"> <span class="comment">//1 把创建的是谁的代理对象，把谁传递过来</span></span><br><span class="line"> <span class="comment">//有参数构造传递</span></span><br><span class="line"> <span class="keyword">private</span> Object obj;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">UserDaoProxy</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.obj = obj;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//增强的逻辑</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"> <span class="comment">//方法之前</span></span><br><span class="line"> System.out.println(<span class="string">&quot;方法之前执行....&quot;</span>+method.getName()+<span class="string">&quot; :传递的参数...&quot;</span>+ Arrays.toString(args));</span><br><span class="line"> <span class="comment">//被增强的方法执行</span></span><br><span class="line"> <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line"> <span class="comment">//方法之后</span></span><br><span class="line"> System.out.println(<span class="string">&quot;方法之后执行....&quot;</span>+obj);</span><br><span class="line"> <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、AOP（术语）"><a href="#4、AOP（术语）" class="headerlink" title="4、AOP（术语）"></a><strong>4、AOP（术语）</strong></h3><p> a）连接点：类里面哪些方法可以被增强，这些方法称为连接点</p><p> b）切入点：实际被真正增强的方法称为切入点</p><p> c）通知（增强）：实际增强的逻辑部分称为通知，且分为以下五种类型：</p><p> 1）前置通知 2）后置通知 3）环绕通知 4）异常通知 5）最终通知</p><p> d）切面：把通知应用到切入点过程</p><h3 id="5、AOP操作"><a href="#5、AOP操作" class="headerlink" title="5、AOP操作"></a><strong>5、AOP操作</strong></h3><p> a）Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使 用，进行 AOP 操作</p><p> b）基于 AspectJ 实现 AOP 操作：1）基于 xml 配置文件实现 （2）基于注解方式实现（使用）</p><p> c）引入相关jar包</p><p> d）切入点表达式，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）切入点表达式作用：知道对哪个类里面的哪个方法进行增强 </span><br><span class="line">（<span class="number">2</span>）语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )</span><br><span class="line">（<span class="number">3</span>）例子如下：</span><br><span class="line">    例 <span class="number">1</span>：对 com.atguigu.dao.BookDao 类里面的 add 进行增强</span><br><span class="line">execution(* com.atguigu.dao.BookDao.add(..))</span><br><span class="line"> 例 <span class="number">2</span>：对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强</span><br><span class="line">execution(* com.atguigu.dao.BookDao.* (..))</span><br><span class="line">    例 <span class="number">3</span>：对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强</span><br><span class="line">execution(* com.atguigu.dao.*.* (..))</span><br></pre></td></tr></table></figure><h3 id="6、AOP-操作（AspectJ-注解）"><a href="#6、AOP-操作（AspectJ-注解）" class="headerlink" title="6、AOP 操作（AspectJ 注解）"></a><strong>6、AOP 操作（AspectJ 注解）</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、创建类，在类里面定义方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;add.......&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、创建增强类（编写增强逻辑）</span></span><br><span class="line"><span class="comment">//（1）在增强类里面，创建方法，让不同方法代表不同通知类型</span></span><br><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;<span class="comment">//前置通知</span></span><br><span class="line"> System.out.println(<span class="string">&quot;before......&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">3</span>、进行通知的配置--&gt;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 开启注解扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.atguigu.spring5.aopanno&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启Aspect生成代理对象--&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4、配置不同类型的通知</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">      <span class="comment">//相同切入点抽取</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointdemo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="comment">//@Before注解表示作为前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;pointdemo()&quot;)</span><span class="comment">//相同切入点抽取使用！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知（返回通知）</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前.........&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、有多个增强类对同一个方法进行增强，设置增强类优先级"><a href="#7、有多个增强类对同一个方法进行增强，设置增强类优先级" class="headerlink" title="7、有多个增强类对同一个方法进行增强，设置增强类优先级"></a><strong>7、有多个增强类对同一个方法进行增强，设置增强类优先级</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonProxy</span>&#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="8、AOP-操作（AspectJ-配置文件）"><a href="#8、AOP-操作（AspectJ-配置文件）" class="headerlink" title="8、AOP 操作（AspectJ 配置文件）"></a><strong>8、AOP 操作（AspectJ 配置文件）</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1、创建两个类，增强类和被增强类，创建方法（同上一样）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2、在 spring 配置文件中创建两个类对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--创建对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.aopxml.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.aopxml.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3、在 spring 配置文件中配置切入点--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置 aop 增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.atguigu.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--增强作用在具体的方法上--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IOC容器-Bean管理——基于XML方式（续集）</title>
      <link href="posts/bcda.html"/>
      <url>posts/bcda.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Spring-IOC容器-Bean管理——基于XML（续集）"><a href="#Spring-IOC容器-Bean管理——基于XML（续集）" class="headerlink" title="Spring IOC容器-Bean管理——基于XML（续集）"></a>Spring IOC容器-Bean管理——基于XML（续集）</h1><h2 id="1、IOC-操作-Bean-管理（FactoryBean）"><a href="#1、IOC-操作-Bean-管理（FactoryBean）" class="headerlink" title="1、IOC 操作 Bean 管理（FactoryBean）"></a><strong>1、IOC 操作 Bean 管理（FactoryBean）</strong></h2><blockquote><p> 1、Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</p><p> 2、普通 bean：在配置文件中定义 bean 类型就是返回类型</p><p> 3、工厂 bean：在配置文件定义 bean 类型可以和<strong>返回类型不一样</strong> 第一步 创建类，让这个类作为工厂 bean，实现接口 FactoryBean 第二步 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Course&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义返回bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Course <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">        course.setCname(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;myBean&quot;</span> class=<span class="string">&quot;com.atguigu.spring5.factorybean.MyBean&quot;</span>&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line"> <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;myBean&quot;</span>, Course.class);<span class="comment">//返回值类型可以不是定义的bean类型！</span></span><br><span class="line"> System.out.println(course);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、IOC-操作-Bean-管理（bean-作用域）"><a href="#2、IOC-操作-Bean-管理（bean-作用域）" class="headerlink" title="2、IOC 操作 Bean 管理（bean 作用域）"></a><strong>2、IOC 操作 Bean 管理（bean 作用域）</strong></h2><p> 在 Spring 里面，默认情况下，bean 是单实例对象，下面进行作用域设置：</p><blockquote><p>（1）在 spring 配置文件 bean 标签里面有属性（scope）用于设置单实例还是多实例</p><p>（2）scope 属性值 第一个值 默认值，singleton，表示是单实例对象 第二个值 prototype，表示是多实例对象</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="comment">&lt;!--设置为多实例--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>（3）singleton 和 prototype 区别</p><p>a）singleton 单实例，prototype 多实例</p><p>b）设置 scope 值是 singleton 时候，<strong>加载 spring 配置文件时候就会创建单实例对象</strong> ；设置 scope 值是 prototype 时候，不是在加载 spring 配置文件时候创建对象，在<strong>调用 getBean 方法时候创建多实例对象</strong></p></blockquote><h2 id="3、IOC-操作-Bean-管理（bean-生命周期）"><a href="#3、IOC-操作-Bean-管理（bean-生命周期）" class="headerlink" title="3、IOC 操作 Bean 管理（bean 生命周期）"></a><strong>3、IOC 操作 Bean 管理（bean 生命周期）</strong></h2><blockquote><p>1、生命周期 ：从对象创建到对象销毁的过程</p><p>2、bean 生命周期</p><p>（1）通过构造器创建 bean 实例（无参数构造）</p><p>（2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p>（3）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p>（4）bean 可以使用了（对象获取到了）</p><p>（5）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p><p>3、演示 bean 生命周期 ：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line"> <span class="comment">//无参数构造</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;第一步 执行无参数构造创建 bean 实例&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">private</span> String oname;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOname</span><span class="params">(String oname)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.oname = oname;</span><br><span class="line"> System.out.println(<span class="string">&quot;第二步 调用 set 方法设置属性值&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建执行的初始化的方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;第三步 执行初始化的方法&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建执行的销毁的方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;第五步 执行销毁的方法&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPost</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;<span class="comment">//创建后置处理器实现类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之前执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之后执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--配置文件的bean参数配置--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;orders&quot;</span> class=<span class="string">&quot;com.atguigu.spring5.bean.Orders&quot;</span> init-method=<span class="string">&quot;initMethod&quot;</span> destroy-method=<span class="string">&quot;destroyMethod&quot;</span>&gt;&lt;!--配置初始化方法和销毁方法--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;oname&quot;</span> value=<span class="string">&quot;手机&quot;</span>&gt;&lt;/property&gt;&lt;!--这里就是通过set方式（注入属性）赋值--&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--配置后置处理器--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;myBeanPost&quot;</span> class=<span class="string">&quot;com.atguigu.spring5.bean.MyBeanPost&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean3</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// ApplicationContext context =</span></span><br><span class="line"><span class="comment">// new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;);</span></span><br><span class="line"> <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean4.xml&quot;</span>);</span><br><span class="line"> <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line"> System.out.println(<span class="string">&quot;第四步 获取创建 bean 实例对象&quot;</span>);</span><br><span class="line"> System.out.println(orders);</span><br><span class="line"> <span class="comment">//手动让 bean 实例销毁</span></span><br><span class="line"> context.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>4、bean 的后置处理器，bean 生命周期有七步</strong> （正常生命周期为五步，而配置后置处理器后为七步）</p><p>（1）通过构造器创建 bean 实例（无参数构造）</p><p>（2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p>（3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</p><p>（4）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p>（5）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization</p><p>（6）bean 可以使用了（对象获取到了）</p><p>（7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p></blockquote><hr><h2 id="4、IOC-操作-Bean-管理-外部属性文件"><a href="#4、IOC-操作-Bean-管理-外部属性文件" class="headerlink" title="4、IOC 操作 Bean 管理(外部属性文件)"></a><strong>4、IOC 操作 Bean 管理(外部属性文件)</strong></h2><blockquote><p><strong>方式一：直接配置数据库信息</strong> ：（1）配置Druid（德鲁伊）连接池 （2）引入Druid（德鲁伊）连接池依赖 jar 包</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--直接配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>方式二：引入外部属性文件配置数据库连接池</strong></p><p>（1）创建外部属性文件，properties 格式文件，写数据库信息（<strong>jdbc.properties</strong>）</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prop.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">prop.url</span>=<span class="string">jdbc:mysql://localhost:3306/userDb</span></span><br><span class="line"><span class="attr">prop.userName</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">prop.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><blockquote><p>（2）把外部 properties 属性文件引入到 spring 配置文件中 —— 引入 context 名称空间</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><span class="comment">&lt;!--引入context名称空间--&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring——IOC（控制反转）</title>
      <link href="posts/3739.html"/>
      <url>posts/3739.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、IOC容器"><a href="#一、IOC容器" class="headerlink" title="一、IOC容器"></a><strong>一、IOC容器</strong></h2><h3 id="1、什么是IOC（控制反转）"><a href="#1、什么是IOC（控制反转）" class="headerlink" title="1、什么是IOC（控制反转）"></a><strong>1、什么是IOC（控制反转）</strong></h3><p> a）把对象创建和对象之间的调用过程，交给Spring进行管理</p><p> b）使用IOC目的：为了降低耦合度</p><h3 id="2、IOC底层"><a href="#2、IOC底层" class="headerlink" title="2、IOC底层"></a><strong>2、IOC底层</strong></h3><p> a）xml解析、工厂模式、反射</p><h3 id="3、Spring提供的IOC容器实现的两种方式（两个接口）"><a href="#3、Spring提供的IOC容器实现的两种方式（两个接口）" class="headerlink" title="3、Spring提供的IOC容器实现的两种方式（两个接口）"></a><strong>3、Spring提供的IOC容器实现的两种方式（两个接口）</strong></h3><p> a）BeanFactory接口：IOC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用（加载配置文件时候不会创建对象，在获取对象时才会创建对象。）</p><p> b）ApplicationContext接口：BeanFactory接口的子接口，提供更多更强大的功能，提供给开发人员使用（加载配置文件时候就会把在配置文件对象进行创建）推荐使用！</p><h3 id="4、ApplicationContext接口的实现类（具体根据API文档查看-☺-）"><a href="#4、ApplicationContext接口的实现类（具体根据API文档查看-☺-）" class="headerlink" title="4、ApplicationContext接口的实现类（具体根据API文档查看**☺**）"></a><strong>4、ApplicationContext接口的实现类（具体根据API文档查看**</strong>☺**<strong>）</strong></h3><h2 id="二、IOC容器-Bean管理"><a href="#二、IOC容器-Bean管理" class="headerlink" title="二、IOC容器-Bean管理"></a><strong>二、IOC容器-Bean管理</strong></h2><h3 id="1、IOC操作Bean管理"><a href="#1、IOC操作Bean管理" class="headerlink" title="1、IOC操作Bean管理"></a><strong>1、IOC操作Bean管理</strong></h3><p> a）Bean管理就是两个操作：（1）Spring创建对象；（2）Spring注入属性</p><h3 id="2、基于XML配置文件创建对象"><a href="#2、基于XML配置文件创建对象" class="headerlink" title="2、基于XML配置文件创建对象"></a><strong>2、基于XML配置文件创建对象</strong></h3><!--1 配置User对象创建--><p> <bean id="user" class="com.atguigu.spring5.User"></bean></p><h3 id="3、基于XML方式注入属性（DI：依赖注入（注入属性））"><a href="#3、基于XML方式注入属性（DI：依赖注入（注入属性））" class="headerlink" title="3、基于XML方式注入属性（DI：依赖注入（注入属性））"></a><strong>3、基于XML方式注入属性</strong>（DI：依赖注入（注入属性））</h3><h4 id="a）set方式注入"><a href="#a）set方式注入" class="headerlink" title="a）set方式注入"></a>a）set方式注入</h4><p>//（1）传统方式： 创建类，定义属性和对应的set方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> public class Book &#123;</span><br><span class="line">     //创建属性</span><br><span class="line">     private String bname;</span><br><span class="line"></span><br><span class="line">//创建属性对应的set方法</span><br><span class="line">     public void setBname(String bname) &#123;</span><br><span class="line">       this.bname = bname;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><!--（2）spring方式： set方法注入属性--><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.Book&quot;&gt;</span><br><span class="line">  &lt;!--使用property完成属性注入</span><br><span class="line">    name：类里面属性名称</span><br><span class="line">    value：向属性注入的值</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;property name=&quot;bname&quot; value=&quot;Hello&quot;&gt;&lt;/property&gt;</span><br><span class="line">  &lt;property name=&quot;bauthor&quot; value=&quot;World&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="b）有参构造函数注入"><a href="#b）有参构造函数注入" class="headerlink" title="b）有参构造函数注入"></a>b）有参构造函数注入</h4><p>//（1）传统方式：创建类，构建有参函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Orders &#123;</span><br><span class="line">  //属性</span><br><span class="line">  private String oname;</span><br><span class="line">  private String address;</span><br><span class="line">  //有参数构造</span><br><span class="line">  public Orders(String oname,String address) &#123;</span><br><span class="line">    this.oname = oname;</span><br><span class="line">    this.address = address;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><!--（2）spring方式：有参数构造注入属性--><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;orders&quot; class=&quot;com.atguigu.spring5.Orders&quot;&gt;</span><br><span class="line">  &lt;constructor-arg name=&quot;oname&quot; value=&quot;Hello&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">  &lt;constructor-arg name=&quot;address&quot; value=&quot;China！&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="c）p名称空间注入（了解即可）"><a href="#c）p名称空间注入（了解即可）" class="headerlink" title="c）p名称空间注入（了解即可）"></a>c）p名称空间注入（了解即可）</h4><!--1、添加p名称空间在配置文件头部--><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">   xmlns:p=&quot;http://www.springframework.org/schema/p&quot;        &lt;!--在这里添加一行p--&gt;</span><br></pre></td></tr></table></figure><!--2、在bean标签进行属性注入（算是set方式注入的简化操作）--><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.Book&quot; p:bname=&quot;very&quot; p:bauthor=&quot;good&quot;&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="4、注入空值和特殊符号"><a href="#4、注入空值和特殊符号" class="headerlink" title="4、注入空值和特殊符号"></a><strong>4、注入空值和特殊符号</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.Book&quot;&gt;</span><br><span class="line">   &lt;!--（1）null值--&gt;</span><br><span class="line">   &lt;property name=&quot;address&quot;&gt;</span><br><span class="line">     &lt;null/&gt;&lt;!--属性里边添加一个null标签--&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--（2）特殊符号赋值--&gt;</span><br><span class="line">   &lt;!--属性值包含特殊符号</span><br><span class="line">    a 把&lt;&gt;进行转义 &lt; &gt;</span><br><span class="line">    b 把带特殊符号内容写到CDATA</span><br><span class="line">    --&gt;</span><br><span class="line">     &lt;property name=&quot;address&quot;&gt;</span><br><span class="line">       &lt;value&gt;&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;&lt;/value&gt;</span><br><span class="line">     &lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="5、注入属性-外部bean"><a href="#5、注入属性-外部bean" class="headerlink" title="5、注入属性-外部bean"></a><strong>5、注入属性-外部bean</strong></h3><h5 id="a）创建两个类service和dao类"><a href="#a）创建两个类service和dao类" class="headerlink" title="a）创建两个类service和dao类"></a>a）创建两个类service和dao类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class UserService &#123;//service类</span><br><span class="line"></span><br><span class="line">//创建UserDao类型属性，生成set方法</span><br><span class="line">   private UserDao userDao;</span><br><span class="line">   public void setUserDao(UserDao userDao) &#123;</span><br><span class="line">     this.userDao = userDao;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">public void add() &#123;</span><br><span class="line">     System.out.println(&quot;service add...............&quot;);</span><br><span class="line">     userDao.update();//调用dao方法</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;//dao类</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">   public void update() &#123;</span><br><span class="line">     System.out.println(&quot;dao update...........&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="b）在spring配置文件中进行配置"><a href="#b）在spring配置文件中进行配置" class="headerlink" title="b）在spring配置文件中进行配置"></a>b）在spring配置文件中进行配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--1 service和dao对象创建--&gt;</span><br><span class="line"> &lt;bean id=&quot;userService&quot; class=&quot;com.atguigu.spring5.service.UserService&quot;&gt;</span><br><span class="line">   &lt;!--注入userDao对象</span><br><span class="line">     name属性：类里面属性名称</span><br><span class="line">     ref属性：创建userDao对象bean标签id值</span><br><span class="line">   --&gt;</span><br><span class="line">   &lt;property name=&quot;userDao&quot; ref=&quot;userDaoImpl&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line"> &lt;bean id=&quot;userDaoImpl&quot; class=&quot;com.atguigu.spring5.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="6、基于XML方式注入内部bean和级联赋值"><a href="#6、基于XML方式注入内部bean和级联赋值" class="headerlink" title="6、基于XML方式注入内部bean和级联赋值"></a><strong>6、基于XML方式注入内部bean和级联赋值</strong></h3><h4 id="a）注入属性-内部bean"><a href="#a）注入属性-内部bean" class="headerlink" title="a）注入属性-内部bean"></a>a）注入属性-内部bean</h4><h5 id="（1）一对多关系：部门和员工"><a href="#（1）一对多关系：部门和员工" class="headerlink" title="（1）一对多关系：部门和员工"></a>（1）一对多关系：部门和员工</h5><p>一个部门有多个员工，一个员工属于一个部门（部门是一，员工是多）</p><h5 id="（2）在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示"><a href="#（2）在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示" class="headerlink" title="（2）在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示"></a>（2）在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//部门类</span><br><span class="line"> public class Dept &#123;</span><br><span class="line">   private String dname;</span><br><span class="line">   public void setDname(String dname) &#123;</span><br><span class="line">     this.dname = dname;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">//员工类</span><br><span class="line"> public class Emp &#123;</span><br><span class="line">   private String ename;</span><br><span class="line">   private String gender;</span><br><span class="line">   //员工属于某一个部门，使用对象形式表示</span><br><span class="line">   private Dept dept;</span><br><span class="line"></span><br><span class="line">   public void setDept(Dept dept) &#123;</span><br><span class="line">     this.dept = dept;</span><br><span class="line">   &#125;</span><br><span class="line">   public void setEname(String ename) &#123;</span><br><span class="line">     this.ename = ename;</span><br><span class="line">   &#125;</span><br><span class="line">   public void setGender(String gender) &#123;</span><br><span class="line">     this.gender = gender;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="（3）在spring配置文件中配置"><a href="#（3）在spring配置文件中配置" class="headerlink" title="（3）在spring配置文件中配置"></a>（3）在spring配置文件中配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--内部bean--&gt;</span><br><span class="line">   &lt;bean id=&quot;emp&quot; class=&quot;com.atguigu.spring5.bean.Emp&quot;&gt;</span><br><span class="line">     &lt;!--设置两个普通属性--&gt;</span><br><span class="line">     &lt;property name=&quot;ename&quot; value=&quot;Andy&quot;&gt;&lt;/property&gt;</span><br><span class="line">     &lt;property name=&quot;gender&quot; value=&quot;女&quot;&gt;&lt;/property&gt;</span><br><span class="line">     &lt;!--设置对象类型属性--&gt;</span><br><span class="line">     &lt;property name=&quot;dept&quot;&gt;</span><br><span class="line">       &lt;bean id=&quot;dept&quot; class=&quot;com.atguigu.spring5.bean.Dept&quot;&gt;&lt;!--内部bean赋值--&gt;</span><br><span class="line">         &lt;property name=&quot;dname&quot; value=&quot;宣传部门&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;/bean&gt;</span><br><span class="line">     &lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="b）注入属性-级联赋值"><a href="#b）注入属性-级联赋值" class="headerlink" title="b）注入属性-级联赋值"></a>b）注入属性-级联赋值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--方式一：级联赋值--&gt;</span><br><span class="line">   &lt;bean id=&quot;emp&quot; class=&quot;com.atguigu.spring5.bean.Emp&quot;&gt;</span><br><span class="line">     &lt;!--设置两个普通属性--&gt;</span><br><span class="line">     &lt;property name=&quot;ename&quot; value=&quot;Andy&quot;&gt;&lt;/property&gt;</span><br><span class="line">     &lt;property name=&quot;gender&quot; value=&quot;女&quot;&gt;&lt;/property&gt;</span><br><span class="line">     &lt;!--级联赋值--&gt;</span><br><span class="line">     &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">   &lt;bean id=&quot;dept&quot; class=&quot;com.atguigu.spring5.bean.Dept&quot;&gt;</span><br><span class="line">     &lt;property name=&quot;dname&quot; value=&quot;公关部门&quot;&gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"> //方式二：生成dept的get方法（get方法必须有！！）</span><br><span class="line">   public Dept getDept() &#123;</span><br><span class="line">     return dept;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><!--级联赋值--><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;emp&quot; class=&quot;com.atguigu.spring5.bean.Emp&quot;&gt;</span><br><span class="line">  &lt;!--设置两个普通属性--&gt;</span><br><span class="line">  &lt;property name=&quot;ename&quot; value=&quot;jams&quot;&gt;&lt;/property&gt;</span><br><span class="line">  &lt;property name=&quot;gender&quot; value=&quot;男&quot;&gt;&lt;/property&gt;</span><br><span class="line">  &lt;!--级联赋值--&gt;</span><br><span class="line">  &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;</span><br><span class="line">  &lt;property name=&quot;dept.dname&quot; value=&quot;技术部门&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;dept&quot; class=&quot;com.atguigu.spring5.bean.Dept&quot;&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="7、IOC-操作-Bean-管理——xml-注入集合属性"><a href="#7、IOC-操作-Bean-管理——xml-注入集合属性" class="headerlink" title="7、IOC 操作 Bean 管理——xml 注入集合属性"></a><strong>7、IOC 操作 Bean 管理——xml 注入集合属性</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1、注入数组类型属性 2、注入 List 集合类型属性 3、注入 Map 集合类型属性</span><br><span class="line"></span><br><span class="line">//（1）创建类，定义数组、list、map、set 类型属性，生成对应 set 方法</span><br><span class="line"> public class Stu &#123;</span><br><span class="line">   //1 数组类型属性</span><br><span class="line">   private String[] courses;</span><br><span class="line">   //2 list集合类型属性</span><br><span class="line">   private List&lt;String&gt; list;</span><br><span class="line">   //3 map集合类型属性</span><br><span class="line">   private Map&lt;String,String&gt; maps;</span><br><span class="line">   //4 set集合类型属性</span><br><span class="line">   private Set&lt;String&gt; sets;</span><br><span class="line"></span><br><span class="line">   public void setSets(Set&lt;String&gt; sets) &#123;</span><br><span class="line">     this.sets = sets;</span><br><span class="line">   &#125;</span><br><span class="line">   public void setCourses(String[] courses) &#123;</span><br><span class="line">     this.courses = courses;</span><br><span class="line">   &#125;</span><br><span class="line">   public void setList(List&lt;String&gt; list) &#123;</span><br><span class="line">     this.list = list;</span><br><span class="line">   &#125;</span><br><span class="line">   public void setMaps(Map&lt;String, String&gt; maps) &#123;</span><br><span class="line">     this.maps = maps;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--（2）在 spring 配置文件进行配置--&gt;     &lt;bean id=&quot;stu&quot; class=&quot;com.atguigu.spring5.collectiontype.Stu&quot;&gt;         &lt;!--数组类型属性注入--&gt;         &lt;property name=&quot;courses&quot;&gt;             &lt;array&gt;                 &lt;value&gt;java课程&lt;/value&gt;                 &lt;value&gt;数据库课程&lt;/value&gt;             &lt;/array&gt;         &lt;/property&gt;         &lt;!--list类型属性注入--&gt;         &lt;property name=&quot;list&quot;&gt;             &lt;list&gt;                 &lt;value&gt;张三&lt;/value&gt;                 &lt;value&gt;小三&lt;/value&gt;             &lt;/list&gt;         &lt;/property&gt;         &lt;!--map类型属性注入--&gt;         &lt;property name=&quot;maps&quot;&gt;             &lt;map&gt;                 &lt;entry key=&quot;JAVA&quot; value=&quot;java&quot;&gt;&lt;/entry&gt;                 &lt;entry key=&quot;PHP&quot; value=&quot;php&quot;&gt;&lt;/entry&gt;             &lt;/map&gt;         &lt;/property&gt;         &lt;!--set类型属性注入--&gt;         &lt;property name=&quot;sets&quot;&gt;             &lt;set&gt;                 &lt;value&gt;MySQL&lt;/value&gt;                 &lt;value&gt;Redis&lt;/value&gt;             &lt;/set&gt;         &lt;/property&gt; &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="8、在集合里面设置对象类型值"><a href="#8、在集合里面设置对象类型值" class="headerlink" title="8、在集合里面设置对象类型值"></a><strong>8、在集合里面设置对象类型值</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> //学生所学多门课程</span><br><span class="line">   private List&lt;Course&gt; courseList;//创建集合</span><br><span class="line">   public void setCourseList(List&lt;Course&gt; courseList) &#123;</span><br><span class="line">     this.courseList = courseList;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!--创建多个course对象--&gt;     &lt;bean id=&quot;course1&quot; class=&quot;com.atguigu.spring5.collectiontype.Course&quot;&gt;         &lt;property name=&quot;cname&quot; value=&quot;Spring5框架&quot;&gt;&lt;/property&gt;     &lt;/bean&gt;     &lt;bean id=&quot;course2&quot; class=&quot;com.atguigu.spring5.collectiontype.Course&quot;&gt;         &lt;property name=&quot;cname&quot; value=&quot;MyBatis框架&quot;&gt;&lt;/property&gt;     &lt;/bean&gt;                 &lt;!--注入list集合类型，值是对象--&gt;        &lt;property name=&quot;courseList&quot;&gt;            &lt;list&gt;                &lt;ref bean=&quot;course1&quot;&gt;&lt;/ref&gt;                &lt;ref bean=&quot;course2&quot;&gt;&lt;/ref&gt;            &lt;/list&gt;        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--第一步：在 spring 配置文件中引入名称空间 util--&gt;</span><br><span class="line"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"> &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xmlns:util=&quot;http://www.springframework.org/schema/util&quot; &lt;!--添加util名称空间--&gt;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">              http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt; &lt;!--添加util名称空间--&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--第二步：使用 util 标签完成 list 集合注入提取--&gt;</span><br><span class="line"> &lt;!--把集合注入部分提取出来--&gt;</span><br><span class="line"> &lt;!--1 提取list集合类型属性注入--&gt;</span><br><span class="line">   &lt;util:list id=&quot;bookList&quot;&gt;</span><br><span class="line">     &lt;value&gt;易筋经&lt;/value&gt;</span><br><span class="line">     &lt;value&gt;九阴真经&lt;/value&gt;</span><br><span class="line">     &lt;value&gt;九阳神功&lt;/value&gt;</span><br><span class="line">   &lt;/util:list&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--2 提取list集合类型属性注入使用--&gt;</span><br><span class="line">   &lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.collectiontype.Book&quot; scope=&quot;prototype&quot;&gt;</span><br><span class="line">     &lt;property name=&quot;list&quot; ref=&quot;bookList&quot;&gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/3eeb.html"/>
      <url>posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
